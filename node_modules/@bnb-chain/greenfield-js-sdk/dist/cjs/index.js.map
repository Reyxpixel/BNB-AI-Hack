{"version":3,"file":"index.js","sources":["../../../../node_modules/.pnpm/@rollup+plugin-typescript@11.1.6_rollup@2.79.2_tslib@2.8.1_typescript@4.9.5/node_modules/tslib/tslib.es6.js","../../../src/messages/utils.ts","../../../src/keymanage/index.ts","../../../src/sign/pubKey.ts","../../../src/sign/signTx.ts","../../../src/utils/units.ts","../../../src/clients/queryclient.ts","../../../src/constants/typeUrl.ts","../../../src/constants/http.ts","../../../src/constants/index.ts","../../../src/clients/txClient.ts","../../../src/messages/bank/MsgMultiSend.ts","../../../src/messages/bank/MsgSend.ts","../../../src/messages/greenfield/payment/MsgCreatePaymentAccount.ts","../../../src/api/account.ts","../../../src/api/basic.ts","../../../src/messages/greenfield/bridge/MsgTransferOut.ts","../../../src/messages/greenfield/chanenge/MsgAttest.ts","../../../src/messages/greenfield/chanenge/MsgSubmit.ts","../../../src/messages/greenfield/payment/MsgDeposit.ts","../../../src/messages/greenfield/payment/MsgDisableRefund.ts","../../../src/messages/greenfield/payment/MsgWithdraw.ts","../../../src/messages/greenfield/storage/MsgCancelCreateObject.ts","../../../src/messages/greenfield/storage/MsgCreateBucket.ts","../../../src/messages/greenfield/storage/MsgCreateGroup.ts","../../../src/messages/greenfield/storage/MsgCreateObject.ts","../../../src/messages/greenfield/storage/MsgDeleteBucket.ts","../../../src/messages/greenfield/storage/MsgDeleteGroup.ts","../../../src/messages/greenfield/storage/MsgDeleteObject.ts","../../../src/messages/greenfield/storage/MsgDeletePolicy.ts","../../../src/messages/greenfield/storage/MsgLeaveGroup.ts","../../../src/messages/greenfield/storage/MsgMigrateBucket.ts","../../../src/messages/greenfield/storage/MsgMirrorBucket.ts","../../../src/messages/greenfield/storage/MsgMirrorGroup.ts","../../../src/messages/greenfield/storage/MsgMirrorObject.ts","../../../src/messages/greenfield/storage/MsgPutPolicy.ts","../../../src/messages/greenfield/storage/MsgSetTag.ts","../../../src/messages/greenfield/storage/MsgToggleSPAsDelegatedAgent.ts","../../../src/messages/greenfield/storage/MsgUpdateBucketInfo.ts","../../../src/messages/greenfield/storage/MsgUpdateGroupExtra.ts","../../../src/messages/greenfield/storage/MsgUpdateGroupMember.ts","../../../src/messages/greenfield/storage/MsgUpdateObjectInfo.ts","../../../src/messages/greenfield/storage/MsgSetBucketFlowRateLimit.ts","../../../src/utils/asserts/params.ts","../../../src/clients/spclient/auth.ts","../../../src/clients/spclient/spApis/approval.ts","../../../src/types/sp/Common.ts","../../../src/clients/spclient/spApis/getBucketMeta.ts","../../../src/clients/spclient/spApis/getUserBuckets.ts","../../../src/utils/allowance.ts","../../../src/utils/asserts/s3.ts","../../../src/utils/encoding.ts","../../../src/utils/grn.ts","../../../src/utils/time.ts","../../../src/clients/spclient/spApis/listBucketReadRecords.ts","../../../src/clients/spclient/spApis/listBucketsByIds.ts","../../../src/clients/spclient/spApis/listBucketsByPayment.ts","../../../src/clients/spclient/spApis/parseError.ts","../../../src/clients/spclient/spApis/queryBucketReadQuota.ts","../../../src/utils/http.ts","../../../src/clients/spclient/spApis/getObject.ts","../../../src/clients/spclient/spApis/putObject.ts","../../../src/clients/spclient/spClient.ts","../../../src/clients/spclient/spApis/listGroups.ts","../../../src/clients/spclient/spApis/listGroupsMembers.ts","../../../src/clients/spclient/spApis/listUserGroups.ts","../../../src/clients/spclient/spApis/listUserOwnedGroups.ts","../../../src/clients/spclient/spApis/verifyPermission.ts","../../../src/messages/greenfield/virtualgroup/MsgSettle.ts","../../../src/api/virtualGroup.ts","../../../src/api/sp.ts","../../../src/api/storage.ts","../../../src/messages/greenfield/storage/MsgCancelMigrateBucket.ts","../../../src/api/bucket.ts","../../../src/api/challenge.ts","../../../src/messages/cosmos/oracle/MsgClaim.ts","../../../src/api/crosschain.ts","../../../src/messages/cosmos/distribution/MsgFundCommunityPoolTypeUrl.ts","../../../src/messages/cosmos/distribution/MsgSetWithdrawAddress.ts","../../../src/messages/cosmos/distribution/MsgWithdrawDelegatorReward.ts","../../../src/messages/cosmos/distribution/MsgWithdrawValidatorCommission.ts","../../../src/api/distribution.ts","../../../src/messages/feegrant/MsgGrantAllowance.ts","../../../src/messages/feegrant/MsgRevokeAllowance.ts","../../../src/api/feegrant.ts","../../../src/api/gashub.ts","../../../src/api/group.ts","../../../src/clients/spclient/spApis/resumablePutObject.ts","../../../src/clients/spclient/spApis/delegatedCreateFolder.ts","../../../src/clients/spclient/spApis/getObjectMeta.ts","../../../src/clients/spclient/spApis/getObjectOffset.ts","../../../src/clients/spclient/spApis/getObjectStatus.ts","../../../src/clients/spclient/spApis/listObjectPolicies.ts","../../../src/clients/spclient/spApis/listObjectsByBucket.ts","../../../src/clients/spclient/spApis/listObjectsByIds.ts","../../../src/api/objects.ts","../../../src/clients/spclient/spApis/updateUserAccountKey.ts","../../../src/offchainauth/utils.ts","../../../src/api/offchainauth.ts","../../../src/clients/spclient/spApis/listUserPaymentAccounts.ts","../../../src/api/payment.ts","../../../src/messages/cosmos/gov/MsgSubmitProposal.ts","../../../src/messages/cosmos/gov/MsgVote.ts","../../../src/api/proposal.ts","../../../src/messages/cosmos/staking/MsgCreateValidator.ts","../../../src/messages/cosmos/staking/MsgEditValidator.ts","../../../src/api/validator.ts","../../../src/client.ts","../../../src/clients/spclient/spApis/metaInfos.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","import { Any } from '@bnb-chain/greenfield-cosmos-types/google/protobuf/any';\nimport * as base64 from '@ethersproject/base64';\nimport { hexlify } from '@ethersproject/bytes';\nimport { toUtf8String } from '@ethersproject/strings';\nimport cloneDeep from 'lodash.clonedeep';\nimport get from 'lodash.get';\nimport mapValues from 'lodash.mapvalues';\nimport set from 'lodash.set';\nimport sortBy from 'lodash.sortby';\nimport { MetaTxInfo } from '..';\n\nexport type EIP712Msg = Record<string, Array<{ type: string; name: string }>>;\n\nexport const typeWrapper = (type: string, msg: object) => {\n  return {\n    ...msg,\n    type,\n  };\n};\n\nexport const generateMsg = (typeUrl: string, msgBytes: Uint8Array) => {\n  return Any.fromPartial({\n    typeUrl,\n    value: msgBytes,\n  });\n};\n\nexport const createEIP712 = (types: object, chainId: string, message: object) => {\n  return {\n    types,\n    primaryType: 'Tx',\n    domain: {\n      name: 'Greenfield Tx',\n      version: '1.0.0',\n      chainId,\n      verifyingContract: '0x71e835aff094655dEF897fbc85534186DbeaB75d',\n      salt: '0',\n    },\n    message,\n  } as const;\n};\n\nexport const generateMessage = (\n  accountNumber: string,\n  sequence: string,\n  chainCosmosId: string,\n  memo: string,\n  fee: object,\n  msg: object,\n  timeoutHeight: string,\n) => {\n  let res: Record<string, any> = {\n    account_number: accountNumber,\n    chain_id: chainCosmosId,\n    sequence,\n    memo,\n    fee,\n    timeout_height: timeoutHeight,\n  };\n\n  if (Object.keys(msg).length == 0) {\n    return res;\n  }\n\n  if (msg.hasOwnProperty('msg1')) {\n    res = {\n      ...res,\n      ...msg,\n    };\n  } else {\n    res.msg1 = msg;\n  }\n\n  return res;\n};\n\nexport const generateTypes = (newTypes: object) => {\n  const types = {\n    Coin: [\n      { name: 'denom', type: 'string' },\n      { name: 'amount', type: 'uint256' },\n    ],\n    EIP712Domain: [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'string' },\n      { name: 'salt', type: 'string' },\n    ],\n    Fee: [\n      { name: 'amount', type: 'Coin[]' },\n      { name: 'gas_limit', type: 'uint256' },\n      { name: 'payer', type: 'string' },\n      { name: 'granter', type: 'string' },\n    ],\n    Tx: [\n      {\n        name: 'account_number',\n        type: 'uint256',\n      },\n      {\n        name: 'chain_id',\n        type: 'uint256',\n      },\n      {\n        name: 'fee',\n        type: 'Fee',\n      },\n      {\n        name: 'memo',\n        type: 'string',\n      },\n      {\n        name: 'sequence',\n        type: 'uint256',\n      },\n      {\n        name: 'timeout_height',\n        type: 'uint256',\n      },\n    ],\n  };\n\n  if (Array.isArray(newTypes)) {\n    for (let i = 0; i < newTypes.length; i++) {\n      types.Tx.push({\n        name: `msg${i + 1}`,\n        type: `Msg${i + 1}`,\n      });\n    }\n    Object.assign(types, ...newTypes);\n  } else if (typeof newTypes === 'object') {\n    const msgLen = Object.keys(newTypes).filter((k) => k.startsWith('Msg')).length;\n\n    for (let i = 0; i < msgLen; i++) {\n      types.Tx.push({\n        name: `msg${i + 1}`,\n        type: `Msg${i + 1}`,\n      });\n    }\n\n    Object.assign(types, newTypes);\n  } else {\n    types.Tx.push({\n      name: 'msg1',\n      type: 'Msg1',\n    });\n    Object.assign(types, newTypes);\n  }\n\n  return mapValues(types, (o) => {\n    return sortBy(o, ['name']);\n  });\n};\n\nexport const generateFee = (\n  amount: string,\n  denom: string,\n  gas_limit: string,\n  payer: string,\n  granter: string,\n) => {\n  return {\n    amount: [\n      {\n        amount,\n        denom,\n      },\n    ],\n    gas_limit,\n    payer,\n    granter,\n  };\n};\n\nexport const mergeMultiEip712 = (\n  eip712s: MetaTxInfo['MsgSDKTypeEIP712'][],\n): MetaTxInfo['MsgSDKTypeEIP712'][] => {\n  const res: MetaTxInfo['MsgSDKTypeEIP712'][] = [];\n\n  eip712s.forEach((eip712, index) => {\n    if (index === 0) {\n      res.push(eip712);\n    } else {\n      const str = JSON.stringify(eip712);\n      const reStr = str.replaceAll('Msg1', `Msg${index + 1}`);\n      res.push(JSON.parse(reStr) as MetaTxInfo['MsgSDKTypeEIP712']);\n    }\n  });\n\n  return res;\n};\n\nexport const mergeMultiMessage = (txs: MetaTxInfo[]) => {\n  const msgs = txs.map((tx) => tx.MsgSDK);\n\n  const res: Record<string, MetaTxInfo['MsgSDK']> = {};\n  msgs.forEach((msg, index) => {\n    res[`msg${index + 1}`] = {\n      ...msg,\n      type: txs[index].typeUrl,\n    };\n  });\n\n  return res;\n};\n\nexport const findAnyType = (msgData: object): string[][] => {\n  const results: string[][] = [];\n\n  function findTypeAnyFields(obj: object, path: string[] = []) {\n    if (typeof obj === 'object' && obj !== null) {\n      for (const key in obj) {\n        const newPath: string[] = [...path, key];\n        // console.log(newPath.join('.'));\n        if (key === 'value') {\n          results.push(newPath);\n        }\n        findTypeAnyFields((obj as any)[key], newPath);\n      }\n    } else {\n      // console.log(obj);\n    }\n  }\n\n  findTypeAnyFields(msgData);\n  return results;\n};\n\nexport const convertAnyTypeData = (msgData: object, fields: string[][]) => {\n  const resData = cloneDeep(msgData);\n\n  fields.forEach((field) => {\n    const path = field.join('.');\n    const anyValue = get(resData, path);\n\n    // console.log('path', path, anyValue);\n    if (anyValue.startsWith('ZXl')) {\n      // TypeAny: need base64 decode\n      set(resData, path, toUtf8String(base64.decode(anyValue)));\n    } else if (anyValue.startsWith('eyJ')) {\n      // TypeAny[]: need base64 decode and encode hex\n      set(resData, path, hexlify(base64.decode(anyValue)));\n    } else {\n      // throw new Error('not support value' + anyValue);\n    }\n  });\n\n  return resData;\n};\n","import { createEIP712, generateFee, generateMessage, generateTypes } from '@/messages';\nimport { typeWrapper } from '@/messages/utils';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport { signTypedData, SignTypedDataVersion } from '@metamask/eth-sig-util';\nimport { publicKeyCreate } from 'ethereum-cryptography/secp256k1-compat';\nimport { BroadcastOptions, makeCosmsPubKey } from '..';\n\n/**\n * @priKey 0x prefix\n */\nexport const getPubKeyByPriKey = (priKey: string) => {\n  const privateKeyBytes = arrayify(priKey);\n  const publicKeyBytes = publicKeyCreate(privateKeyBytes);\n  const pk = hexlify(arrayify(publicKeyBytes));\n  const pubKey = makeCosmsPubKey(pk);\n  return pubKey;\n};\n\nexport const createEIP712Data = (\n  chainId: string,\n  accountNumber: string,\n  sequence: string,\n  typeUrl: string,\n  MsgSDKTypeEIP712: object,\n  MsgSDK: object,\n  txOption: BroadcastOptions,\n) => {\n  const { gasLimit, gasPrice, denom, payer, granter } = txOption;\n  const fee = generateFee(\n    String(BigInt(gasLimit) * BigInt(gasPrice)),\n    denom,\n    String(gasLimit),\n    payer,\n    granter,\n  );\n  const wrapperTypes = generateTypes(MsgSDKTypeEIP712);\n  const wrapperMsg = typeWrapper(typeUrl, MsgSDK);\n  const messages = generateMessage(accountNumber, sequence, chainId, '', fee, wrapperMsg, '0');\n  return createEIP712(wrapperTypes, chainId, messages);\n};\n\nexport const signEIP712Data = (\n  chainId: string,\n  accountNumber: string,\n  sequence: string,\n  typeUrl: string,\n  MsgSDKTypeEIP712: object,\n  MsgSDK: object,\n  txOption: BroadcastOptions,\n) => {\n  const data = createEIP712Data(\n    chainId,\n    accountNumber,\n    sequence,\n    typeUrl,\n    MsgSDKTypeEIP712,\n    MsgSDK,\n    txOption,\n  );\n\n  if (!txOption.privateKey) {\n    throw new Error('private key is required');\n  }\n\n  return signTypedData({\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    data,\n    version: SignTypedDataVersion.V4,\n    privateKey: Buffer.from(arrayify(txOption.privateKey)),\n  });\n};\n","import { PubKey } from '@bnb-chain/greenfield-cosmos-types/cosmos/crypto/secp256k1/keys';\nimport { arrayify } from '@ethersproject/bytes';\nimport { computePublicKey, recoverPublicKey } from '@ethersproject/signing-key';\nimport { SignTypedDataVersion, TypedDataUtils } from '@metamask/eth-sig-util';\nimport { ISignature712 } from '.';\n\n/**\n * recover public key from signature\n *\n * @messageHash message hash\n * @signature message signature\n *\n * @returns uncompressed public key\n */\nexport const recoverPk = ({ messageHash, signature }: ISignature712) => {\n  const uncompressedPubKey = recoverPublicKey(messageHash, signature);\n  return computePublicKey(uncompressedPubKey, true);\n};\n\n/**\n * @pk compressed public key from signature\n * @return eg. { typeUrl: '/ethermint.crypto.v1.ethsecp256k1.PubKey', value: 'CiEC+hp2uVKio9T7x0goOPyHgwUYiRsZ8MeYUrfRX8MxrzM=' }\n */\nexport const makeCosmsPubKey = (pk: string) => {\n  const pubKey = PubKey.fromPartial({\n    key: arrayify(pk),\n  });\n\n  return {\n    typeUrl: '/cosmos.crypto.eth.ethsecp256k1.PubKey',\n    value: PubKey.encode(pubKey).finish(),\n  };\n};\n\nexport const eip712Hash = (message: string) => {\n  return TypedDataUtils.eip712Hash(JSON.parse(message), SignTypedDataVersion.V4);\n};\n","import { ISignature712 } from '.';\nimport { eip712Hash } from './pubKey';\n\n/**\n * @addr wallet address\n * @message sign typed v4 data\n */\nexport const sign712Tx = async (addr: string, message: string): Promise<ISignature712> => {\n  // TODO: eth-sig-utils\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  const signature = await (window as any).ethereum?.request({\n    method: 'eth_signTypedData_v4',\n    params: [addr, message],\n  });\n\n  const messageHash = eip712Hash(message);\n\n  return {\n    signature,\n    messageHash,\n  };\n};\n\nexport const defaultSignTypedData = async (addr: string, message: string) => {\n  const signature = await (window as any).ethereum?.request({\n    method: 'eth_signTypedData_v4',\n    params: [addr, message],\n  });\n  return signature;\n};\n","import { SimulateResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/tx/v1beta1/service';\nimport { formatEther } from '@ethersproject/units';\nimport { ISimulateGasFee } from '..';\n\nexport const getGasFeeBySimulate = (\n  simulateTxInfo: SimulateResponse,\n  denom = 'BNB',\n): ISimulateGasFee => {\n  if (!simulateTxInfo.gasInfo) throw new Error('gasInfo not found');\n\n  const gasLimit = BigInt(simulateTxInfo.gasInfo?.gasUsed.toNumber());\n  const gasPrice = simulateTxInfo.gasInfo?.minGasPrice.replace(denom, '');\n  const gasFee = gasLimit * BigInt(gasPrice);\n\n  return {\n    gasLimit,\n    gasPrice,\n    gasFee: formatEther(String(gasFee)),\n  };\n};\n","import { QueryClientImpl as AuthQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/query';\nimport { QueryClientImpl as BankQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/query';\nimport { QueryClientImpl as CrosschainQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/crosschain/v1/query';\nimport { MsgClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/distribution/v1beta1/tx';\nimport { QueryClientImpl as FeeGrantQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/query';\nimport { QueryClientImpl as GashubClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/gashub/v1beta1/query';\nimport { QueryClientImpl as OracleQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/oracle/v1/query';\nimport { QueryClientImpl as StakingQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/staking/v1beta1/query';\nimport { QueryClientImpl as BridgeQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/greenfield/bridge/query';\nimport { QueryClientImpl as ChallengeQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/greenfield/challenge/query';\nimport { QueryClientImpl as PaymentQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';\nimport { QueryClientImpl as SpQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/query';\nimport { QueryClientImpl as StorageQueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';\nimport { QueryClientImpl as VirtualGroupClientImpl } from '@bnb-chain/greenfield-cosmos-types/greenfield/virtualgroup/query';\nimport {\n  AuthExtension,\n  BankExtension,\n  createProtobufRpcClient,\n  ProtobufRpcClient,\n  QueryClient,\n  setupAuthExtension,\n  setupAuthzExtension,\n  setupBankExtension,\n  setupDistributionExtension,\n  setupFeegrantExtension,\n  setupGovExtension,\n  setupIbcExtension,\n  setupMintExtension,\n  setupSlashingExtension,\n  setupStakingExtension,\n  setupTxExtension,\n  TxExtension,\n} from '@cosmjs/stargate';\nimport { AuthzExtension } from '@cosmjs/stargate/build/modules/authz/queries';\nimport { Tendermint37Client } from '@cosmjs/tendermint-rpc';\nimport { inject, injectable } from 'tsyringe';\n\n@injectable()\nexport class RpcQueryClient {\n  constructor(@inject('RPC_URL') private rpcUrl: string) {\n    this.rpcUrl = rpcUrl;\n  }\n\n  private rpcClient: ProtobufRpcClient | null = null;\n  public async getRpcClient() {\n    if (!this.rpcClient) {\n      this.rpcClient = await makeRpcClient(this.rpcUrl);\n    }\n    return this.rpcClient;\n  }\n\n  private txQueryClient:\n    | (QueryClient & BankExtension & TxExtension & AuthExtension & AuthzExtension)\n    | null = null;\n  public async getQueryClient() {\n    if (!this.txQueryClient) {\n      const [client] = await makeClientWithExtension(this.rpcUrl);\n      this.txQueryClient = client;\n    }\n    return this.txQueryClient;\n  }\n\n  public async getAuthQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new AuthQueryClientImpl(rpcClient);\n  }\n\n  public async getBankQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new BankQueryClientImpl(rpcClient);\n  }\n\n  public async getPaymentQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new PaymentQueryClientImpl(rpcClient);\n  }\n\n  public async getSpQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new SpQueryClientImpl(rpcClient);\n  }\n\n  public async getChallengeQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new ChallengeQueryClientImpl(rpcClient);\n  }\n\n  public async getCrosschainQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new CrosschainQueryClientImpl(rpcClient);\n  }\n\n  public async getOracleQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new OracleQueryClientImpl(rpcClient);\n  }\n\n  public async getBridgeQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new BridgeQueryClientImpl(rpcClient);\n  }\n\n  public async getFeeGrantQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new FeeGrantQueryClientImpl(rpcClient);\n  }\n\n  public async getStorageQueryClient() {\n    const rpcClient = await this.getRpcClient();\n    return new StorageQueryClientImpl(rpcClient);\n  }\n\n  public async getMsgClient() {\n    const rpcClient = await this.getRpcClient();\n    return new MsgClientImpl(rpcClient);\n  }\n\n  public async getGashubClient() {\n    const rpcClient = await this.getRpcClient();\n    return new GashubClientImpl(rpcClient);\n  }\n\n  public async getVirtualGroupClient() {\n    const rpcClient = await this.getRpcClient();\n    return new VirtualGroupClientImpl(rpcClient);\n  }\n\n  public async getStakingClient() {\n    const rpcClient = await this.getRpcClient();\n    return new StakingQueryClientImpl(rpcClient);\n  }\n}\n\nexport const makeClientWithExtension = async (\n  rpcUrl: string,\n): Promise<\n  [QueryClient & BankExtension & TxExtension & AuthExtension & AuthzExtension, Tendermint37Client]\n> => {\n  const tmClient = await Tendermint37Client.connect(rpcUrl);\n  return [\n    QueryClient.withExtensions(\n      tmClient,\n      setupAuthExtension,\n      setupAuthzExtension,\n      setupBankExtension,\n      setupDistributionExtension,\n      setupFeegrantExtension,\n      setupGovExtension,\n      setupIbcExtension,\n      setupMintExtension,\n      setupSlashingExtension,\n      setupStakingExtension,\n      setupTxExtension,\n    ),\n    tmClient,\n  ];\n};\n\nexport const makeRpcClient = async (rpcUrl: string) => {\n  const [, tmClient] = await makeClientWithExtension(rpcUrl);\n  const rpc = createProtobufRpcClient(new QueryClient(tmClient));\n  return rpc;\n};\n","export const MsgSendTypeUrl = '/cosmos.bank.v1beta1.MsgSend';\nexport const MsgMultiSendTypeUrl = '/cosmos.bank.v1beta1.MsgMultiSend';\nexport const MsgClaimTypeUrl = '/cosmos.oracle.v1.MsgClaim';\nexport const MsgGrantAllowanceTypeUrl = '/cosmos.feegrant.v1beta1.MsgGrantAllowance';\nexport const MsgRevokeAllowanceTypeUrl = '/cosmos.feegrant.v1beta1.MsgRevokeAllowance';\nexport const MsgTransferOutTypeUrl = '/greenfield.bridge.MsgTransferOut';\nexport const MsgAttestTypeUrl = '/greenfield.challenge.MsgAttest';\nexport const MsgSubmitTypeUrl = '/greenfield.challenge.MsgSubmit';\nexport const MsgCreatePaymentAccountTypeUrl = '/greenfield.payment.MsgCreatePaymentAccount';\nexport const MsgDepositTypeUrl = '/greenfield.payment.MsgDeposit';\nexport const MsgDisableRefundTypeUrl = '/greenfield.payment.MsgDisableRefund';\nexport const MsgWithdrawTypeUrl = '/greenfield.payment.MsgWithdraw';\nexport const MsgCancelCreateObjectTypeUrl = '/greenfield.storage.MsgCancelCreateObject';\nexport const MsgMigrateBucketTypeUrl = '/greenfield.storage.MsgMigrateBucket';\nexport const MsgCancelMigrateBucketTypeUrl = '/greenfield.storage.MsgCancelMigrateBucket';\nexport const MsgCreateBucketTypeUrl = '/greenfield.storage.MsgCreateBucket';\nexport const MsgCreateGroupTypeUrl = '/greenfield.storage.MsgCreateGroup';\nexport const MsgCreateObjectTypeUrl = '/greenfield.storage.MsgCreateObject';\nexport const MsgDeleteBucketTypeUrl = '/greenfield.storage.MsgDeleteBucket';\nexport const MsgDeleteGroupTypeUrl = '/greenfield.storage.MsgDeleteGroup';\nexport const MsgDeleteObjectTypeUrl = '/greenfield.storage.MsgDeleteObject';\nexport const MsgDeletePolicyTypeUrl = '/greenfield.storage.MsgDeletePolicy';\nexport const MsgSetTagTypeUrl = '/greenfield.storage.MsgSetTag';\nexport const MsgToggleSPAsDelegatedAgentTypeUrl = '/greenfield.storage.MsgToggleSPAsDelegatedAgent';\nexport const MsgLeaveGroupTypeUrl = '/greenfield.storage.MsgLeaveGroup';\nexport const MsgMirrorBucketTypeUrl = '/greenfield.storage.MsgMirrorBucket';\nexport const MsgMirrorGroupTypeUrl = '/greenfield.storage.MsgMirrorGroup';\nexport const MsgMirrorObjectTypeUrl = '/greenfield.storage.MsgMirrorObject';\nexport const MsgPutPolicyTypeUrl = '/greenfield.storage.MsgPutPolicy';\nexport const MsgUpdateBucketInfoTypeUrl = '/greenfield.storage.MsgUpdateBucketInfo';\nexport const MsgUpdateGroupExtraTypeUrl = '/greenfield.storage.MsgUpdateGroupExtra';\nexport const MsgUpdateGroupMemberTypeUrl = '/greenfield.storage.MsgUpdateGroupMember';\nexport const MsgUpdateObjectInfoTypeUrl = '/greenfield.storage.MsgUpdateObjectInfo';\nexport const BasicAllowanceTypeUrl = '/cosmos.feegrant.v1beta1.BasicAllowance';\nexport const AllowedMsgAllowanceTypeUrl = '/cosmos.feegrant.v1beta1.AllowedMsgAllowance';\nexport const MsgEditValidatorTypeUrl = '/cosmos.staking.v1beta1.MsgEditValidator';\nexport const MsgCreateValidatorTypeUrl = '/cosmos.staking.v1beta1.MsgCreateValidator';\nexport const MsgVoteTypeUrl = '/cosmos.gov.v1.MsgVote';\nexport const MsgSetBucketFlowRateLimitTypeUrl = '/greenfield.storage.MsgSetBucketFlowRateLimit';\nexport const MsgSubmitProposalTypeUrl = '/cosmos.gov.v1.MsgSubmitProposal';\nexport const MsgWithdrawDelegatorRewardTypeUrl =\n  '/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward';\nexport const MsgSetWithdrawAddressTypeUrl = '/cosmos.distribution.v1beta1.MsgSetWithdrawAddress';\nexport const MsgWithdrawValidatorCommissionTypeUrl =\n  '/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission';\nexport const MsgFundCommunityPoolTypeUrl = '/cosmos.distribution.v1beta1.MsgFundCommunityPool';\nexport const MsgSettleTypeUrl = '/greenfield.virtualgroup.MsgSettle';\n","export const EMPTY_STRING_SHA256 =\n  'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const NORMAL_ERROR_CODE = 404;\nexport const METHOD_GET = 'GET';\nexport const METHOD_POST = 'POST';\nexport const METHOD_PUT = 'PUT';\n\n// SPECIAL ERROR CODE\nexport const SP_NOT_AVAILABLE_ERROR_CODE = 429;\n\n// SPECIAL ERROR MESSAGE\nexport const SP_NOT_AVAILABLE_ERROR_MSG = 'SP not available';\n","export * from './typeUrl';\nexport * from './http';\n\nexport const ZERO_PUBKEY = '0x000000000000000000000000000000000000000000000000000000000000000000';\nexport const DEFAULT_DENOM = 'BNB';\n\n// 32 MB\nexport const DEFAULT_PART_SIZE = 1024 * 1024 * 32;\n","import { Account } from '@/api/account';\nimport { getPubKeyByPriKey } from '@/keymanage';\nimport { defaultSignTypedData } from '@/sign/signTx';\nimport { getGasFeeBySimulate } from '@/utils/units';\nimport { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';\nimport { Coin } from '@bnb-chain/greenfield-cosmos-types/cosmos/base/v1beta1/coin';\nimport {\n  ServiceClientImpl,\n  SimulateRequest,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/tx/v1beta1/service';\nimport {\n  AuthInfo,\n  Tx,\n  TxBody,\n  TxRaw,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/tx/v1beta1/tx';\nimport { makeAuthInfoBytes } from '@cosmjs/proto-signing';\nimport { DeliverTxResponse, StargateClient } from '@cosmjs/stargate';\nimport { Tendermint37Client } from '@cosmjs/tendermint-rpc';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport { signTypedData, SignTypedDataVersion } from '@metamask/eth-sig-util';\nimport { container, inject, injectable } from 'tsyringe';\nimport {\n  assertPrivateKey,\n  BroadcastOptions,\n  CustomTx,\n  ISimulateGasFee,\n  MetaTxInfo,\n  SignOptions,\n  SimulateOptions,\n  TxResponse,\n} from '..';\nimport { RpcQueryClient } from './queryclient';\nimport { DEFAULT_DENOM, ZERO_PUBKEY } from '../constants';\nimport {\n  createEIP712,\n  generateFee,\n  generateMessage,\n  generateTypes,\n  mergeMultiEip712,\n  mergeMultiMessage,\n} from '../messages';\nimport { convertAnyTypeData, findAnyType, generateMsg } from '../messages/utils';\nimport { eip712Hash, makeCosmsPubKey, recoverPk } from '../sign';\n\nexport interface ITxClient {\n  /**\n   * simulates a transaction containing the provided messages on the chain.\n    The function returns a pointer to a ISimulateGasFee\n   */\n  simulateRawTx(\n    txBodyBytes: Uint8Array,\n    accountInfo: BaseAccount,\n    txOption: SimulateOptions,\n  ): Promise<ISimulateGasFee>;\n\n  /**\n   * broadcasts a transaction containing the provided messages to the chain.\n    The function returns a pointer to a BroadcastTxResponse and any error that occurred during the operation.\n   */\n  broadcastRawTx(txRawBytes: Uint8Array): Promise<DeliverTxResponse>;\n\n  tx(\n    typeUrl: MetaTxInfo['typeUrl'],\n    address: MetaTxInfo['address'],\n    MsgSDKTypeEIP712: MetaTxInfo['MsgSDKTypeEIP712'],\n    MsgSDK: MetaTxInfo['MsgSDK'],\n    msgBytes: MetaTxInfo['msgBytes'],\n  ): Promise<TxResponse>;\n\n  txRaw({\n    address,\n    txRawHex,\n    eip712MsgType,\n    msgData,\n  }: CustomTx): Promise<Omit<TxResponse, 'metaTxInfo'>>;\n\n  /**\n   *\n   */\n  multiTx(txResList: Pick<TxResponse, 'metaTxInfo'>[]): Promise<Omit<TxResponse, 'metaTxInfo'>>;\n}\n\n@injectable()\nexport class TxClient implements ITxClient {\n  public rpcUrl: string;\n  public chainId: string;\n  constructor(@inject('RPC_URL') rpcUrl: string, @inject('CHAIN_ID') chainId: string) {\n    this.rpcUrl = rpcUrl;\n    this.chainId = chainId;\n  }\n\n  private account: Account = container.resolve(Account);\n  private rpcQueryClient = container.resolve(RpcQueryClient);\n\n  public async tx(\n    typeUrl: MetaTxInfo['typeUrl'],\n    address: MetaTxInfo['address'],\n    MsgSDKTypeEIP712: MetaTxInfo['MsgSDKTypeEIP712'],\n    MsgSDK: MetaTxInfo['MsgSDK'],\n    msgBytes: MetaTxInfo['msgBytes'],\n  ) {\n    const txBodyBytes = this.getBodyBytes([\n      {\n        typeUrl,\n        msgBytes,\n      },\n    ]);\n\n    const tx = await this.multiTx([\n      {\n        metaTxInfo: {\n          typeUrl,\n          address,\n          MsgSDKTypeEIP712,\n          MsgSDK,\n          msgBytes,\n          bodyBytes: txBodyBytes,\n        },\n      },\n    ]);\n\n    return {\n      simulate: tx.simulate,\n      broadcast: tx.broadcast,\n      metaTxInfo: {\n        typeUrl,\n        address,\n        MsgSDKTypeEIP712,\n        MsgSDK,\n        msgBytes,\n        bodyBytes: txBodyBytes,\n      },\n    };\n  }\n\n  public async txRaw({\n    address,\n    txRawHex,\n    eip712MsgType,\n    msgData,\n  }: CustomTx): Promise<Omit<TxResponse, 'metaTxInfo'>> {\n    const accountInfo = await this.account.getAccount(address);\n    const txRawBytes = arrayify(txRawHex);\n    const txRawData = TxRaw.decode(txRawBytes);\n\n    return {\n      simulate: async (opts: SimulateOptions) => {\n        return await this.simulateRawTx(txRawData.bodyBytes, accountInfo, opts);\n      },\n      broadcast: async (opts: BroadcastOptions) => {\n        const {\n          denom,\n          gasLimit,\n          gasPrice,\n          payer,\n          granter,\n          privateKey,\n          signTypedDataCallback = defaultSignTypedData,\n        } = opts;\n\n        const fee = generateFee(\n          String(BigInt(gasLimit) * BigInt(gasPrice)),\n          denom,\n          String(gasLimit),\n          payer,\n          granter,\n        );\n        // console.log('eip712MsgType', eip712MsgType);\n        const wrapperTypes = generateTypes(eip712MsgType);\n\n        // find type any and convert\n        const anyFields = findAnyType(msgData);\n        // console.log('anyFields', anyFields);\n        const convertedMsg = convertAnyTypeData(msgData, anyFields);\n\n        const messages = generateMessage(\n          accountInfo.accountNumber.toString(),\n          accountInfo.sequence.toString(),\n          this.chainId,\n          '',\n          fee,\n          convertedMsg,\n          '0',\n        );\n\n        const eip712 = createEIP712(wrapperTypes, this.chainId, messages);\n        // console.log('eip712', eip712);\n        const { pubKey, signature } = privateKey\n          ? this.getSignByPriKey(eip712, privateKey)\n          : await this.getSignByWallet(eip712, accountInfo.address, signTypedDataCallback);\n\n        const authInfoBytes = this.getAuthInfoBytes({\n          denom,\n          sequence: accountInfo.sequence + '',\n          gasLimit,\n          gasPrice,\n          pubKey,\n          granter,\n          payer,\n        });\n\n        const txRaw = TxRaw.fromPartial({\n          bodyBytes: txRawData.bodyBytes,\n          authInfoBytes,\n          signatures: [arrayify(signature)],\n        });\n        const txBytes = TxRaw.encode(txRaw).finish();\n\n        // console.log('txBytes', hexlify(txBytes));\n        return await this.broadcastRawTx(txBytes);\n      },\n    };\n  }\n\n  private getBodyBytes(params: { typeUrl: string; msgBytes: Uint8Array }[]) {\n    const multiMsgBytes = params.map((tx) => {\n      return generateMsg(tx.typeUrl, tx.msgBytes);\n    });\n\n    const txBody = TxBody.fromPartial({\n      messages: multiMsgBytes,\n    });\n    const txBodyBytes = TxBody.encode(txBody).finish();\n    return txBodyBytes;\n  }\n\n  private getSignByPriKey(\n    eip712: ReturnType<typeof createEIP712>,\n    privateKey: SignOptions['privateKey'],\n  ) {\n    assertPrivateKey(privateKey);\n\n    const pubKey = getPubKeyByPriKey(privateKey);\n    const signature = signTypedData({\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      data: eip712,\n      version: SignTypedDataVersion.V4,\n      privateKey: Buffer.from(arrayify(privateKey)),\n    });\n\n    return {\n      pubKey,\n      signature,\n    };\n  }\n\n  private async getSignByWallet(\n    eip712: ReturnType<typeof createEIP712>,\n    address: string,\n    signTypedDataCallback: SignOptions['signTypedDataCallback'],\n  ) {\n    const signature = await signTypedDataCallback(address, JSON.stringify(eip712));\n    const messageHash = eip712Hash(JSON.stringify(eip712));\n    // console.log('eip712 hash', hexlify(messageHash));\n\n    const pk = recoverPk({\n      signature,\n      messageHash,\n    });\n    const pubKey = makeCosmsPubKey(pk);\n\n    return {\n      pubKey,\n      signature,\n    };\n  }\n\n  private getAuthInfoBytes(\n    params: Pick<BroadcastOptions, 'denom' | 'gasLimit' | 'gasPrice' | 'granter' | 'payer'> & {\n      pubKey: BaseAccount['pubKey'];\n      sequence: string;\n    },\n  ) {\n    const { pubKey, denom = DEFAULT_DENOM, sequence, gasLimit, gasPrice, granter, payer } = params;\n    if (!pubKey) throw new Error('pubKey is required');\n\n    const feeAmount: Coin[] = [\n      {\n        denom,\n        amount: String(BigInt(gasLimit) * BigInt(gasPrice)),\n      },\n    ];\n\n    const authInfoBytes = makeAuthInfoBytes(\n      [{ pubkey: pubKey, sequence: Number(sequence) }],\n      feeAmount,\n      gasLimit,\n      granter,\n      payer,\n      // @ts-ignore\n      712,\n    );\n\n    return authInfoBytes;\n  }\n\n  public async simulateRawTx(\n    txBodyBytes: Uint8Array,\n    accountInfo: BaseAccount,\n    options: SimulateOptions,\n  ) {\n    const rpcClient = await this.rpcQueryClient.getRpcClient();\n    const rpc = new ServiceClientImpl(rpcClient);\n\n    const { denom } = options;\n    const authInfoBytes = this.getAuthInfoBytes({\n      sequence: accountInfo.sequence + '',\n      denom,\n      gasLimit: 0,\n      gasPrice: '0',\n      pubKey: makeCosmsPubKey(ZERO_PUBKEY),\n      granter: '',\n      payer: '',\n    });\n    const tx = Tx.fromPartial({\n      authInfo: AuthInfo.decode(authInfoBytes),\n      body: TxBody.decode(txBodyBytes),\n      signatures: [Uint8Array.from([])],\n    });\n\n    const request = SimulateRequest.fromPartial({\n      txBytes: Tx.encode(tx).finish(),\n    });\n\n    const res = await rpc.Simulate(request);\n    return getGasFeeBySimulate(res, denom);\n  }\n\n  public async broadcastRawTx(txRawBytes: Uint8Array) {\n    const tmClient = await Tendermint37Client.connect(this.rpcUrl);\n\n    const client = await StargateClient.create(tmClient);\n    return await client.broadcastTx(txRawBytes);\n  }\n\n  public async multiTx(txResList: Pick<TxResponse, 'metaTxInfo'>[]) {\n    const txs = txResList.map((txRes) => txRes.metaTxInfo);\n    const accountInfo = await this.account.getAccount(txs[0].address);\n    const txBodyBytes = this.getBodyBytes(txs);\n\n    return {\n      simulate: async (opts: SimulateOptions) => {\n        return await this.simulateRawTx(txBodyBytes, accountInfo, opts);\n      },\n      broadcast: async (opts: BroadcastOptions) => {\n        const {\n          denom,\n          gasLimit,\n          gasPrice,\n          payer,\n          granter,\n          privateKey,\n          signTypedDataCallback = defaultSignTypedData,\n        } = opts;\n\n        const types = mergeMultiEip712(txs.map((tx) => tx.MsgSDKTypeEIP712));\n        const fee = generateFee(\n          String(BigInt(gasLimit) * BigInt(gasPrice)),\n          denom,\n          String(gasLimit),\n          payer,\n          granter,\n        );\n        const wrapperTypes = generateTypes(types);\n        const multiMessages = mergeMultiMessage(txs);\n        const messages = generateMessage(\n          accountInfo.accountNumber.toString(),\n          accountInfo.sequence.toString(),\n          this.chainId,\n          '',\n          fee,\n          multiMessages,\n          '0',\n        );\n\n        const eip712 = createEIP712(wrapperTypes, this.chainId, messages);\n        // console.log('eip712', eip712);\n\n        const { pubKey, signature } = privateKey\n          ? this.getSignByPriKey(eip712, privateKey)\n          : await this.getSignByWallet(eip712, accountInfo.address, signTypedDataCallback);\n\n        const authInfoBytes = this.getAuthInfoBytes({\n          denom,\n          sequence: accountInfo.sequence + '',\n          gasLimit,\n          gasPrice,\n          pubKey,\n          granter,\n          payer,\n        });\n\n        const txRaw = TxRaw.fromPartial({\n          bodyBytes: txBodyBytes,\n          authInfoBytes,\n          signatures: [arrayify(signature)],\n        });\n        const txBytes = TxRaw.encode(txRaw).finish();\n\n        // console.log('txBytes', hexlify(txBytes));\n        return await this.broadcastRawTx(txBytes);\n      },\n    };\n  }\n}\n","export const MsgMultiSendSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'inputs',\n      type: 'TypeMsg1Inputs[]',\n    },\n    {\n      name: 'outputs',\n      type: 'TypeMsg1Outputs[]',\n    },\n  ],\n  TypeMsg1Inputs: [\n    {\n      name: 'address',\n      type: 'string',\n    },\n    {\n      name: 'coins',\n      type: 'TypeMsg1InputsCoins[]',\n    },\n  ],\n  TypeMsg1InputsCoins: [\n    {\n      name: 'denom',\n      type: 'string',\n    },\n    {\n      name: 'amount',\n      type: 'string',\n    },\n  ],\n  TypeMsg1Outputs: [\n    {\n      name: 'address',\n      type: 'string',\n    },\n    {\n      name: 'coins',\n      type: 'TypeMsg1OutputsCoins[]',\n    },\n  ],\n  TypeMsg1OutputsCoins: [\n    {\n      name: 'denom',\n      type: 'string',\n    },\n    {\n      name: 'amount',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgSendSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'from_address',\n      type: 'string',\n    },\n    {\n      name: 'to_address',\n      type: 'string',\n    },\n    {\n      name: 'amount',\n      type: 'TypeMsg1Amount[]',\n    },\n  ],\n  TypeMsg1Amount: [\n    {\n      name: 'denom',\n      type: 'string',\n    },\n    {\n      name: 'amount',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgCreatePaymentAccountSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'creator',\n      type: 'string',\n    },\n  ],\n};\n","import { TxClient } from '../clients/txClient';\nimport { MsgMultiSendSDKTypeEIP712 } from '../messages/bank/MsgMultiSend';\nimport { MsgSendSDKTypeEIP712 } from '../messages/bank/MsgSend';\nimport { MsgCreatePaymentAccountSDKTypeEIP712 } from '../messages/greenfield/payment/MsgCreatePaymentAccount';\nimport { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';\nimport {\n  QueryModuleAccountByNameResponse,\n  QueryModuleAccountsResponse,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/query';\nimport {\n  QueryBalanceRequest,\n  QueryBalanceResponse,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/query';\nimport { MsgMultiSend, MsgSend } from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/tx';\nimport { QueryPaymentAccountsByOwnerResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';\nimport { MsgCreatePaymentAccount } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport {\n  MsgCreatePaymentAccountTypeUrl,\n  MsgMultiSendTypeUrl,\n  MsgSendTypeUrl,\n  TxResponse,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\n\nexport interface IAccount {\n  /**\n   * retrieves account information for a given address.\n   */\n  getAccount(address: string): Promise<BaseAccount>;\n\n  /**\n   * retrieves balance information of an account for a given address.\n   */\n  getAccountBalance(request: QueryBalanceRequest): Promise<QueryBalanceResponse>;\n\n  /**\n   * Get all module accounts.\n   */\n  getModuleAccounts(): Promise<QueryModuleAccountsResponse>;\n\n  /**\n   * Get module account by module name.\n   */\n  getModuleAccountByName(name: string): Promise<QueryModuleAccountByNameResponse>;\n\n  /**\n   * Get all payment accounts owned by the given owner address.\n   */\n  getPaymentAccountsByOwner(owner: string): Promise<QueryPaymentAccountsByOwnerResponse>;\n\n  /**\n   * Create a new payment account for the given address.\n   */\n  createPaymentAccount(msg: MsgCreatePaymentAccount): Promise<TxResponse>;\n\n  /**\n   * Transfer function\n   */\n  transfer(msg: MsgSend): Promise<TxResponse>;\n\n  /**\n   * makes transfers from an account to multiple accounts with respect amounts\n   */\n  multiTransfer(address: string, msg: MsgMultiSend): Promise<TxResponse>;\n}\n\n@injectable()\nexport class Account implements IAccount {\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n\n  private queryClient = container.resolve(RpcQueryClient);\n\n  public async multiTransfer(address: string, msg: MsgMultiSend) {\n    return await this.txClient.tx(\n      MsgMultiSendTypeUrl,\n      address,\n      MsgMultiSendSDKTypeEIP712,\n      MsgMultiSend.toSDK(msg),\n      MsgMultiSend.encode(msg).finish(),\n    );\n  }\n\n  public async createPaymentAccount(msg: MsgCreatePaymentAccount) {\n    return await this.txClient.tx(\n      MsgCreatePaymentAccountTypeUrl,\n      msg.creator,\n      MsgCreatePaymentAccountSDKTypeEIP712,\n      MsgCreatePaymentAccount.toSDK(msg),\n      MsgCreatePaymentAccount.encode(msg).finish(),\n    );\n  }\n\n  public async getPaymentAccountsByOwner(owner: string) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.PaymentAccountsByOwner({\n      owner,\n    });\n  }\n\n  public async getModuleAccountByName(name: string) {\n    const rpc = await this.queryClient.getAuthQueryClient();\n    return rpc.ModuleAccountByName({\n      name,\n    });\n  }\n\n  public async getModuleAccounts() {\n    const rpc = await this.queryClient.getAuthQueryClient();\n    return await rpc.ModuleAccounts();\n  }\n\n  public async getAccountBalance(request: QueryBalanceRequest): Promise<QueryBalanceResponse> {\n    const rpc = await this.queryClient.getBankQueryClient();\n    return await rpc.Balance(request);\n  }\n\n  public async getAccount(address: string): Promise<BaseAccount> {\n    const client = await this.queryClient.getQueryClient();\n    const account = await client.auth.account(address);\n    if (!account) return BaseAccount.fromJSON({});\n\n    return BaseAccount.toJSON(BaseAccount.decode(account.value)) as BaseAccount;\n  }\n\n  public async transfer(msg: MsgSend) {\n    return await this.txClient.tx(\n      MsgSendTypeUrl,\n      msg.fromAddress,\n      MsgSendSDKTypeEIP712,\n      MsgSend.toSDK(msg),\n      MsgSend.encode(msg).finish(),\n    );\n  }\n}\n","import {\n  GetBlockByHeightResponse,\n  GetLatestBlockResponse,\n  GetLatestValidatorSetRequest,\n  GetNodeInfoResponse,\n  ServiceClientImpl as tdServiceClientImpl,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/base/tendermint/v1beta1/query';\nimport Long from 'long';\nimport { container, injectable } from 'tsyringe';\nimport { RpcQueryClient } from '../clients/queryclient';\n\nexport interface IBasic {\n  /**\n   * returns the current node info of the greenfield that the client is connected to.\n   */\n  getNodeInfo(): Promise<GetNodeInfoResponse>;\n\n  /**\n   * retrieves the latest block from the chain.\n   */\n  getLatestBlock(): Promise<GetLatestBlockResponse>;\n\n  /**\n   * retrieves the height of the latest block from the chain.\n   * returns the block height and any error that occurred during the operation.\n   */\n  getLatestBlockHeight(): Promise<number>;\n\n  /**\n   * retrieves the syncing status of the node. If true, means the node is catching up the latest block.\n   * The function returns a boolean indicating whether the node is syncing and any error that occurred during the operation.\n   */\n  getSyncing(): Promise<boolean>;\n\n  /**\n   * GetBlockByHeight retrieves the block at the given height from the chain.\n   * The function returns a pointer to a Block object and any error that occurred during the operation.\n   */\n  getBlockByHeight(height: number): Promise<GetBlockByHeightResponse>;\n\n  /**\n   * retrieves the latest validator set from the chain.\n   * The function returns the block height of the validator set\n   */\n  GetLatestValidatorSet(request: GetLatestValidatorSetRequest): Promise<number>;\n}\n\n@injectable()\nexport class Basic implements IBasic {\n  private rpcQueryClient = container.resolve(RpcQueryClient);\n\n  public async getNodeInfo() {\n    const rpcClient = await this.rpcQueryClient.getRpcClient();\n    const rpc = new tdServiceClientImpl(rpcClient);\n    return await rpc.GetNodeInfo();\n  }\n\n  public async getLatestBlock(): Promise<GetLatestBlockResponse> {\n    const rpcClient = await this.rpcQueryClient.getRpcClient();\n    const rpc = new tdServiceClientImpl(rpcClient);\n    return await rpc.GetLatestBlock();\n  }\n\n  public async getLatestBlockHeight(): Promise<number> {\n    const latestBlock = await this.getLatestBlock();\n    const height = latestBlock.sdkBlock?.header?.height;\n    if (!height) return 0;\n    return height.toNumber();\n  }\n\n  public async getSyncing(): Promise<boolean> {\n    const rpcClient = await this.rpcQueryClient.getRpcClient();\n    const rpc = new tdServiceClientImpl(rpcClient);\n    const syncing = await rpc.GetSyncing();\n    return syncing.syncing;\n  }\n\n  public async getBlockByHeight(height: number): Promise<GetBlockByHeightResponse> {\n    const rpcClient = await this.rpcQueryClient.getRpcClient();\n    const rpc = new tdServiceClientImpl(rpcClient);\n    return await rpc.GetBlockByHeight({\n      height: Long.fromInt(height),\n    });\n  }\n\n  public async GetLatestValidatorSet(request: GetLatestValidatorSetRequest): Promise<number> {\n    const rpcClient = await this.rpcQueryClient.getRpcClient();\n    const rpc = new tdServiceClientImpl(rpcClient);\n    const validatorSet = await rpc.GetLatestValidatorSet(request);\n    return validatorSet.blockHeight.toNumber();\n  }\n}\n","export const MsgTransferOutSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'from',\n      type: 'string',\n    },\n    {\n      name: 'to',\n      type: 'string',\n    },\n    {\n      name: 'amount',\n      type: 'TypeMsg1Amount',\n    },\n  ],\n  TypeMsg1Amount: [\n    {\n      name: 'denom',\n      type: 'string',\n    },\n    {\n      name: 'amount',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgAttestSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'submitter',\n      type: 'string',\n    },\n    {\n      name: 'challenge_id',\n      type: 'uint64',\n    },\n    {\n      name: 'object_id',\n      type: 'string',\n    },\n    {\n      name: 'sp_operator_address',\n      type: 'string',\n    },\n    {\n      name: 'vote_result',\n      type: 'string',\n    },\n    {\n      name: 'challenger_address',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgSubmitSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'challenger',\n      type: 'string',\n    },\n    {\n      name: 'sp_operator_address',\n      type: 'string',\n    },\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'object_name',\n      type: 'string',\n    },\n    {\n      name: 'segment_index',\n      type: 'uint32',\n    },\n    {\n      name: 'random_index',\n      type: 'bool',\n    },\n  ],\n};\n","export const MsgDepositSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'creator',\n      type: 'string',\n    },\n    {\n      name: 'to',\n      type: 'string',\n    },\n    {\n      name: 'amount',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgDisableRefundSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'owner',\n      type: 'string',\n    },\n    {\n      name: 'addr',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgWithdrawSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'creator',\n      type: 'string',\n    },\n    {\n      name: 'from',\n      type: 'string',\n    },\n    {\n      name: 'amount',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgCancelCreateObjectSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'object_name',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgCreateBucketSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'charged_read_quota',\n      type: 'uint64',\n    },\n    {\n      name: 'creator',\n      type: 'string',\n    },\n    {\n      name: 'payment_address',\n      type: 'string',\n    },\n    {\n      name: 'primary_sp_address',\n      type: 'string',\n    },\n    {\n      name: 'primary_sp_approval',\n      type: 'TypeMsg1PrimarySpApproval',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'visibility',\n      type: 'string',\n    },\n  ],\n  TypeMsg1PrimarySpApproval: [\n    {\n      name: 'expired_height',\n      type: 'uint64',\n    },\n    {\n      name: 'global_virtual_group_family_id',\n      type: 'uint32',\n    },\n    // {\n    //   name: 'sig',\n    //   type: 'bytes',\n    // },\n  ],\n};\n","export const MsgCreateGroupSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'creator',\n      type: 'string',\n    },\n    {\n      name: 'extra',\n      type: 'string',\n    },\n    {\n      name: 'group_name',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgCreateObjectSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'content_type',\n      type: 'string',\n    },\n    {\n      name: 'creator',\n      type: 'string',\n    },\n    {\n      name: 'expect_checksums',\n      type: 'bytes[]',\n    },\n    {\n      name: 'object_name',\n      type: 'string',\n    },\n    {\n      name: 'payload_size',\n      type: 'uint64',\n    },\n    {\n      name: 'primary_sp_approval',\n      type: 'TypeMsg1PrimarySpApproval',\n    },\n    {\n      name: 'redundancy_type',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'visibility',\n      type: 'string',\n    },\n  ],\n  TypeMsg1PrimarySpApproval: [\n    {\n      name: 'expired_height',\n      type: 'uint64',\n    },\n    {\n      name: 'global_virtual_group_family_id',\n      type: 'uint32',\n    },\n    // {\n    //   name: 'sig',\n    //   type: 'bytes',\n    // },\n  ],\n};\n","export const MsgDeleteBucketSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgDeleteGroupSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'group_name',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgDeleteObjectSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'object_name',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgDeletePolicySDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'resource',\n      type: 'string',\n    },\n    {\n      name: 'principal',\n      type: 'TypeMsg1Principal',\n    },\n  ],\n  TypeMsg1Principal: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'value',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgLeaveGroupSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'member',\n      type: 'string',\n    },\n    {\n      name: 'group_owner',\n      type: 'string',\n    },\n    {\n      name: 'group_name',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgMigrateBucketSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'dst_primary_sp_approval',\n      type: 'TypeMsg1DstPrimarySpApproval',\n    },\n    {\n      name: 'dst_primary_sp_id',\n      type: 'uint32',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n  TypeMsg1DstPrimarySpApproval: [\n    {\n      name: 'expired_height',\n      type: 'uint64',\n    },\n    {\n      name: 'global_virtual_group_family_id',\n      type: 'uint32',\n    },\n    {\n      name: 'sig',\n      type: 'bytes',\n    },\n  ],\n};\n","export const MsgMirrorBucketSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'id',\n      type: 'string',\n    },\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgMirrorGroupSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'dest_chain_id',\n      type: 'uint32',\n    },\n    {\n      name: 'group_name',\n      type: 'string',\n    },\n    {\n      name: 'id',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgMirrorObjectSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'id',\n      type: 'string',\n    },\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'object_name',\n      type: 'string',\n    },\n  ],\n};\n","import type { EIP712Msg } from '@/messages/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nexport const getMsgPutPolicySDKTypeEIP712 = (resource: string[]) => {\n  const res: EIP712Msg = cloneDeep(MsgPutPolicySDKTypeEIP712);\n\n  if (resource.length !== 0) {\n    res.TypeMsg1Statements.push({\n      name: 'resources',\n      type: 'string[]',\n    });\n  }\n\n  return res;\n};\n\nconst MsgPutPolicySDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'principal',\n      type: 'TypeMsg1Principal',\n    },\n    {\n      name: 'resource',\n      type: 'string',\n    },\n    {\n      name: 'statements',\n      type: 'TypeMsg1Statements[]',\n    },\n    {\n      name: 'expiration_time',\n      type: 'string',\n    },\n  ],\n  TypeMsg1Principal: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'value',\n      type: 'string',\n    },\n  ],\n  TypeMsg1Statements: [\n    {\n      name: 'actions',\n      type: 'string[]',\n    },\n    {\n      name: 'effect',\n      type: 'string',\n    },\n    {\n      name: 'expiration_time',\n      type: 'string',\n    },\n    // {\n    //   name: 'resources',\n    //   type: 'string[]',\n    // },\n  ],\n};\n","import type { EIP712Msg } from '@/messages/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nexport const getMsgSetTagSDKTypeEIP712 = (isTagsEmpty: boolean) => {\n  const res: EIP712Msg = cloneDeep(MsgSetTagSDKTypeEIP712);\n\n  if (!isTagsEmpty) {\n    res.Msg1.push({\n      name: 'tags',\n      type: 'TypeMsg1Tags',\n    });\n\n    res.TypeMsg1Tags = [\n      {\n        name: 'tags',\n        type: 'TypeMsg1TagsTags[]',\n      },\n    ];\n    res.TypeMsg1TagsTags = [\n      {\n        name: 'key',\n        type: 'string',\n      },\n      {\n        name: 'value',\n        type: 'string',\n      },\n    ];\n  } else {\n    res.Msg1.push({\n      name: 'tags',\n      type: 'TypeMsg1Tags',\n    });\n\n    res.TypeMsg1Tags = [\n      {\n        name: 'tags',\n        type: 'string[]',\n      },\n    ];\n  }\n\n  return res;\n};\n\nconst MsgSetTagSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'resource',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgToggleSPAsDelegatedAgentSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgUpdateBucketInfoSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'charged_read_quota',\n      type: 'TypeMsg1ChargedReadQuota',\n    },\n    {\n      name: 'payment_address',\n      type: 'string',\n    },\n    {\n      name: 'visibility',\n      type: 'string',\n    },\n  ],\n  TypeMsg1ChargedReadQuota: [\n    {\n      name: 'value',\n      type: 'uint64',\n    },\n  ],\n};\n","export const MsgUpdateGroupExtraSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'group_owner',\n      type: 'string',\n    },\n    {\n      name: 'group_name',\n      type: 'string',\n    },\n    {\n      name: 'extra',\n      type: 'string',\n    },\n  ],\n};\n","import type { EIP712Msg } from '@/messages/utils';\nimport { MsgGroupMember } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';\nimport cloneDeep from 'lodash.clonedeep';\n\nexport const getMsgUpdateGroupMemberSDKTypeEIP712 = ({\n  membersToAdd,\n  membersToDelete,\n}: {\n  membersToAdd: MsgGroupMember[];\n  membersToDelete: string[];\n}) => {\n  const res: EIP712Msg = cloneDeep(MsgUpdateGroupMemberSDKTypeEIP712);\n\n  if (membersToAdd.length > 0) {\n    res.Msg1.push({\n      name: 'members_to_add',\n      type: 'TypeMsg1MembersToAdd[]',\n    });\n    res.TypeMsg1MembersToAdd = [\n      {\n        name: 'expiration_time',\n        type: 'string',\n      },\n      {\n        name: 'member',\n        type: 'string',\n      },\n    ];\n  }\n\n  if (membersToDelete.length > 0) {\n    res.Msg1.push({\n      name: 'members_to_delete',\n      type: 'string[]',\n    });\n  }\n\n  return res;\n};\n\nconst MsgUpdateGroupMemberSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'group_name',\n      type: 'string',\n    },\n    {\n      name: 'group_owner',\n      type: 'string',\n    },\n    // {\n    //   name: 'members_to_add',\n    //   type: 'TypeMsg1MembersToAdd[]',\n    // },\n    // {\n    //   name: 'members_to_delete',\n    //   type: 'string[]',\n    // },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n  // TypeMsg1MembersToAdd: [\n  //   {\n  //     name: 'expiration_time',\n  //     type: 'string',\n  //   },\n  //   {\n  //     name: 'member',\n  //     type: 'string',\n  //   },\n  // ],\n};\n","export const MsgUpdateObjectInfoSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'object_name',\n      type: 'string',\n    },\n    {\n      name: 'visibility',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgSetBucketFlowRateLimitSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'bucket_owner',\n      type: 'string',\n    },\n    {\n      name: 'flow_rate_limit',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'payment_address',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n};\n","import { NodeFile, UploadFile } from '@/types/sp/Common';\nimport { AuthType } from '../..';\n\nexport const assertStringRequire = (s: string, errMsg: string) => {\n  if (!s) throw new Error(errMsg);\n};\n\nexport const assertPrivateKey = (privateKey: string) => {\n  if (!privateKey.startsWith('0x')) throw new Error('private key should start with 0x');\n};\n\nexport const assertAuthType = (authType: AuthType) => {\n  if (!authType) throw new Error('authType is required');\n\n  if (authType.type === 'ECDSA') {\n    assertPrivateKey(authType.privateKey);\n  }\n\n  if (authType.type === 'EDDSA') {\n    assertStringRequire(authType.address, 'address param is required');\n    assertStringRequire(authType.seed, 'seed param is required');\n    assertStringRequire(authType.domain, 'domain param is required');\n  }\n};\n\nexport function assertFileType(file: UploadFile): file is NodeFile {\n  if ('content' in file) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function assertHttpMethod(method?: string): asserts method is 'GET' | 'POST' | 'PUT' {\n  if (method !== 'GET' && method !== 'POST' && method !== 'PUT')\n    throw new Error('method should be GET, POST or PUT');\n}\n","import { AuthType, ReqMeta } from '@/types/auth';\nimport { hexlify, joinSignature } from '@ethersproject/bytes';\nimport { SigningKey } from '@ethersproject/signing-key';\nimport { toUtf8Bytes } from '@ethersproject/strings';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { Headers } from 'cross-fetch';\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { utf8ToBytes } from 'ethereum-cryptography/utils.js';\n\nexport const getCanonicalHeaders = (reqMeta: Partial<ReqMeta>, reqHeaders: Headers) => {\n  const sortedHeaders = getSortedHeaders(reqHeaders, SUPPORTED_HEADERS);\n\n  const res: string[] = [];\n  sortedHeaders.forEach((k) => {\n    const v = reqHeaders.get(k);\n    res.push(`${k}:${v}`);\n  });\n\n  if (reqMeta.url && reqMeta.url.hostname) {\n    res.push(reqMeta.url.hostname);\n  }\n\n  res.push('');\n  return res.join('\\n');\n};\n\nconst getSortedHeaders = (reqHeaders: Headers, supportHeaders: string[]) => {\n  const signedHeaders: string[] = [];\n\n  reqHeaders.forEach((v, k) => {\n    if (supportHeaders.includes(k)) {\n      signedHeaders.push(k);\n    }\n  });\n\n  return signedHeaders.sort();\n};\n\nconst getSignedHeaders = (reqHeaders: Headers) => {\n  const sortedHeaders = getSortedHeaders(reqHeaders, SUPPORTED_HEADERS);\n\n  return sortedHeaders.join(';');\n};\n\nexport const getCanonicalRequest = (reqMeta: Partial<ReqMeta>, reqHeaders: Headers) => {\n  const canonicalHeaders = getCanonicalHeaders(reqMeta, reqHeaders);\n  const signedHeaders = getSignedHeaders(reqHeaders);\n  const canonicalRequestArr = [\n    reqMeta.method,\n    reqMeta.url?.path,\n    reqMeta.url?.query,\n    canonicalHeaders,\n    signedHeaders,\n  ];\n\n  const canonicalRequest = canonicalRequestArr.join('\\n');\n\n  return canonicalRequest;\n};\n\nexport const getAuthorization = (canonicalRequest: string, authType: AuthType) => {\n  // console.log('canonicalRequest', canonicalRequest);\n\n  const unsignedMsg = getMsgToSign(utf8ToBytes(canonicalRequest));\n  let authorization = '';\n  if (authType.type === 'ECDSA') {\n    const sig = secpSign(unsignedMsg, authType.privateKey);\n    authorization = `GNFD1-ECDSA, Signature=${sig.slice(2)}`;\n  } else {\n    const sig = hexlify(ed25519.sign(hexlify(unsignedMsg).slice(2), authType.seed.slice(2)));\n    authorization = `GNFD2-EDDSA,Signature=${sig.slice(2)}`;\n  }\n\n  return authorization;\n};\n\nexport const newRequestHeadersByMeta = (meta: Partial<ReqMeta>) => {\n  const headers = new Headers();\n  if (meta.contentType) {\n    headers.set(HTTPHeaderContentType.toLocaleLowerCase(), meta.contentType);\n  }\n\n  if (meta.txnHash && meta.txnHash !== '') {\n    headers.set(HTTPHeaderTransactionHash.toLocaleLowerCase(), meta.txnHash);\n  }\n\n  if (meta.contentSHA256) {\n    headers.set(HTTPHeaderContentSHA256.toLocaleLowerCase(), meta.contentSHA256);\n  }\n\n  if (meta.unsignMsg) {\n    headers.set(HTTPHeaderUnsignedMsg.toLocaleLowerCase(), meta.unsignMsg);\n  }\n\n  if (meta.userAddress) {\n    headers.set(HTTPHeaderUserAddress, meta.userAddress);\n  }\n\n  const date = new Date();\n  if (meta.date) {\n    headers.set(HTTPHeaderDate.toLocaleLowerCase(), formatDate(meta.date));\n  } else {\n    headers.set(HTTPHeaderDate.toLocaleLowerCase(), formatDate(date));\n  }\n\n  if (meta.expiryTimestamp) {\n    headers.set(HTTPHeaderExpiryTimestamp.toLocaleLowerCase(), formatDate(meta.expiryTimestamp));\n  } else {\n    date.setHours(date.getHours() + 2);\n    headers.set(HTTPHeaderExpiryTimestamp.toLocaleLowerCase(), formatDate(date));\n  }\n\n  return headers;\n};\n\nfunction formatDate(date: Date): string {\n  const res = date.toISOString();\n  return res.replace(/\\.\\d{3}/gi, '');\n}\n\nexport const HTTPHeaderAuthorization = 'Authorization';\nexport const HTTPHeaderContentSHA256 = 'X-Gnfd-Content-Sha256';\nexport const HTTPHeaderTransactionHash = 'X-Gnfd-Txn-Hash';\nexport const HTTPHeaderObjectID = 'X-Gnfd-Object-ID';\nexport const HTTPHeaderRedundancyIndex = 'X-Gnfd-Redundancy-Index';\nexport const HTTPHeaderResource = 'X-Gnfd-Resource';\nexport const HTTPHeaderDate = 'X-Gnfd-Date';\nexport const HTTPHeaderExpiryTimestamp = 'X-Gnfd-Expiry-Timestamp';\nexport const HTTPHeaderRange = 'Range';\nexport const HTTPHeaderPieceIndex = 'X-Gnfd-Piece-Index';\nexport const HTTPHeaderContentType = 'Content-Type';\nexport const HTTPHeaderContentMD5 = 'Content-MD5';\nexport const HTTPHeaderUnsignedMsg = 'X-Gnfd-Unsigned-Msg';\nexport const HTTPHeaderUserAddress = 'X-Gnfd-User-Address';\nexport const HTTPHeaderAppDomain = 'X-Gnfd-App-Domain';\nexport const HTTPHeaderRegPubKey = 'X-Gnfd-App-Reg-Public-Key';\n\nconst SUPPORTED_HEADERS = [\n  HTTPHeaderContentSHA256.toLocaleLowerCase(),\n  HTTPHeaderTransactionHash.toLocaleLowerCase(),\n  HTTPHeaderObjectID.toLocaleLowerCase(),\n  HTTPHeaderRedundancyIndex.toLocaleLowerCase(),\n  HTTPHeaderResource.toLocaleLowerCase(),\n  HTTPHeaderDate.toLocaleLowerCase(),\n  HTTPHeaderExpiryTimestamp.toLocaleLowerCase(),\n  HTTPHeaderRange.toLocaleLowerCase(),\n  HTTPHeaderPieceIndex.toLocaleLowerCase(),\n  HTTPHeaderContentType.toLocaleLowerCase(),\n  HTTPHeaderContentMD5.toLocaleLowerCase(),\n  HTTPHeaderUnsignedMsg.toLocaleLowerCase(),\n  HTTPHeaderUserAddress.toLocaleLowerCase(),\n  // HTTPHeaderAppDomain.toLocaleLowerCase(),\n];\n\n// https://github.com/ethers-io/ethers.js/discussions/4339\nexport const secpSign = (digestBz: Uint8Array, privateKey: string) => {\n  const signingKey = new SigningKey(privateKey);\n  const signature = signingKey.signDigest(digestBz);\n  let res = joinSignature(signature);\n\n  const v = res.slice(-2);\n  if (v === '1c') res = res.slice(0, -2) + '01';\n  if (v === '1b') res = res.slice(0, -2) + '00';\n\n  return res;\n};\n\nexport const getMsgToSign = (unsignedBytes: Uint8Array): Uint8Array => {\n  const res = keccak256(unsignedBytes);\n  return res;\n};\n\nexport const encodePath = (pathName: string) => {\n  const reservedNames = /^[a-zA-Z0-9-_.~/]+$/;\n  if (reservedNames.test(pathName)) {\n    return pathName;\n  }\n\n  let encodedPathName = '';\n  for (let i = 0; i < pathName.length; i++) {\n    const s = pathName[i];\n\n    // soft characters\n    if (('A' <= s && s <= 'Z') || ('a' <= s && s <= 'z') || ('0' <= s && s <= '9')) {\n      encodedPathName += s;\n      continue;\n    }\n\n    switch (s) {\n      // special characters are allowed\n      case '-':\n      case '_':\n      case '.':\n      case '~':\n      case '/':\n        encodedPathName += s;\n        continue;\n\n      // others characters need to be encoded\n      default: {\n        const u = toUtf8Bytes(s);\n\n        for (let i = 0; i < u.length; i++) {\n          const hexStr = hexlify(u[i]);\n          encodedPathName += '%' + hexStr.slice(2).toUpperCase();\n        }\n      }\n    }\n  }\n  return encodedPathName;\n};\n\nexport const getSortQuery = (queryMap: Record<string, string>) => {\n  const queryParams = new URLSearchParams();\n  for (const k in queryMap) {\n    queryParams.append(k, queryMap[k]);\n  }\n  queryParams.sort();\n\n  return queryParams.toString();\n};\n\nexport const getSortQueryParams = (url: URL, queryMap: Record<string, string>) => {\n  // const queryParams = new URLSearchParams();\n  for (const k in queryMap) {\n    url.searchParams.append(k, queryMap[k]);\n  }\n  url.searchParams.sort();\n\n  return url;\n};\n","import { EMPTY_STRING_SHA256, METHOD_GET } from '@/constants';\nimport { ReqMeta } from '@/types';\nimport { toHex, utf8ToBytes } from 'ethereum-cryptography/utils';\nimport { getSortQueryParams } from '../auth';\n\nexport type APPROVAL_ACTION = 'CreateBucket' | 'CreateObject' | 'MigrateBucket';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/get_approval.md\nexport const getApprovalMetaInfo = <T>(endpoint: string, action: APPROVAL_ACTION, msg: T) => {\n  const path = '/greenfield/admin/v1/get-approval';\n  const queryMap = {\n    action,\n  };\n\n  let url = new URL(path, endpoint);\n  url = getSortQueryParams(url, queryMap);\n\n  const unSignedMessageInHex = toHex(utf8ToBytes(JSON.stringify(msg)));\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    unsignMsg: unSignedMessageInHex,\n    method: METHOD_GET,\n    url: {\n      hostname: url.hostname,\n      query: url.searchParams.toString(),\n      path,\n    },\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_GET,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n","import { VisibilityType } from '../common';\n\nexport type BucketMeta = {\n  /**\n   * defines the information of the bucket.\n   */\n  BucketInfo: BucketInfo;\n\n  /**\n   * defines the creation transaction hash of bucket\n   */\n  CreateTxHash: string;\n\n  /**\n   * defines the block number when the bucket deleted.\n   */\n  DeleteAt: number;\n\n  /**\n   * defines the deleted reason of bucket\n   */\n  DeleteReason: string;\n\n  /**\n   * defines the operator address of bucket\n   */\n  Operator: string;\n\n  /**\n   * defines the bucket is deleted or not\n   */\n  Removed: boolean;\n\n  /**\n   * defines the block number when the bucket updated\n   */\n  UpdateAt: number;\n\n  /**\n   * defines the block number when the bucket updated\n   */\n  UpdateTime: number;\n\n  /**\n   * defines the update transaction hash of bucket\n   */\n  UpdateTxHash: string;\n\n  /**\n   * OffChainStatus represents the status of a bucket in the off-chain storage.\n\t  It is used to track the current state of the bucket with respect to off-chain operations,\n\t  1 means 0001 -> OffChainStatusIsLimited is true\n\t  0 means 0000 -> OffChainStatusIsLimited is false\n\n    For an explanation of the different OffChainStatus values, please visit:https://github.com/bnb-chain/greenfield-storage-provider/blob/9d7048ad33cf51a2f7eb347e2113c5d0cc45f970/modular/blocksyncer/modules/bucket/bucket_handle.go#L40\n   */\n  OffChainStatus: string;\n};\n\nexport type GlobalVirtualGroupFamily = {\n  Id: number;\n  PrimarySpId: number;\n  GlobalVirtualGroupIds: number[];\n  VirtualPaymentAddress: string;\n};\n\nexport interface BucketMetaWithVGF extends BucketMeta {\n  /**\n   * serve as a means of grouping global virtual groups.\n   */\n  Vgf: GlobalVirtualGroupFamily;\n}\n\nexport function formatVGF(vgf: GlobalVirtualGroupFamily): GlobalVirtualGroupFamily {\n  return {\n    ...vgf,\n    Id: Number(vgf.Id),\n    PrimarySpId: Number(vgf.PrimarySpId),\n    // GlobalVirtualGroupIds: vgf.GlobalVirtualGroupIds.map((id) => Number(id)),\n  };\n}\n\nexport interface BucketInfo {\n  /**\n   * globally unique name of bucket\n   */\n  BucketName: string;\n\n  /**\n   * define the status of the bucket.\n   */\n  BucketStatus: number;\n\n  /**\n   * charged_read_quota defines the traffic quota for read in bytes per month.\n\t  The available read data for each user is the sum of the free read data provided by SP and\n\t  the ChargeReadQuota specified here.\n   */\n  ChargedReadQuota: number;\n\n  /**\n   * define the block timestamp when the bucket created.\n   */\n  CreateAt: number;\n\n  /**\n   * defines the unique id of gvg family\n   */\n  GlobalVirtualGroupFamilyId: number;\n\n  /**\n   * the unique identification for bucket.\n   */\n  Id: string;\n\n  /**\n   * the account address of bucket creator, it is also the bucket owner.\n   */\n  Owner: string;\n\n  /**\n   * the address of the payment account\n   */\n  PaymentAddress: string;\n\n  /**\n   * defines which chain the user should send the bucket management transactions to\n   */\n  SourceType: number;\n\n  /**\n   * defines the highest permissions for bucket. When a bucket is public, everyone can get storage objects in it.\n   */\n  Visibility: number;\n\n  /**\n   * defines a list of tags the bucket has\n   */\n  Tags: {\n    Tags: {\n      Key: string;\n      Value: string;\n    }[];\n  };\n\n  /**\n   * indicates that whether bucket owner disable SP as the upload agent.\n\twhen a bucket is created, by default, this is false, means SP is allowed to create object for delegator\n   */\n  SpAsDelegatedAgentDisabled: string;\n}\n\nexport interface StreamRecord {\n  Account: string;\n  CrudTimestamp: string;\n  NetflowRate: string;\n  StaticBalance: string;\n  BufferBalance: string;\n  LockBalance: string;\n  Status: string;\n  SettleTimestamp: string;\n  OutFlowCount: string;\n  FrozenNetflowRate: string;\n}\n\nexport interface ObjectMeta {\n  ObjectInfo: ObjectInfo;\n  LockedBalance: string;\n  Removed: boolean;\n  UpdateAt: number;\n  DeleteAt: number;\n  DeleteReason: string;\n  Operator: string;\n  CreateTxHash: string;\n  UpdateTxHash: string;\n  SealTxHash: string;\n}\n\nexport interface ObjectInfo {\n  BucketName: string;\n  Checksums: string[];\n  ContentType: string;\n  CreateAt: number;\n  Creator: string;\n  Id: number;\n  LocalVirtualGroupId: number;\n  ObjectName: string;\n  ObjectStatus: number;\n  Owner: string;\n  PayloadSize: number;\n  RedundancyType: number;\n  SourceType: number;\n  Visibility: number;\n  Tags: {\n    Tags: {\n      Key: string;\n      Value: string;\n    }[];\n  };\n}\n\nexport function formatBucketInfo(o: BucketInfo): BucketInfo {\n  let tags = o.Tags.Tags || [];\n  if (!Array.isArray(tags)) {\n    tags = [tags];\n  }\n\n  return {\n    ...o,\n    // PrimarySpId: Number(item.BucketInfo.PrimarySpId),\n    BucketStatus: Number(o.BucketStatus),\n    ChargedReadQuota: Number(o.ChargedReadQuota),\n    CreateAt: Number(o.CreateAt),\n    GlobalVirtualGroupFamilyId: Number(o.GlobalVirtualGroupFamilyId),\n    SourceType: Number(o.SourceType),\n    Visibility: Number(o.Visibility),\n    // @ts-ignore\n    SpAsDelegatedAgentDisabled: convertStrToBool(o.SpAsDelegatedAgentDisabled),\n    Tags: {\n      Tags: tags,\n    },\n  };\n}\n\nexport function formatObjectInfo(o: ObjectInfo): ObjectInfo {\n  let tags = o.Tags.Tags || [];\n  if (!Array.isArray(tags)) {\n    tags = [tags];\n  }\n\n  return {\n    ...o,\n    CreateAt: Number(o.CreateAt),\n    Id: Number(o.Id),\n    LocalVirtualGroupId: Number(o.LocalVirtualGroupId),\n    ObjectStatus: Number(o.ObjectStatus),\n    PayloadSize: Number(o.PayloadSize),\n    RedundancyType: Number(o.RedundancyType),\n    SourceType: Number(o.SourceType),\n    Visibility: Number(o.Visibility),\n    Tags: {\n      Tags: tags,\n    },\n  };\n}\n\nexport function convertStrToBool(str: string) {\n  return String(str).toLowerCase() === 'true';\n}\n\nexport interface ReadRecord {\n  ObjectName: string;\n  ObjectID: string;\n  ReadAccountAddress: string;\n  ReadTimestampUs: number;\n  ReadSize: number;\n}\n\nexport function formatReadRecord(o: ReadRecord) {\n  return {\n    ...o,\n    ReadTimestampUs: Number(o.ReadTimestampUs),\n    ReadSize: Number(o.ReadSize),\n  };\n}\n\nexport interface GroupInfo {\n  Owner: string;\n  GroupName: string;\n  SourceType: number;\n  Id: number;\n  Extra: string;\n  Tags: {\n    Tags: {\n      Key: string;\n      Value: string;\n    }[];\n  };\n}\n\nexport function formatGroupInfo(o: GroupInfo): GroupInfo {\n  let tags = o.Tags.Tags || [];\n  if (!Array.isArray(tags)) {\n    tags = [tags];\n  }\n\n  return {\n    ...o,\n    SourceType: Number(o.SourceType),\n    Id: Number(o.Id),\n    Tags: {\n      Tags: tags,\n    },\n  };\n}\n\nexport interface PolicyMeta {\n  /**\n   * principal_type defines the type of principal\n   */\n  PrincipalType: number;\n  /**\n   * principal_value defines the value of principal\n   */\n  PrincipalValue: string;\n  /**\n   * resource_type defines the type of resource that grants permission for\n   */\n  ResourceType: number;\n  /**\n   * resource_id defines the bucket/object/group id of the resource that grants permission for\n   */\n  ResourceId: string;\n  /**\n   * create_timestamp defines the create time of permission\n   */\n  CreateTimestamp: number;\n  /**\n   * update_timestamp defines the update time of permission\n   */\n  UpdateTimestamp: number;\n  /**\n   * expiration_time defines the expiration time of permission\n   */\n  ExpirationTime: number;\n}\n\nexport type DelegatedOpts = {\n  visibility: VisibilityType;\n  isUpdate?: boolean;\n};\n\nexport type ResumableOpts = {\n  disableResumable: boolean;\n  partSize?: number;\n};\n\nexport type NodeFile = {\n  name: string;\n  type: string;\n  size: number;\n  content: Buffer;\n};\nexport type UploadFile = File | NodeFile;\n","import { GetBucketMetaRequest, GetBucketMetaResponse } from '@/types';\nimport { formatBucketInfo } from '@/types/sp/Common';\nimport { XMLParser } from 'fast-xml-parser';\nimport { getSortQueryParams } from '../auth';\nimport { SPMetaInfo } from './metaInfos';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/get_bucket_meta.md\nexport const getBucketMetaInfo = (\n  endpoint: string,\n  params: GetBucketMetaRequest,\n): Pick<SPMetaInfo, 'url'> => {\n  const path = `/${params.bucketName}`;\n  const queryMap = {\n    'bucket-meta': '',\n  };\n  let url = new URL(path, endpoint);\n  url = getSortQueryParams(url, queryMap);\n\n  return {\n    url: url.href,\n  };\n};\n\nexport const parseGetBucketMetaResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as GetBucketMetaResponse;\n\n  res.GfSpGetBucketMetaResponse.Bucket = {\n    ...res.GfSpGetBucketMetaResponse.Bucket,\n    BucketInfo: formatBucketInfo(res.GfSpGetBucketMetaResponse.Bucket.BucketInfo),\n    DeleteAt: Number(res.GfSpGetBucketMetaResponse.Bucket.DeleteAt),\n    UpdateAt: Number(res.GfSpGetBucketMetaResponse.Bucket.UpdateAt),\n    UpdateTime: Number(res.GfSpGetBucketMetaResponse.Bucket.UpdateTime),\n  };\n\n  return res;\n};\n","import type { GetUserBucketsResponse } from '@/types';\nimport { convertStrToBool, formatBucketInfo, formatVGF } from '@/types/sp/Common';\nimport { XMLParser } from 'fast-xml-parser';\nimport { SPMetaInfo } from './metaInfos';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/get_user_buckets.md\nexport const getUserBucketMetaInfo = (endpoint: string): Pick<SPMetaInfo, 'url'> => {\n  return {\n    url: endpoint,\n  };\n};\n\nexport const parseGetUserBucketsResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as GetUserBucketsResponse;\n\n  let Buckets = res.GfSpGetUserBucketsResponse.Buckets || [];\n  if (Buckets) {\n    if (!Array.isArray(Buckets)) {\n      Buckets = [Buckets];\n    }\n\n    Buckets = Buckets.map((item) => {\n      return {\n        ...item,\n        BucketInfo: formatBucketInfo(item.BucketInfo),\n        // @ts-ignore\n        Removed: convertStrToBool(item.Removed),\n        DeleteAt: Number(item.DeleteAt),\n        UpdateAt: Number(item.UpdateAt),\n        UpdateTime: Number(item.UpdateTime),\n        Vgf: formatVGF(item.Vgf),\n      };\n    });\n  }\n\n  res.GfSpGetUserBucketsResponse = {\n    Buckets,\n  };\n\n  return res;\n};\n","import {\n  AllowedMsgAllowance,\n  BasicAllowance,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/feegrant';\nimport { MsgGrantAllowance } from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/tx';\nimport { Any } from '@bnb-chain/greenfield-cosmos-types/google/protobuf/any';\nimport { Timestamp } from '@bnb-chain/greenfield-cosmos-types/google/protobuf/timestamp';\nimport {\n  AllowedMsgAllowanceTypeUrl,\n  BasicAllowanceTypeUrl,\n  DEFAULT_DENOM,\n  fromTimestamp,\n} from '..';\n\nexport interface IGrantAllowance {\n  amount: string;\n  denom: string;\n  allowedMessages: string[];\n  granter: MsgGrantAllowance['granter'];\n  grantee: MsgGrantAllowance['grantee'];\n  expirationTime: Timestamp;\n}\n\nexport const newBasicAllowance = (\n  amount: string,\n  denom: string = DEFAULT_DENOM,\n  expirationTime: Timestamp,\n): BasicAllowance => {\n  return {\n    spendLimit: [\n      {\n        amount,\n        denom,\n      },\n    ],\n    expiration: expirationTime,\n  };\n};\n\nexport const newAllowedMsgAllowance = (\n  allowedMessages: string[],\n  basicAllowance: BasicAllowance,\n): AllowedMsgAllowance => {\n  return {\n    allowedMessages,\n    allowance: Any.fromPartial({\n      typeUrl: BasicAllowanceTypeUrl,\n      value: BasicAllowance.encode(basicAllowance).finish(),\n    }),\n  };\n};\n\nexport const newMsgGrantAllowance = (\n  grantee: string,\n  granter: string,\n  allowedMsgAllowance: AllowedMsgAllowance,\n): MsgGrantAllowance => {\n  return {\n    grantee,\n    granter,\n    allowance: Any.fromPartial({\n      typeUrl: AllowedMsgAllowanceTypeUrl,\n      value: AllowedMsgAllowance.encode(allowedMsgAllowance).finish(),\n    }),\n  };\n};\n\nexport const newMarshal = (\n  amount: string,\n  denom: string = DEFAULT_DENOM,\n  allowed_messages: string[],\n  expirationTime: Timestamp,\n) => {\n  return {\n    '@type': AllowedMsgAllowanceTypeUrl,\n    allowance: {\n      '@type': BasicAllowanceTypeUrl,\n      expiration: fromTimestamp(expirationTime),\n      spend_limit: [\n        {\n          amount,\n          denom,\n        },\n      ],\n    },\n    allowed_messages,\n  };\n};\n","const IP_REGEX = /^(\\d+\\.){3}\\d+$/g;\nconst ALLOW_REGEX = /^[a-z0-9][a-z0-9.\\-]{1,61}[a-z0-9]$/g;\nconst dotdotComponent = '..';\nconst dotComponent = '.';\nconst slashSeparator = '/';\n\nconst verifyBucketName = (bucketName?: string) => {\n  if (!bucketName) {\n    throw new Error('Bucket name is empty, please check.');\n  }\n  const length = bucketName.length;\n  if (length < 3 || length > 63) {\n    throw new Error(`Bucket name length is required to be between 3~63, please check.`);\n  }\n  if (bucketName.match(IP_REGEX)) {\n    throw new Error('The bucket name %s cannot be formatted as an IP address, please check.');\n  }\n  if (bucketName.includes('..') || bucketName.includes('.-') || bucketName.includes('-.')) {\n    throw new Error('Bucket name contains invalid characters, please check.');\n  }\n  if (!bucketName.match(ALLOW_REGEX)) {\n    throw new Error(\n      'Bucket name can only include lowercase letters, numbers, commas and hyphen, please check.',\n    );\n  }\n  if (\n    bucketName[0] === '-' ||\n    bucketName[length - 1] === '-' ||\n    bucketName[0] === '.' ||\n    bucketName[length - 1] === '.'\n  ) {\n    throw new Error(\n      'Bucket name %must start and end with a lowercase letter or number, please check.',\n    );\n  }\n};\n\nconst hasBadPathComponent = (path: string): boolean => {\n  const newPath = path.trim();\n  for (const p of newPath.split(slashSeparator)) {\n    switch (p.trim()) {\n      case dotdotComponent:\n      case dotComponent:\n        return true;\n    }\n  }\n  return false;\n};\n\nconst isUTF8 = (str: string): boolean => {\n  try {\n    new TextDecoder('utf-8').decode(new TextEncoder().encode(str));\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst verifyObjectName = (objectName?: string) => {\n  if (!objectName) {\n    throw new Error('Object name is empty, please check.');\n  }\n  if (objectName.length > 1024) {\n    throw new Error('Object name is limited to 1024 at most, please check.');\n  }\n  if (hasBadPathComponent(objectName)) {\n    throw new Error('Object name error, please check.');\n  }\n  if (!isUTF8(objectName)) {\n    throw new Error('Object name is not in UTF-8 format, please check.');\n  }\n  if (objectName.includes(`//`)) {\n    throw new Error(`Object name that contains a \"//\" is not supported`);\n  }\n};\n\nconst verifyAddress = (address?: string) => {\n  if (!address) throw new Error('Address is empty, please check.');\n  if (address.length > 1024) throw new Error('Address is limited to 1024 at most, please check.');\n};\n\nconst verifyUrl = (url?: string) => {\n  if (!url || url.length === 0) return false;\n  const pattern = new RegExp(\n    '^(https?:\\\\/\\\\/)?' + // 协议\n      '((([a-zA-Z\\\\d]([a-zA-Z\\\\d-]{0,61}[a-zA-Z\\\\d])?)\\\\.)+' + // 域名\n      '[a-zA-Z]{2,13})' + // 顶级域名\n      '(\\\\:\\\\d{1,5})?' + // 端口号\n      '(\\\\/[-a-zA-Z\\\\d%_.~+]*)*' + // 路径\n      '(\\\\?[;&a-zA-Z\\\\d%_.~+=-]*)?' + // 查询字符串\n      '(\\\\#[-a-zA-Z\\\\d_]*)?$', // 锚点\n    'i',\n  );\n\n  if (!pattern.test(url)) throw new Error('Invalid endpoint');\n};\n\n// remove specified from prefix and suffix of a string\nconst trimString = (originString: string, deleteString: string) => {\n  const delStrLength = deleteString.length;\n  if (originString.startsWith(deleteString)) {\n    originString = originString.substring(delStrLength);\n  }\n  if (originString.endsWith(deleteString)) {\n    originString = originString.substring(0, originString.length - delStrLength);\n  }\n  return originString;\n};\n\nconst generateUrlByBucketName = (endpoint = '', bucketName: string) => {\n  verifyBucketName(bucketName);\n  verifyUrl(endpoint);\n  const { protocol } = new URL(endpoint);\n  return endpoint.replace(`${protocol}//`, `${protocol}//${bucketName}.`);\n};\n\nconst isSQLInjection = (input: string) => {\n  // define patterns that may indicate SQL injection\n  const patterns = [\n    /;.*select/, // Matches any string with a semicolon followed by \"select\"\n    /;.*insert/, // Matches any string with a semicolon followed by \"insert\"\n    /;.*update/, // Matches any string with a semicolon followed by \"update\"\n    /;.*delete/, // Matches any string with a semicolon followed by \"delete\"\n    /;.*drop/, // Matches any string with a semicolon followed by \"drop\"\n    /;.*alter/, // Matches any string with a semicolon followed by \"alter\"\n    /\\/\\*[\\s\\S]*?\\*\\//, // Matches SQL block comment\n  ];\n\n  for (const pattern of patterns) {\n    const match = pattern.test(input);\n    if (match) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n// CheckObjectName  This code block checks for unsupported or potentially risky formats in object names.\n// The checks are essential for ensuring the security and compatibility of the object names within the system.\n// 1. \"..\" in object names: Checked to prevent path traversal attacks which might access directories outside the intended scope.\n// 2. Object name being \"/\": The root directory should not be used as an object name due to potential security risks and ambiguity.\n// 3. \"\\\\\" in object names: Backslashes are checked because they are often not supported in UNIX-like file systems and can cause issues in path parsing.\n// 4. SQL Injection patterns in object names: Ensures that the object name does not contain patterns that could be used for SQL injection attacks, maintaining the integrity of the database.\nconst checkObjectName = (objectName: string) => {\n  if (\n    objectName.includes('..') ||\n    objectName === '/' ||\n    objectName.includes('\\\\') ||\n    isSQLInjection(objectName)\n  ) {\n    throw new Error(`fail to check object name: ${objectName}`);\n  }\n};\n\nexport {\n  verifyBucketName,\n  verifyObjectName,\n  checkObjectName,\n  verifyAddress,\n  trimString,\n  verifyUrl,\n  generateUrlByBucketName,\n};\n","import { encodePath } from '../clients/spclient/auth';\n\nconst toHex = (char = '') => {\n  return char.charCodeAt(0).toString(16);\n};\n\nconst encodeToHex = (str = '') => {\n  return str.split('').map(toHex).join('');\n};\n\nconst decodeFromHex = (hex = '') => {\n  const result = [];\n  for (let i = 0; i < hex.length; i += 2) {\n    result.push(String.fromCharCode(parseInt(hex.substr(i, 2), 16)));\n  }\n  return result.join('');\n};\n\nconst encodeObjectToHexString = (jsonObject: object) => {\n  const utf8Encoder = new TextEncoder();\n  const utf8Bytes = utf8Encoder.encode(JSON.stringify(jsonObject));\n  return Array.from(utf8Bytes)\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('');\n};\n\nconst encodeToHexString = (str = '') => {\n  const utf8Encoder = new TextEncoder();\n  const utf8Bytes = utf8Encoder.encode(str);\n  return Array.from(utf8Bytes)\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('');\n};\n\nconst hexToBytes = (hex = '') => {\n  const bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = parseInt(hex.slice(i, i + 2), 16);\n  }\n  return bytes;\n};\n\nfunction uint8ArrayToJson(uint8Array: Uint8Array) {\n  const decoder = new TextDecoder('utf-8');\n  const jsonString = decoder.decode(uint8Array);\n  return JSON.parse(jsonString);\n}\n\nconst decodeObjectFromHexString = (hex = '') => {\n  return uint8ArrayToJson(hexToBytes(hex));\n};\n\nexport {\n  encodeToHex,\n  decodeFromHex,\n  encodeObjectToHexString,\n  decodeObjectFromHexString,\n  encodeToHexString,\n  encodePath,\n};\n","import { ResourceType } from '@bnb-chain/greenfield-cosmos-types/greenfield/resource/types';\n\n// GRN define a standard ResourceName format, full name: GreenFieldResourceName\n// valid format:\n//\tbucket: \"grn:b::bucketName\"\n//\tobject: \"grn:o::bucketName/objectName\"\n//\tgroup: \"grn:g:ownerAddress/groupName\"\n// Notice: all the name support wildcards\n\nexport interface IGRN {\n  resType: ResourceType;\n  groupOwner: string;\n  /**\n   * can be bucketName, bucketName/objectName, groupName\n   */\n  name: string;\n}\n\nconst BucketTypeAbbr = 'b';\nconst ObjectTypeAbbr = 'o';\nconst GroupTypeAbbr = 'g';\n\nexport const newBucketGRN = (bucketName: string): IGRN => {\n  return {\n    resType: ResourceType.RESOURCE_TYPE_BUCKET,\n    groupOwner: '',\n    name: bucketName,\n  };\n};\n\nexport const newObjectGRN = (bucketName: string, objectName: string): IGRN => {\n  const name = [bucketName, objectName].join('/');\n  return {\n    name,\n    resType: ResourceType.RESOURCE_TYPE_OBJECT,\n    groupOwner: '',\n  };\n};\n\nexport const newGroupGRN = (owner: string, groupName: string): IGRN => {\n  return {\n    resType: ResourceType.RESOURCE_TYPE_GROUP,\n    groupOwner: owner,\n    name: groupName,\n  };\n};\n\nexport const GRNToString = (grn: IGRN) => {\n  let res = '';\n\n  switch (grn.resType) {\n    case ResourceType.RESOURCE_TYPE_BUCKET:\n      res = `grn:${BucketTypeAbbr}::${grn.name}`;\n      break;\n    case ResourceType.RESOURCE_TYPE_OBJECT:\n      res = `grn:${ObjectTypeAbbr}::${grn.name}`;\n      break;\n    case ResourceType.RESOURCE_TYPE_GROUP:\n      res = `grn:${GroupTypeAbbr}:${grn.groupOwner}:${grn.name}`;\n      break;\n    default:\n      return '';\n  }\n\n  return res.trim();\n};\n","import dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\nexport const getUtcZeroTimestamp = () => {\n  dayjs.extend(utc);\n\n  return dayjs().utc().valueOf();\n};\n\nexport const convertTimeStampToDate = (utcTimestamp: number) => {\n  dayjs.extend(utc);\n  dayjs.extend(timezone);\n  // utc-0 timezone\n  const tz = 'Iceland';\n\n  return dayjs(utcTimestamp).tz(tz).format();\n};\n","import { EMPTY_STRING_SHA256, METHOD_GET } from '@/constants';\nimport { ReqMeta } from '@/types';\nimport { formatReadRecord } from '@/types/sp/Common';\nimport {\n  ListBucketReadRecordRequest,\n  ListBucketReadRecordResponse,\n} from '@/types/sp/ListBucketReadRecord';\nimport { generateUrlByBucketName } from '@/utils';\nimport { XMLParser } from 'fast-xml-parser';\nimport { getSortQuery, getSortQueryParams } from '../auth';\nimport { SPMetaInfo } from './metaInfos';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_bucket_read_records.md\nexport const getListBucketReadRecordMetaInfo = (\n  endpoint: string,\n  params: ListBucketReadRecordRequest,\n): SPMetaInfo => {\n  const { bucketName, endTimeStamp, maxRecords, startTimeStamp } = params;\n  const path = '/';\n  const queryMap = {\n    'list-read-record': 'null',\n    'end-timestamp': String(endTimeStamp),\n    'max-records': String(maxRecords),\n    'start-timestamp': String(startTimeStamp),\n  };\n\n  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n  url = getSortQueryParams(url, queryMap);\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    method: METHOD_GET,\n    url: {\n      hostname: url.hostname,\n      query: url.searchParams.toString(),\n      path,\n    },\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_GET,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n\nexport const parseListBucketReadRecordResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n\n  const res = xmlParser.parse(data) as ListBucketReadRecordResponse;\n\n  let readRecords = res.GetBucketReadQuotaResult?.ReadRecords || [];\n  if (readRecords) {\n    if (!Array.isArray(readRecords)) {\n      readRecords = [readRecords];\n    }\n\n    readRecords = readRecords.map((readRecord) => formatReadRecord(readRecord));\n  }\n\n  res.GetBucketReadQuotaResult = {\n    ...res.GetBucketReadQuotaResult,\n    ReadRecords: readRecords,\n  };\n\n  return res;\n};\n","import { ListBucketsByIDsRequest, ListBucketsByIDsResponse } from '@/types';\nimport { convertStrToBool, formatBucketInfo } from '@/types/sp/Common';\nimport { XMLParser } from 'fast-xml-parser';\nimport { getSortQueryParams } from '../auth';\nimport { SPMetaInfo } from './metaInfos';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_buckets_by_ids.md\nexport const getListBucketsByIDsMetaInfo = (\n  endpoint: string,\n  params: ListBucketsByIDsRequest,\n): Pick<SPMetaInfo, 'url'> => {\n  const path = '/';\n  const queryMap = {\n    ids: params.ids.join(','),\n    'buckets-query': 'null',\n  };\n\n  let url = new URL(path, endpoint);\n  url = getSortQueryParams(url, queryMap);\n\n  return {\n    url: url.href,\n  };\n};\n\nexport const parseListBucketsByIdsResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as ListBucketsByIDsResponse;\n\n  let BucketEntry = res.GfSpListBucketsByIDsResponse.BucketEntry || [];\n  if (BucketEntry) {\n    if (!Array.isArray(BucketEntry)) {\n      BucketEntry = [BucketEntry];\n    }\n\n    BucketEntry = BucketEntry.map((item) => {\n      let Value = item.Value;\n      if (Value) {\n        Value = {\n          ...item.Value,\n          BucketInfo: formatBucketInfo(item.Value.BucketInfo),\n          // @ts-ignore\n          Removed: convertStrToBool(item.Value.Removed),\n          UpdateAt: Number(item.Value.UpdateAt),\n          DeleteAt: Number(item.Value.DeleteAt),\n        };\n      }\n\n      return {\n        ...item,\n        Id: Number(item.Id),\n        Value,\n      };\n    });\n  }\n\n  res.GfSpListBucketsByIDsResponse = {\n    ...res.GfSpListBucketsByIDsResponse,\n    BucketEntry,\n  };\n\n  return res;\n};\n","import { convertStrToBool, formatBucketInfo } from '@/types/sp/Common';\nimport {\n  ListBucketsByPaymentAccountRequest,\n  ListBucketsByPaymentAccountResponse,\n} from '@/types/sp/ListBucketsByPaymentAccount';\nimport { XMLParser } from 'fast-xml-parser';\nimport { getSortQueryParams } from '../auth';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_payment_account_streams.md\nexport const getListBucketByPaymentMetaInfo = (\n  endpoint: string,\n  params: ListBucketsByPaymentAccountRequest,\n) => {\n  const path = '/';\n  const queryMap = {\n    'payment-buckets': 'null',\n    'payment-account': params.paymentAccount,\n  };\n\n  let url = new URL(path, endpoint);\n  url = getSortQueryParams(url, queryMap);\n\n  return {\n    url: url.href,\n  };\n};\n\nexport const parseListBucketByPaymentResponse = (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as ListBucketsByPaymentAccountResponse;\n\n  let Buckets = res.GfSpListPaymentAccountStreamsResponse.Buckets || [];\n  if (Buckets) {\n    if (!Array.isArray(Buckets)) {\n      Buckets = [Buckets];\n    }\n\n    Buckets = Buckets.map((item) => {\n      return {\n        ...item,\n        BucketInfo: formatBucketInfo(item.BucketInfo),\n        // @ts-ignore\n        Removed: convertStrToBool(item.Removed),\n        DeleteAt: Number(item.DeleteAt),\n        UpdateAt: Number(item.UpdateAt),\n        UpdateTime: Number(item.UpdateTime),\n      };\n    });\n  }\n\n  res.GfSpListPaymentAccountStreamsResponse = {\n    Buckets,\n  };\n\n  return res;\n};\n","import { RequestErrorResponse } from '@/types';\nimport { XMLParser } from 'fast-xml-parser';\n\nexport const parseError = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as RequestErrorResponse;\n\n  return {\n    code: res.Error.Code,\n    message: res.Error.Message,\n  };\n};\n","import { EMPTY_STRING_SHA256, METHOD_GET } from '@/constants';\nimport { ReqMeta, ReadQuotaRequest } from '@/types';\nimport { ReadQuotaResponse } from '@/types/sp';\nimport { generateUrlByBucketName } from '@/utils/asserts/s3';\nimport { XMLParser } from 'fast-xml-parser';\nimport { getSortQuery } from '../auth';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/query_bucket_read_quota.md\nexport const getQueryBucketReadQuotaMetaInfo = async (\n  endpoint: string,\n  params: ReadQuotaRequest,\n) => {\n  const { year, month, bucketName } = params;\n  const currentDate = new Date();\n  const finalYear = year ? year : currentDate.getFullYear();\n  const finalMonth = month ? month : currentDate.getMonth() + 1;\n  // format month to 2 digits, like \"01\"\n  const formattedMonth = finalMonth.toString().padStart(2, '0');\n\n  const path = '/';\n  const queryMap = {\n    'year-month': `${finalYear}-${formattedMonth}`,\n    'read-quota': 'null',\n  };\n  const query = getSortQuery(queryMap);\n  const url = `${generateUrlByBucketName(endpoint, bucketName)}${path}?${query}`;\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    method: METHOD_GET,\n    url: {\n      hostname: new URL(url).hostname,\n      query,\n      path,\n    },\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_GET,\n  };\n\n  return {\n    url,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n\nexport const parseReadQuotaResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as ReadQuotaResponse;\n\n  return res;\n};\n","import fetch from 'cross-fetch';\n\nexport function delayMs(duration: number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error('request time out'));\n    }, duration);\n  });\n}\n\nconst fetchWithTimeout = async (fetchUrl = '', fetchOptions: any = {}, duration = 30000) => {\n  try {\n    const response = (await Promise.race([\n      delayMs(duration),\n      fetch(fetchUrl, fetchOptions),\n    ])) as Response;\n    return response;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport { fetchWithTimeout };\n","import { EMPTY_STRING_SHA256, METHOD_GET } from '@/constants';\nimport { ReqMeta } from '@/types';\nimport { generateUrlByBucketName } from '@/utils/asserts/s3';\nimport { encodePath } from '../auth';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/get_object.md\nexport const getGetObjectMetaInfo = async (\n  endpoint: string,\n  params: {\n    objectName: string;\n    bucketName: string;\n  },\n) => {\n  const { bucketName, objectName } = params;\n  const path = `/${encodePath(objectName)}`;\n  const query = '';\n\n  const url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    method: METHOD_GET,\n    url: {\n      hostname: new URL(url).hostname,\n      query,\n      path,\n    },\n    contentType: 'application/octet-stream',\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_GET,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n","import { EMPTY_STRING_SHA256, METHOD_PUT } from '@/constants';\nimport { ReqMeta, VisibilityType } from '@/types';\nimport { UploadFile } from '@/types/sp/Common';\nimport { generateUrlByBucketName } from '@/utils/asserts/s3';\nimport { encodePath, getSortQueryParams } from '../auth';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/put_object.md\nexport const getPutObjectMetaInfo = async (\n  endpoint: string,\n  params: {\n    objectName: string;\n    bucketName: string;\n    contentType: string;\n    body: UploadFile;\n    txnHash?: string;\n    delegatedOpts?: {\n      visibility: VisibilityType;\n      isUpdate?: boolean;\n    };\n  },\n) => {\n  const { bucketName, objectName, txnHash, contentType, body, delegatedOpts } = params;\n  const path = `/${encodePath(objectName)}`;\n  let queryMap = {};\n\n  if (delegatedOpts) {\n    queryMap = {\n      delegate: '',\n      payload_size: String(body.size),\n      visibility: delegatedOpts.visibility.toString(),\n      is_update: String(delegatedOpts.isUpdate || false),\n    };\n  }\n\n  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n  url = getSortQueryParams(url, queryMap);\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    txnHash: txnHash,\n    method: METHOD_PUT,\n    url: {\n      hostname: url.hostname,\n      query: url.searchParams.toString(),\n      path,\n    },\n    contentType,\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_PUT,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n    file: body,\n  };\n};\n","import {\n  getAuthorization,\n  getCanonicalRequest,\n  HTTPHeaderAppDomain,\n  HTTPHeaderAuthorization,\n  HTTPHeaderRegPubKey,\n  HTTPHeaderUserAddress,\n  newRequestHeadersByMeta,\n} from '@/clients/spclient/auth';\nimport { parseError } from '@/clients/spclient/spApis/parseError';\nimport { SP_NOT_AVAILABLE_ERROR_CODE, SP_NOT_AVAILABLE_ERROR_MSG } from '@/constants/http';\nimport { OnProgress } from '@/types';\nimport { AuthType, ReqMeta } from '@/types/auth';\nimport { fetchWithTimeout } from '@/utils/http';\nimport { hexlify } from '@ethersproject/bytes';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport superagent from 'superagent';\nimport { injectable } from 'tsyringe';\nimport { getGetObjectMetaInfo } from './spApis/getObject';\nimport { getPutObjectMetaInfo } from './spApis/putObject';\nimport { assertFileType, assertHttpMethod } from '@/utils';\nimport { UploadFile } from '@/types/sp/Common';\nimport { isNode } from 'browser-or-node';\n\nexport interface ISpClient {\n  callApi(\n    url: string,\n    options: RequestInit,\n    duration: number,\n    customError?: {\n      message: string;\n      code: number;\n    },\n  ): Promise<Response>;\n\n  signHeaders(reqMeta: Partial<ReqMeta>, authType: AuthType): Promise<Headers>;\n\n  /**\n   *\n   * ```\n   * const { PUT_OBJECT: getPutObjectMetaInfo } = client.spClient.getMetaInfo(endpoint, payload);\n   * const {reqMeta, url} = await getPutObjectMetaInfo(endpoint, params);\n   *\n   * axios.put(...)\n   * ```\n   *\n   */\n  getMetaInfo(): {\n    PUT_OBJECT: typeof getPutObjectMetaInfo;\n    GET_OBJECT: typeof getGetObjectMetaInfo;\n  };\n}\n\n@injectable()\nexport class SpClient implements ISpClient {\n  public async callApi(\n    url: string,\n    options: RequestInit,\n    timeout = 30000,\n    customError?: {\n      message: string;\n      code: number;\n    },\n  ) {\n    try {\n      const controller = new AbortController();\n      const _id = setTimeout(() => controller.abort(), timeout);\n      const response = await fetchWithTimeout(\n        url,\n        {\n          ...options,\n          signal: controller.signal,\n        },\n        timeout,\n      );\n      clearTimeout(_id);\n\n      const { status } = response;\n\n      if (status === SP_NOT_AVAILABLE_ERROR_CODE) {\n        throw {\n          code: SP_NOT_AVAILABLE_ERROR_CODE,\n          message: SP_NOT_AVAILABLE_ERROR_MSG,\n          statusCode: status,\n        };\n      }\n\n      if (!response.ok) {\n        const xmlError = await response.text();\n        const { code, message } = await parseError(xmlError);\n\n        throw {\n          code: code || customError?.code,\n          message: message || customError?.message,\n          statusCode: status,\n        };\n      }\n\n      return response;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  public async callApiV2(\n    url: string,\n    options: RequestInit,\n    timeout = 30000,\n    customError?: {\n      message: string;\n      code: number;\n    },\n  ) {\n    assertHttpMethod(options.method);\n\n    try {\n      const R = new superagent.Request(options.method, url);\n      if (options.headers) {\n        (options.headers as Headers).forEach((v: string, k: string) => {\n          R.set(k, v);\n        });\n      }\n      R.timeout(timeout);\n      R.ok((res) => res.status < 500);\n\n      const response = await R.send();\n      const { status } = response;\n\n      if (status === SP_NOT_AVAILABLE_ERROR_CODE) {\n        throw {\n          code: SP_NOT_AVAILABLE_ERROR_CODE,\n          message: SP_NOT_AVAILABLE_ERROR_MSG,\n          statusCode: status,\n        };\n      }\n\n      if (!response.ok) {\n        const xmlError = response.text;\n        const { code, message } = await parseError(xmlError);\n\n        throw {\n          code: code || customError?.code,\n          message: message || customError?.message,\n          statusCode: status,\n        };\n      }\n\n      return response;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * just use for uploading object:\n   * because fetch can't support upload progress\n   */\n  public async upload(\n    url: string,\n    options: RequestInit,\n    timeout: number,\n    uploadFile: UploadFile,\n    callback?: {\n      onProgress?: OnProgress;\n      customError?: {\n        message: string;\n        code: number;\n      };\n    },\n  ) {\n    const R = superagent.put(url);\n    R.timeout(timeout);\n    R.ok((res) => res.status < 500);\n\n    if (options.headers) {\n      (options.headers as Headers).forEach((v: string, k: string) => {\n        R.set(k, v);\n      });\n    }\n\n    if (callback && callback.onProgress) {\n      R.on('progress', (e) => {\n        callback.onProgress?.(e);\n      });\n    }\n\n    const file = assertFileType(uploadFile) ? uploadFile.content : uploadFile;\n\n    // https://ladjs.github.io/superagent/docs/index.html#serializing-request-body\n    const sendFile =\n      isNode && R.get('Content-Type') === 'application/json' ? file.toString() : file;\n    if (isNode) {\n      R.buffer(true);\n    }\n\n    try {\n      const response = await R.send(sendFile);\n      const { status } = response;\n\n      if (status === SP_NOT_AVAILABLE_ERROR_CODE) {\n        throw {\n          code: SP_NOT_AVAILABLE_ERROR_CODE,\n          message: SP_NOT_AVAILABLE_ERROR_MSG,\n          statusCode: status,\n        };\n      }\n\n      if (!response.ok) {\n        const xmlError = response.text;\n\n        const { code, message } = await parseError(xmlError);\n\n        throw {\n          code: callback?.customError?.code || code,\n          message: callback?.customError?.message || message,\n          statusCode: status,\n        };\n      }\n\n      return response;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  public async signHeaders(reqMeta: Partial<ReqMeta>, authType: AuthType) {\n    const metaHeaders: Headers = newRequestHeadersByMeta(reqMeta);\n\n    if (authType.type === 'EDDSA') {\n      const { domain, address, seed } = authType;\n      const pubKey = hexlify(ed25519.getPublicKey(seed.slice(2)));\n\n      metaHeaders.set(HTTPHeaderUserAddress, address);\n      metaHeaders.set(HTTPHeaderAppDomain, domain);\n      metaHeaders.set(HTTPHeaderRegPubKey, pubKey.slice(2));\n    }\n\n    const canonicalRequest = getCanonicalRequest(reqMeta, metaHeaders);\n    const auth = getAuthorization(canonicalRequest, authType);\n    metaHeaders.set(HTTPHeaderAuthorization, auth);\n\n    return metaHeaders;\n  }\n\n  public getMetaInfo() {\n    return {\n      PUT_OBJECT: getPutObjectMetaInfo,\n      GET_OBJECT: getGetObjectMetaInfo,\n    };\n  }\n}\n","import { ListGroupsResponse, ListGroupsResquest } from '@/types';\nimport { formatGroupInfo, convertStrToBool } from '@/types/sp/Common';\nimport { XMLParser } from 'fast-xml-parser';\nimport { getSortQueryParams } from '../auth';\nimport { SPMetaInfo } from './metaInfos';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/get_group_list.md\nexport const getListGroupMetaInfo = (\n  endpoint: string,\n  params: ListGroupsResquest,\n): Pick<SPMetaInfo, 'url'> => {\n  const { name, prefix, sourceType, limit, offset } = params;\n  const path = '/';\n  const queryMap = {\n    'group-query': 'null',\n    name,\n    prefix,\n    'source-type': sourceType as string,\n    limit: String(limit),\n    offset: String(offset),\n  };\n  let url = new URL(path, endpoint);\n  url = getSortQueryParams(url, queryMap);\n\n  return {\n    url: url.href,\n  };\n};\n\nexport const parseListGroupsResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n\n  const res = xmlParser.parse(data) as ListGroupsResponse;\n\n  let Groups = res.GfSpGetGroupListResponse.Groups || [];\n  if (Groups) {\n    if (!Array.isArray(Groups)) {\n      Groups = [Groups];\n    }\n\n    Groups = Groups.map((item) => {\n      return {\n        ...item,\n        CreateAt: Number(item.CreateAt),\n        CreateTime: Number(item.CreateTime),\n        UpdateAt: Number(item.UpdateAt),\n        UpdateTime: Number(item.UpdateTime),\n        // @ts-ignore\n        Removed: convertStrToBool(item.Removed),\n        Group: formatGroupInfo(item.Group),\n      };\n    });\n  }\n\n  res.GfSpGetGroupListResponse = {\n    Groups: Groups,\n    Count: Number(res.GfSpGetGroupListResponse.Count),\n  };\n\n  return res;\n};\n","import { ListGroupsMembersResponse } from '@/types';\nimport { formatGroupInfo, convertStrToBool } from '@/types/sp/Common';\nimport { XMLParser } from 'fast-xml-parser';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_group_members.md\nexport const parseListGroupsMembersResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as ListGroupsMembersResponse;\n\n  let Groups = res.GfSpGetGroupMembersResponse.Groups || [];\n  if (Groups) {\n    if (!Array.isArray(Groups)) {\n      Groups = [Groups];\n    }\n\n    Groups = Groups.map((item) => {\n      return {\n        ...item,\n        CreateAt: Number(item.CreateAt),\n        CreateTime: Number(item.CreateTime),\n        UpdateAt: Number(item.UpdateAt),\n        UpdateTime: Number(item.UpdateTime),\n        // @ts-ignore\n        Removed: convertStrToBool(item.Removed),\n        Group: formatGroupInfo(item.Group),\n      };\n    });\n  }\n\n  return res;\n};\n","import { ListUserGroupsResponse } from '@/types';\nimport { formatGroupInfo, convertStrToBool } from '@/types/sp/Common';\nimport { XMLParser } from 'fast-xml-parser';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_user_groups.md\nexport const parseListUserGroupsResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n\n  const res = xmlParser.parse(data) as ListUserGroupsResponse;\n\n  let Groups = res.GfSpGetUserGroupsResponse.Groups || [];\n  if (Groups) {\n    if (!Array.isArray(Groups)) {\n      Groups = [Groups];\n    }\n\n    Groups = Groups.map((item) => {\n      return {\n        ...item,\n        CreateAt: Number(item.CreateAt),\n        CreateTime: Number(item.CreateTime),\n        UpdateAt: Number(item.UpdateAt),\n        UpdateTime: Number(item.UpdateTime),\n        // @ts-ignore\n        Removed: convertStrToBool(item.Removed),\n        Group: formatGroupInfo(item.Group),\n      };\n    });\n  }\n\n  res.GfSpGetUserGroupsResponse = {\n    Groups: Groups,\n  };\n\n  return res;\n};\n","import { formatGroupInfo, convertStrToBool } from '@/types/sp/Common';\nimport { ListUserOwnedGroupsResponse } from '@/types/sp/ListUserOwnedGroups';\nimport { XMLParser } from 'fast-xml-parser';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_user_owned_groups.md\nexport const parseListUserOwnedGroupsResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n\n  const res = xmlParser.parse(data) as ListUserOwnedGroupsResponse;\n\n  let Groups = res.GfSpGetUserOwnedGroupsResponse.Groups || [];\n  if (Groups) {\n    if (!Array.isArray(Groups)) {\n      Groups = [Groups];\n    }\n\n    Groups = Groups.map((item) => {\n      return {\n        ...item,\n        CreateAt: Number(item.CreateAt),\n        CreateTime: Number(item.CreateTime),\n        UpdateAt: Number(item.UpdateAt),\n        UpdateTime: Number(item.UpdateTime),\n        // @ts-ignore\n        Removed: convertStrToBool(item.Removed),\n        Group: formatGroupInfo(item.Group),\n      };\n    });\n  }\n\n  res.GfSpGetUserOwnedGroupsResponse = {\n    Groups: Groups,\n  };\n\n  return res;\n};\n","import { VerifyPermissionResponse } from '@/types/sp/VerifyPermission';\nimport { XMLParser } from 'fast-xml-parser';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/verify_permission.md\nexport const parseVerifyPermissionResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as VerifyPermissionResponse;\n\n  res.QueryVerifyPermissionResponse = {\n    ...res.QueryVerifyPermissionResponse,\n    Effect: Number(res.QueryVerifyPermissionResponse.Effect),\n  };\n\n  return res;\n};\n","export const MsgSettleSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'global_virtual_group_family_id',\n      type: 'uint32',\n    },\n    {\n      name: 'global_virtual_group_ids',\n      type: 'uint32[]',\n    },\n    {\n      name: 'storage_provider',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n};\n","import {\n  QueryGlobalVirtualGroupByFamilyIDRequest,\n  QueryGlobalVirtualGroupByFamilyIDResponse,\n  QueryGlobalVirtualGroupFamiliesRequest,\n  QueryGlobalVirtualGroupFamiliesResponse,\n  QueryGlobalVirtualGroupFamilyRequest,\n  QueryGlobalVirtualGroupFamilyResponse,\n  QueryGlobalVirtualGroupRequest,\n  QueryGlobalVirtualGroupResponse,\n  QueryParamsResponse,\n  QuerySPAvailableGlobalVirtualGroupFamiliesRequest,\n  QuerySPAvailableGlobalVirtualGroupFamiliesResponse,\n  QuerySpOptimalGlobalVirtualGroupFamilyRequest,\n  QuerySpOptimalGlobalVirtualGroupFamilyResponse,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/virtualgroup/query';\nimport { MsgSettle } from '@bnb-chain/greenfield-cosmos-types/greenfield/virtualgroup/tx';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport { MsgSettleTypeUrl, TxResponse } from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport { TxClient } from '../clients/txClient';\nimport { MsgSettleSDKTypeEIP712 } from '../messages/greenfield/virtualgroup/MsgSettle';\n\nexport interface IVirtualGroup {\n  params(): Promise<QueryParamsResponse>;\n\n  getGlobalVirtualGroup(\n    request: QueryGlobalVirtualGroupRequest,\n  ): Promise<QueryGlobalVirtualGroupResponse>;\n\n  getGlobalVirtualGroupByFamilyID(\n    request: QueryGlobalVirtualGroupByFamilyIDRequest,\n  ): Promise<QueryGlobalVirtualGroupByFamilyIDResponse>;\n\n  getGlobalVirtualGroupFamilies(\n    request: QueryGlobalVirtualGroupFamiliesRequest,\n  ): Promise<QueryGlobalVirtualGroupFamiliesResponse>;\n\n  getGlobalVirtualGroupFamily(\n    request: QueryGlobalVirtualGroupFamilyRequest,\n  ): Promise<QueryGlobalVirtualGroupFamilyResponse>;\n\n  getSpOptimalGlobalVirtualGroupFamily(\n    request: QuerySpOptimalGlobalVirtualGroupFamilyRequest,\n  ): Promise<QuerySpOptimalGlobalVirtualGroupFamilyResponse>;\n\n  getSpAvailableGlobalVirtualGroupFamilies(\n    request: QuerySPAvailableGlobalVirtualGroupFamiliesRequest,\n  ): Promise<QuerySPAvailableGlobalVirtualGroupFamiliesResponse>;\n\n  settle(address: string, msg: MsgSettle): Promise<TxResponse>;\n}\n\n@injectable()\nexport class VirtualGroup implements IVirtualGroup {\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n  private queryClient = container.resolve(RpcQueryClient);\n\n  public async params() {\n    const rpc = await this.queryClient.getVirtualGroupClient();\n    return await rpc.Params();\n  }\n\n  public async getGlobalVirtualGroup(request: QueryGlobalVirtualGroupRequest) {\n    const rpc = await this.queryClient.getVirtualGroupClient();\n    return await rpc.GlobalVirtualGroup(request);\n  }\n\n  public async getGlobalVirtualGroupByFamilyID(request: QueryGlobalVirtualGroupByFamilyIDRequest) {\n    const rpc = await this.queryClient.getVirtualGroupClient();\n    return await rpc.GlobalVirtualGroupByFamilyID(request);\n  }\n\n  public async getGlobalVirtualGroupFamilies(request: QueryGlobalVirtualGroupFamiliesRequest) {\n    const rpc = await this.queryClient.getVirtualGroupClient();\n    return await rpc.GlobalVirtualGroupFamilies(request);\n  }\n\n  public async getGlobalVirtualGroupFamily(request: QueryGlobalVirtualGroupFamilyRequest) {\n    const rpc = await this.queryClient.getVirtualGroupClient();\n    return await rpc.GlobalVirtualGroupFamily(request);\n  }\n\n  public async getSpOptimalGlobalVirtualGroupFamily(\n    request: QuerySpOptimalGlobalVirtualGroupFamilyRequest,\n  ) {\n    const rpc = await this.queryClient.getVirtualGroupClient();\n    return await rpc.QuerySpOptimalGlobalVirtualGroupFamily(request);\n  }\n\n  public async getSpAvailableGlobalVirtualGroupFamilies(\n    request: QuerySPAvailableGlobalVirtualGroupFamiliesRequest,\n  ) {\n    const rpc = await this.queryClient.getVirtualGroupClient();\n    return await rpc.QuerySpAvailableGlobalVirtualGroupFamilies(request);\n  }\n\n  public async settle(address: string, msg: MsgSettle) {\n    return await this.txClient.tx(\n      MsgSettleTypeUrl,\n      address,\n      MsgSettleSDKTypeEIP712,\n      MsgSettle.toSDK(msg),\n      MsgSettle.encode(msg).finish(),\n    );\n  }\n}\n","import { encodePath, HTTPHeaderUserAddress } from '../clients/spclient/auth';\nimport {\n  getListGroupMetaInfo,\n  parseListGroupsResponse,\n} from '../clients/spclient/spApis/listGroups';\nimport { parseListGroupsMembersResponse } from '../clients/spclient/spApis/listGroupsMembers';\nimport { parseListUserGroupsResponse } from '../clients/spclient/spApis/listUserGroups';\nimport { parseListUserOwnedGroupsResponse } from '../clients/spclient/spApis/listUserOwnedGroups';\nimport { parseError } from '../clients/spclient/spApis/parseError';\nimport { parseVerifyPermissionResponse } from '../clients/spclient/spApis/verifyPermission';\nimport { SpClient } from '../clients/spclient/spClient';\nimport { METHOD_GET, NORMAL_ERROR_CODE } from '../constants/http';\nimport { ListUserOwnedGroupsResponse } from '../types/sp/ListUserOwnedGroups';\nimport { actionTypeFromJSON } from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';\nimport {\n  QueryGlobalSpStorePriceByTimeRequest,\n  QueryGlobalSpStorePriceByTimeResponse,\n  QueryParamsResponse,\n  QuerySpStoragePriceRequest,\n  QuerySpStoragePriceResponse,\n  QueryStorageProviderByOperatorAddressRequest,\n  QueryStorageProviderByOperatorAddressResponse,\n  QueryStorageProviderMaintenanceRecordsRequest,\n  QueryStorageProviderMaintenanceRecordsResponse,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/query';\nimport { Status, StorageProvider } from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/types';\nimport { container, injectable } from 'tsyringe';\nimport type {\n  ListGroupsMembersRequest,\n  ListGroupsMembersResponse,\n  ListGroupsResponse,\n  ListGroupsResquest,\n  ListUserGroupsResponse,\n  ListUserGroupsResquest,\n  ListUserOwnedGroupsRequest,\n  SpResponse,\n  VerifyPermissionRequest,\n  VerifyPermissionResponse,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport { Bucket } from './bucket';\nimport { VirtualGroup } from './virtualGroup';\n\nexport interface ISp {\n  /**\n   * return the storage provider info on chain\n\t  isInService indicates if only display the sp with STATUS_IN_SERVICE status\n   */\n  getStorageProviders(): Promise<StorageProvider[]>;\n\n  /**\n   * return the sp info with the sp chain address\n   */\n  getStorageProviderInfo(spId: number): Promise<StorageProvider | undefined>;\n\n  /**\n   * get the latest storage price of specific sp\n   */\n  getQuerySpStoragePrice(request: QuerySpStoragePriceRequest): Promise<QuerySpStoragePriceResponse>;\n\n  /**\n   * get global store price by time\n   */\n  getQueryGlobalSpStorePriceByTime(\n    request: QueryGlobalSpStorePriceByTimeRequest,\n  ): Promise<QueryGlobalSpStorePriceByTimeResponse>;\n\n  /**\n   * Queries a StorageProvider by specify operator address.\n   */\n  getStorageProviderByOperatorAddress(\n    request: QueryStorageProviderByOperatorAddressRequest,\n  ): Promise<QueryStorageProviderByOperatorAddressResponse>;\n\n  /**\n   * Queries a StorageProvider by specify operator address.\n   */\n  getStorageProviderMaintenanceRecordsByOperatorAddress(\n    request: QueryStorageProviderMaintenanceRecordsRequest,\n  ): Promise<QueryStorageProviderMaintenanceRecordsResponse>;\n\n  params(): Promise<QueryParamsResponse>;\n\n  listGroups(params: ListGroupsResquest): Promise<SpResponse<ListGroupsResponse>>;\n\n  listGroupsMembers(\n    params: ListGroupsMembersRequest,\n  ): Promise<SpResponse<ListGroupsMembersResponse>>;\n\n  listUserGroups(params: ListUserGroupsResquest): Promise<SpResponse<ListUserGroupsResponse>>;\n\n  listUserOwnedGroups(\n    params: ListUserOwnedGroupsRequest,\n  ): Promise<SpResponse<ListUserOwnedGroupsResponse>>;\n\n  getSPUrlByBucket(bucketName: string): Promise<string>;\n\n  getSPUrlByPrimaryAddr(parimaryAddr: string): Promise<string>;\n\n  getSPUrlById(primaryId: number): Promise<string>;\n\n  verifyPermission(params: VerifyPermissionRequest): Promise<SpResponse<VerifyPermissionResponse>>;\n}\n\n@injectable()\nexport class Sp implements ISp {\n  private bucket = container.resolve(Bucket);\n  private queryClient = container.resolve(RpcQueryClient);\n  private virtualGroup = container.resolve(VirtualGroup);\n  private spClient = container.resolve(SpClient);\n\n  public async getStorageProviders() {\n    const rpc = await this.queryClient.getSpQueryClient();\n    const res = await rpc.StorageProviders();\n    return res.sps;\n  }\n\n  public async getStorageProviderInfo(spId: number) {\n    const rpc = await this.queryClient.getSpQueryClient();\n    const res = await rpc.StorageProvider({\n      id: spId,\n    });\n    return res.storageProvider;\n  }\n\n  public async getQuerySpStoragePrice(request: QuerySpStoragePriceRequest) {\n    const rpc = await this.queryClient.getSpQueryClient();\n    return await rpc.QuerySpStoragePrice(request);\n  }\n\n  public async getQueryGlobalSpStorePriceByTime(request: QueryGlobalSpStorePriceByTimeRequest) {\n    const rpc = await this.queryClient.getSpQueryClient();\n    return await rpc.QueryGlobalSpStorePriceByTime(request);\n  }\n\n  public async getStorageProviderByOperatorAddress(\n    request: QueryStorageProviderByOperatorAddressRequest,\n  ) {\n    const rpc = await this.queryClient.getSpQueryClient();\n    return await rpc.StorageProviderByOperatorAddress(request);\n  }\n\n  public async getStorageProviderMaintenanceRecordsByOperatorAddress(\n    request: QueryStorageProviderMaintenanceRecordsRequest,\n  ) {\n    const rpc = await this.queryClient.getSpQueryClient();\n    return await rpc.StorageProviderMaintenanceRecordsByOperatorAddress(request);\n  }\n\n  public async getSPUrlById(primaryId: number) {\n    const spList = await this.getStorageProviders();\n    return spList.filter((sp) => sp.id === primaryId)[0].endpoint;\n  }\n\n  public async getSPUrlByBucket(bucketName: string) {\n    const { bucketInfo } = await this.bucket.headBucket(bucketName);\n\n    if (!bucketInfo) throw new Error('Get bucket info error');\n\n    const familyResp = await this.virtualGroup.getGlobalVirtualGroupFamily({\n      familyId: bucketInfo.globalVirtualGroupFamilyId,\n    });\n\n    const spList = await this.getStorageProviders();\n    const spId = familyResp.globalVirtualGroupFamily?.primarySpId;\n\n    return spList.filter((sp) => sp.id === spId)[0].endpoint;\n  }\n\n  public async getSPUrlByPrimaryAddr(parimaryAddr: string) {\n    const sps = await this.getStorageProviders();\n    return sps.filter((sp) => sp.operatorAddress === parimaryAddr)[0].endpoint;\n  }\n\n  public async params() {\n    const rpc = await this.queryClient.getSpQueryClient();\n    return await rpc.Params();\n  }\n\n  public async getInServiceSP() {\n    const sps = await this.getStorageProviders();\n    const spList = sps.filter((sp) => sp.status === Status.STATUS_IN_SERVICE);\n    if (spList.length === 0) throw new Error('No storage provider found');\n    return spList[0];\n  }\n\n  public async listGroups(params: ListGroupsResquest) {\n    try {\n      const { name, prefix } = params;\n\n      let res: ListGroupsResponse = {\n        GfSpGetGroupListResponse: {\n          Groups: [],\n          Count: 0,\n        },\n      };\n\n      if (name === '' || prefix === '') {\n        return {\n          code: 0,\n          message: 'success',\n          body: res,\n        };\n      }\n\n      const sp = await this.getInServiceSP();\n      const { url } = getListGroupMetaInfo(sp.endpoint, params);\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers: {},\n          method: METHOD_GET,\n        },\n        3000,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      res = await parseListGroupsResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'success',\n        statusCode: status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async verifyPermission(params: VerifyPermissionRequest) {\n    try {\n      const { action, bucketName, objectName, operator } = params;\n\n      const sp = await this.getInServiceSP();\n      let url = `${sp.endpoint}/permission/${operator}/${bucketName}/${actionTypeFromJSON(action)}`;\n\n      if (objectName) {\n        url += `?object=${encodePath(objectName)}`;\n      }\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers: {},\n          method: METHOD_GET,\n        },\n        3000,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = await parseVerifyPermissionResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'success',\n        statusCode: status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async listGroupsMembers(params: ListGroupsMembersRequest) {\n    try {\n      const { groupId, limit, startAfter } = params;\n      const sp = await this.getInServiceSP();\n      let url = `${sp.endpoint}?group-members&group-id=${groupId}`;\n\n      if (limit) {\n        url += `&limit=${limit}`;\n      }\n      if (startAfter) {\n        url += `&start-after=${startAfter}`;\n      }\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers: {},\n          method: METHOD_GET,\n        },\n        3000,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = await parseListGroupsMembersResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'success',\n        statusCode: status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async listUserGroups(params: ListUserGroupsResquest) {\n    try {\n      const { address, limit, startAfter } = params;\n      const sp = await this.getInServiceSP();\n      let url = `${sp.endpoint}?user-groups`;\n\n      if (limit) {\n        url += `&limit=${limit}`;\n      }\n      if (startAfter) {\n        url += `&start-after=${startAfter}`;\n      }\n\n      const headers = new Headers({\n        [HTTPHeaderUserAddress]: address,\n      });\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers,\n          method: METHOD_GET,\n        },\n        3000,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = await parseListUserGroupsResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'success',\n        statusCode: status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async listUserOwnedGroups(params: ListUserOwnedGroupsRequest) {\n    try {\n      const { address, limit, startAfter } = params;\n      const sp = await this.getInServiceSP();\n      let url = `${sp.endpoint}?owned-groups`;\n\n      if (limit) {\n        url += `&limit=${limit}`;\n      }\n      if (startAfter) {\n        url += `&start-after=${startAfter}`;\n      }\n\n      const headers = new Headers({\n        [HTTPHeaderUserAddress]: address,\n      });\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers,\n          method: METHOD_GET,\n        },\n        3000,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = await parseListUserOwnedGroupsResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'success',\n        statusCode: status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n}\n","import { TxClient } from '../clients/txClient';\nimport { getMsgPutPolicySDKTypeEIP712 } from '../messages/greenfield';\nimport { MsgDeletePolicySDKTypeEIP712 } from '../messages/greenfield/storage/MsgDeletePolicy';\nimport {\n  QueryGroupMembersExistRequest,\n  QueryGroupMembersExistResponse,\n  QueryGroupsExistByIdRequest,\n  QueryGroupsExistRequest,\n  QueryGroupsExistResponse,\n  QueryLockFeeRequest,\n  QueryLockFeeResponse,\n  QueryParamsResponse,\n  QueryPolicyByIdRequest,\n  QueryPolicyByIdResponse,\n  QueryPolicyForAccountRequest,\n  QueryPolicyForAccountResponse,\n  QueryPolicyForGroupRequest,\n  QueryPolicyForGroupResponse,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';\nimport {\n  MsgDeletePolicy,\n  MsgPutPolicy,\n  MsgSetTag,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport {\n  fromTimestamp,\n  MsgDeletePolicyTypeUrl,\n  MsgPutPolicyTypeUrl,\n  MsgSetTagTypeUrl,\n  TxResponse,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport { getMsgSetTagSDKTypeEIP712 } from '@/messages/greenfield/storage/MsgSetTag';\n\nexport interface IStorage {\n  params(): Promise<QueryParamsResponse>;\n\n  putPolicy(msg: MsgPutPolicy): Promise<TxResponse>;\n\n  deletePolicy(msg: MsgDeletePolicy): Promise<TxResponse>;\n\n  setTag(msg: MsgSetTag): Promise<TxResponse>;\n\n  getPolicyForGroup(request: QueryPolicyForGroupRequest): Promise<QueryPolicyForGroupResponse>;\n\n  getQueryPolicyForAccount(\n    request: QueryPolicyForAccountRequest,\n  ): Promise<QueryPolicyForAccountResponse>;\n\n  getQueryPolicyForGroup(request: QueryPolicyForGroupRequest): Promise<QueryPolicyForGroupResponse>;\n\n  getQueryPolicyById(request: QueryPolicyByIdRequest): Promise<QueryPolicyByIdResponse>;\n\n  queryLockFee(request: QueryLockFeeRequest): Promise<QueryLockFeeResponse>;\n\n  queryGroupMembersExist(\n    request: QueryGroupMembersExistRequest,\n  ): Promise<QueryGroupMembersExistResponse>;\n\n  queryGroupExist(request: QueryGroupsExistRequest): Promise<QueryGroupsExistResponse>;\n\n  queryGroupsExistById(request: QueryGroupsExistByIdRequest): Promise<QueryGroupsExistResponse>;\n}\n\n@injectable()\nexport class Storage implements IStorage {\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n  private queryClient = container.resolve(RpcQueryClient);\n\n  public async params() {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.Params();\n  }\n\n  public async putPolicy(msg: MsgPutPolicy) {\n    const toSdk = MsgPutPolicy.toSDK(msg);\n    return await this.txClient.tx(\n      MsgPutPolicyTypeUrl,\n      msg.operator,\n      getMsgPutPolicySDKTypeEIP712(msg.statements[0].resources),\n      {\n        ...toSdk,\n        expiration_time: msg.expirationTime ? fromTimestamp(msg.expirationTime) : '',\n        statements: toSdk.statements.map((e) => {\n          if (e.expiration_time) {\n            // @ts-ignore\n            e.expiration_time = fromTimestamp(e.expiration_time);\n          } else {\n            // @ts-ignore\n            e.expiration_time = '';\n          }\n\n          if (e.resources.length == 0) {\n            // @ts-ignore\n            e.resources = null;\n          }\n          return e;\n        }),\n      },\n      MsgPutPolicy.encode(msg).finish(),\n    );\n  }\n\n  public async deletePolicy(msg: MsgDeletePolicy) {\n    return await this.txClient.tx(\n      MsgDeletePolicyTypeUrl,\n      msg.operator,\n      MsgDeletePolicySDKTypeEIP712,\n      MsgDeletePolicy.toSDK(msg),\n      MsgDeletePolicy.encode(msg).finish(),\n    );\n  }\n\n  public async setTag(msg: MsgSetTag) {\n    const isTagsEmpty = msg?.tags?.tags?.length === 0;\n\n    const MsgSetTagSDKTypeEIP712 = getMsgSetTagSDKTypeEIP712(isTagsEmpty);\n\n    return await this.txClient.tx(\n      MsgSetTagTypeUrl,\n      msg.operator,\n      MsgSetTagSDKTypeEIP712,\n      MsgSetTag.toSDK(msg),\n      MsgSetTag.encode(msg).finish(),\n    );\n  }\n\n  public async getPolicyForGroup(request: QueryPolicyForGroupRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.QueryPolicyForGroup(request);\n  }\n\n  public async getQueryPolicyForAccount(request: QueryPolicyForAccountRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.QueryPolicyForAccount(request);\n  }\n\n  public async getQueryPolicyForGroup(request: QueryPolicyForGroupRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.QueryPolicyForGroup(request);\n  }\n\n  public async getQueryPolicyById(request: QueryPolicyByIdRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.QueryPolicyById(request);\n  }\n\n  public async queryLockFee(request: QueryLockFeeRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.QueryLockFee(request);\n  }\n\n  public async queryGroupMembersExist(request: QueryGroupMembersExistRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.QueryGroupMembersExist(request);\n  }\n\n  public async queryGroupExist(request: QueryGroupsExistRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.QueryGroupsExist(request);\n  }\n\n  public async queryGroupsExistById(request: QueryGroupsExistByIdRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.QueryGroupsExistById(request);\n  }\n}\n","export const MsgCancelMigrateBucketSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'bucket_name',\n      type: 'string',\n    },\n    {\n      name: 'operator',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n} as const;\n","import {\n  MsgCreateBucketSDKTypeEIP712,\n  MsgDeleteBucketSDKTypeEIP712,\n  MsgMigrateBucketSDKTypeEIP712,\n  MsgToggleSPAsDelegatedAgentSDKTypeEIP712,\n  MsgUpdateBucketInfoSDKTypeEIP712,\n} from '@/messages/greenfield';\nimport { MsgSetBucketFlowRateLimitSDKTypeEIP712 } from '@/messages/greenfield/storage/MsgSetBucketFlowRateLimit';\nimport { assertAuthType, assertStringRequire } from '@/utils/asserts/params';\nimport { UInt64Value } from '@bnb-chain/greenfield-cosmos-types/greenfield/common/wrapper';\nimport {\n  ActionType,\n  Principal,\n  PrincipalType,\n  principalTypeFromJSON,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';\nimport { visibilityTypeFromJSON } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/common';\nimport {\n  QueryBucketNFTResponse,\n  QueryHeadBucketExtraResponse,\n  QueryHeadBucketResponse,\n  QueryNFTRequest,\n  QueryPolicyForAccountRequest,\n  QueryPolicyForAccountResponse,\n  QueryVerifyPermissionResponse,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';\nimport {\n  MsgCancelMigrateBucket,\n  MsgCreateBucket,\n  MsgDeleteBucket,\n  MsgDeletePolicy,\n  MsgMigrateBucket,\n  MsgPutPolicy,\n  MsgSetBucketFlowRateLimit,\n  MsgToggleSPAsDelegatedAgent,\n  MsgUpdateBucketInfo,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';\nimport { PickVGFStrategy } from '@bnb-chain/greenfield-cosmos-types/greenfield/virtualgroup/common';\nimport { bytesFromBase64 } from '@bnb-chain/greenfield-cosmos-types/helpers';\nimport { Headers } from 'cross-fetch';\nimport Long from 'long';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport {\n  AuthType,\n  GRNToString,\n  MsgCancelMigrateBucketTypeUrl,\n  MsgCreateBucketTypeUrl,\n  MsgDeleteBucketTypeUrl,\n  MsgMigrateBucketTypeUrl,\n  MsgSetBucketFlowRateLimitTypeUrl,\n  MsgToggleSPAsDelegatedAgentTypeUrl,\n  MsgUpdateBucketInfoTypeUrl,\n  TxResponse,\n  newBucketGRN,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport { HTTPHeaderUserAddress } from '../clients/spclient/auth';\nimport { getApprovalMetaInfo } from '../clients/spclient/spApis/approval';\nimport {\n  getBucketMetaInfo,\n  parseGetBucketMetaResponse,\n} from '../clients/spclient/spApis/getBucketMeta';\nimport {\n  getUserBucketMetaInfo,\n  parseGetUserBucketsResponse,\n} from '../clients/spclient/spApis/getUserBuckets';\nimport {\n  getListBucketReadRecordMetaInfo,\n  parseListBucketReadRecordResponse,\n} from '../clients/spclient/spApis/listBucketReadRecords';\nimport {\n  getListBucketsByIDsMetaInfo,\n  parseListBucketsByIdsResponse,\n} from '../clients/spclient/spApis/listBucketsByIds';\nimport {\n  getListBucketByPaymentMetaInfo,\n  parseListBucketByPaymentResponse,\n} from '../clients/spclient/spApis/listBucketsByPayment';\nimport { parseError } from '../clients/spclient/spApis/parseError';\nimport {\n  getQueryBucketReadQuotaMetaInfo,\n  parseReadQuotaResponse,\n} from '../clients/spclient/spApis/queryBucketReadQuota';\nimport { SpClient } from '../clients/spclient/spClient';\nimport { TxClient } from '../clients/txClient';\nimport { METHOD_GET, NORMAL_ERROR_CODE } from '../constants/http';\nimport type {\n  GetBucketMetaRequest,\n  GetBucketMetaResponse,\n  GetUserBucketsRequest,\n  GetUserBucketsResponse,\n  IQuotaProps,\n  ListBucketReadRecordRequest,\n  ListBucketReadRecordResponse,\n  ListBucketsByIDsRequest,\n  ListBucketsByIDsResponse,\n  ListBucketsByPaymentAccountRequest,\n  ListBucketsByPaymentAccountResponse,\n  MigrateBucketApprovalRequest,\n  MigrateBucketApprovalResponse,\n  ReadQuotaRequest,\n  SpResponse,\n} from '../types/sp';\nimport { verifyAddress, verifyBucketName, verifyUrl } from '../utils/asserts/s3';\nimport { decodeObjectFromHexString } from '../utils/encoding';\nimport { Sp } from './sp';\nimport { Storage } from './storage';\nimport { VirtualGroup } from './virtualGroup';\nimport { MsgCancelMigrateBucketSDKTypeEIP712 } from '@/messages/greenfield/storage/MsgCancelMigrateBucket';\n\nexport interface IBucket {\n  /**\n   * send createBucket txn to greenfield chain\n   */\n  createBucket(msg: MsgCreateBucket): Promise<TxResponse>;\n\n  deleteBucket(msg: MsgDeleteBucket): Promise<TxResponse>;\n\n  deleteBucketPolicy(\n    operator: string,\n    bucketName: string,\n    principalAddr: string,\n    principalType: keyof typeof PrincipalType,\n  ): Promise<TxResponse>;\n\n  toggleSpAsDelegatedAgent(msg: MsgToggleSPAsDelegatedAgent): Promise<TxResponse>;\n\n  getBucketMeta(params: GetBucketMetaRequest): Promise<SpResponse<GetBucketMetaResponse>>;\n\n  getBucketPolicy(request: QueryPolicyForAccountRequest): Promise<QueryPolicyForAccountResponse>;\n\n  /**\n   * return quota info of bucket of current month, include chain quota, free quota and consumed quota\n   */\n  getBucketReadQuota(\n    configParam: ReadQuotaRequest,\n    authType: AuthType,\n  ): Promise<SpResponse<IQuotaProps>>;\n\n  getMigrateBucketApproval(\n    params: MigrateBucketApprovalRequest,\n    authType: AuthType,\n  ): Promise<SpResponse<string>>;\n\n  /**\n   * check if the permission of bucket is allowed to the user.\n   */\n  getVerifyPermission(\n    bucketName: string,\n    operator: string,\n    actionType: ActionType,\n  ): Promise<QueryVerifyPermissionResponse>;\n\n  /**\n   * query the bucketInfo on chain, return the bucket info if exists\n   */\n  headBucket(bucketName: string): Promise<QueryHeadBucketResponse>;\n\n  /**\n   * query the bucketInfo on chain by bucketId, return the bucket info if exists\n   */\n  headBucketById(bucketId: string): Promise<QueryHeadBucketResponse>;\n\n  headBucketExtra(bucketName: string): Promise<QueryHeadBucketExtraResponse>;\n\n  headBucketNFT(request: QueryNFTRequest): Promise<QueryBucketNFTResponse>;\n\n  listBucketReadRecords(\n    params: ListBucketReadRecordRequest,\n    authType: AuthType,\n  ): Promise<SpResponse<ListBucketReadRecordResponse>>;\n\n  listBuckets(\n    configParam: GetUserBucketsRequest,\n  ): Promise<SpResponse<GetUserBucketsResponse['GfSpGetUserBucketsResponse']['Buckets']>>;\n\n  listBucketsByIds(params: ListBucketsByIDsRequest): Promise<SpResponse<ListBucketsByIDsResponse>>;\n\n  /**\n   * ListBucketsByPaymentAccount list buckets by payment account\n   */\n  listBucketsByPaymentAccount(\n    params: ListBucketsByPaymentAccountRequest,\n  ): Promise<SpResponse<ListBucketsByPaymentAccountResponse>>;\n\n  migrateBucket(params: MigrateBucketApprovalRequest, authType: AuthType): Promise<TxResponse>;\n\n  cancelMigrateBucket(msg: MsgCancelMigrateBucket): Promise<TxResponse>;\n\n  putBucketPolicy(bucketName: string, srcMsg: Omit<MsgPutPolicy, 'resource'>): Promise<TxResponse>;\n\n  /**\n   * Update the bucket meta on chain, including read quota, payment address or visibility. It will send the MsgUpdateBucketInfo msg to greenfield to update the meta.\n   */\n  updateBucketInfo(\n    srcMsg: Omit<MsgUpdateBucketInfo, 'chargedReadQuota'> & { chargedReadQuota?: string },\n  ): Promise<TxResponse>;\n\n  /**\n   * Get the flow rate limit of the bucket.\n   */\n  setPaymentAccountFlowRateLimit(msg: MsgSetBucketFlowRateLimit): Promise<TxResponse>;\n}\n\n@injectable()\nexport class Bucket implements IBucket {\n  constructor(\n    @inject(delay(() => TxClient)) private txClient: TxClient,\n    @inject(delay(() => Sp)) private sp: Sp,\n    @inject(delay(() => Storage)) private storage: Storage,\n    @inject(delay(() => VirtualGroup)) private virtualGroup: VirtualGroup,\n  ) {}\n\n  private queryClient = container.resolve(RpcQueryClient);\n  private spClient = container.resolve(SpClient);\n\n  public async setPaymentAccountFlowRateLimit(msg: MsgSetBucketFlowRateLimit) {\n    return await this.txClient.tx(\n      MsgSetBucketFlowRateLimitTypeUrl,\n      msg.operator,\n      MsgSetBucketFlowRateLimitSDKTypeEIP712,\n      MsgSetBucketFlowRateLimit.toSDK(msg),\n      MsgSetBucketFlowRateLimit.encode(msg).finish(),\n    );\n  }\n\n  public async createBucket(msg: MsgCreateBucket) {\n    assertStringRequire(msg.primarySpAddress, 'Primary sp address is missing');\n    assertStringRequire(msg.creator, 'Empty creator address');\n    verifyBucketName(msg.bucketName);\n\n    const { storageProvider } = await this.sp.getStorageProviderByOperatorAddress({\n      operatorAddress: msg.primarySpAddress,\n    });\n\n    if (!storageProvider) {\n      throw new Error(`Storage provider ${msg.primarySpAddress} not found`);\n    }\n\n    const { globalVirtualGroupFamilyId } =\n      await this.virtualGroup.getSpOptimalGlobalVirtualGroupFamily({\n        spId: storageProvider.id,\n        pickVgfStrategy: PickVGFStrategy.Strategy_Oldest_Create_Time,\n      });\n\n    const createBucketMsg: MsgCreateBucket = {\n      ...msg,\n      primarySpApproval: {\n        globalVirtualGroupFamilyId: globalVirtualGroupFamilyId,\n        expiredHeight: Long.fromInt(0),\n        sig: Uint8Array.from([]),\n      },\n    };\n\n    return await this.txClient.tx(\n      MsgCreateBucketTypeUrl,\n      msg.creator,\n      MsgCreateBucketSDKTypeEIP712,\n      {\n        ...MsgCreateBucket.toSDK(createBucketMsg),\n        primary_sp_approval: {\n          expired_height: '0',\n          global_virtual_group_family_id: globalVirtualGroupFamilyId,\n        },\n        charged_read_quota: createBucketMsg.chargedReadQuota.toString(),\n      },\n      MsgCreateBucket.encode(createBucketMsg).finish(),\n    );\n  }\n\n  public async deleteBucket(msg: MsgDeleteBucket) {\n    return await this.txClient.tx(\n      MsgDeleteBucketTypeUrl,\n      msg.operator,\n      MsgDeleteBucketSDKTypeEIP712,\n      MsgDeleteBucket.toSDK(msg),\n      MsgDeleteBucket.encode(msg).finish(),\n    );\n  }\n\n  public async toggleSpAsDelegatedAgent(msg: MsgToggleSPAsDelegatedAgent) {\n    const { bucketInfo } = await this.headBucket(msg.bucketName);\n\n    if (!bucketInfo) {\n      throw new Error(`Bucket ${msg.bucketName} not found`);\n    }\n\n    return await this.txClient.tx(\n      MsgToggleSPAsDelegatedAgentTypeUrl,\n      msg.operator,\n      MsgToggleSPAsDelegatedAgentSDKTypeEIP712,\n      MsgToggleSPAsDelegatedAgent.toSDK(msg),\n      MsgToggleSPAsDelegatedAgent.encode(msg).finish(),\n    );\n  }\n\n  public async headBucket(bucketName: string) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.HeadBucket({\n      bucketName,\n    });\n  }\n\n  public async headBucketById(bucketId: string) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.HeadBucketById({\n      bucketId,\n    });\n  }\n\n  public async headBucketExtra(bucketName: string) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.HeadBucketExtra({\n      bucketName,\n    });\n  }\n\n  public async headBucketNFT(request: QueryNFTRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.HeadBucketNFT(request);\n  }\n\n  public async getVerifyPermission(bucketName: string, operator: string, actionType: ActionType) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return rpc.VerifyPermission({\n      bucketName,\n      operator,\n      objectName: '',\n      actionType,\n    });\n  }\n\n  public async listBuckets(configParam: GetUserBucketsRequest) {\n    try {\n      const { address, duration = 30000, endpoint } = configParam;\n      verifyAddress(address);\n      verifyUrl(endpoint);\n\n      const { url } = getUserBucketMetaInfo(endpoint);\n\n      const headers = new Headers({\n        [HTTPHeaderUserAddress]: address,\n      });\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers,\n          method: METHOD_GET,\n        },\n        duration,\n      );\n      const { status } = result;\n\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'Get bucket error.',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = await parseGetUserBucketsResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'Get bucket success.',\n        statusCode: status,\n        body: res.GfSpGetUserBucketsResponse.Buckets,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async getBucketReadQuota(\n    params: ReadQuotaRequest,\n    authType: AuthType,\n  ): Promise<SpResponse<IQuotaProps>> {\n    try {\n      const { bucketName, duration = 30000 } = params;\n\n      verifyBucketName(bucketName);\n      assertAuthType(authType);\n\n      let endpoint = params.endpoint;\n      if (!endpoint) {\n        endpoint = await this.sp.getSPUrlByBucket(bucketName);\n      }\n\n      const { url, optionsWithOutHeaders, reqMeta } = await getQueryBucketReadQuotaMetaInfo(\n        endpoint,\n        params,\n      );\n      const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          ...optionsWithOutHeaders,\n          headers: signHeaders,\n        },\n        duration,\n        {\n          code: -1,\n          message: 'Get Bucket Quota error.',\n        },\n      );\n\n      const xmlData = await result.text();\n      const res = await parseReadQuotaResponse(xmlData);\n\n      return {\n        code: 0,\n        body: {\n          readQuota: Number(res.GetReadQuotaResult.ReadQuotaSize ?? '0'),\n          freeQuota: Number(res.GetReadQuotaResult.SPFreeReadQuotaSize ?? '0'),\n          consumedQuota: Number(res.GetReadQuotaResult.ReadConsumedSize ?? '0'),\n          freeConsumedSize: Number(res.GetReadQuotaResult.FreeConsumedSize ?? '0'),\n          monthlyFreeQuota: Number(res.GetReadQuotaResult.MonthlyFreeQuota ?? '0'),\n          monthlyQuotaConsumedSize: Number(res.GetReadQuotaResult.MonthlyQuotaConsumedSize ?? '0'),\n        },\n        message: 'Get bucket read quota.',\n        statusCode: result.status,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async updateBucketInfo(\n    srcMsg: Omit<MsgUpdateBucketInfo, 'chargedReadQuota'> & { chargedReadQuota: string },\n  ) {\n    const msg: MsgUpdateBucketInfo = {\n      ...srcMsg,\n      visibility: visibilityTypeFromJSON(srcMsg.visibility),\n      chargedReadQuota: UInt64Value.fromPartial({\n        value: Long.fromString(srcMsg.chargedReadQuota),\n      }),\n    };\n\n    return await this.txClient.tx(\n      MsgUpdateBucketInfoTypeUrl,\n      msg.operator,\n      MsgUpdateBucketInfoSDKTypeEIP712,\n      {\n        ...MsgUpdateBucketInfo.toSDK(msg),\n        charged_read_quota: {\n          value: srcMsg.chargedReadQuota,\n        },\n      },\n      MsgUpdateBucketInfo.encode(msg).finish(),\n    );\n  }\n\n  public async putBucketPolicy(bucketName: string, srcMsg: Omit<MsgPutPolicy, 'resource'>) {\n    const resource = GRNToString(newBucketGRN(bucketName));\n    const msg: MsgPutPolicy = {\n      ...srcMsg,\n      resource,\n    };\n\n    return this.storage.putPolicy(msg);\n  }\n\n  public async deleteBucketPolicy(\n    operator: string,\n    bucketName: string,\n    principalAddr: string,\n    principalType: keyof typeof PrincipalType,\n  ) {\n    const resource = GRNToString(newBucketGRN(bucketName));\n    const principal: Principal = {\n      type: principalTypeFromJSON(principalType),\n      value: principalAddr,\n    };\n\n    const msg: MsgDeletePolicy = {\n      resource,\n      principal,\n      operator: operator,\n    };\n    return await this.storage.deletePolicy(msg);\n  }\n\n  public async getBucketPolicy(request: QueryPolicyForAccountRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return rpc.QueryPolicyForAccount(request);\n  }\n\n  public async getMigrateBucketApproval(params: MigrateBucketApprovalRequest, authType: AuthType) {\n    assertAuthType(authType);\n    const { bucketName, operator, dstPrimarySpId } = params;\n\n    try {\n      let endpoint = params.endpoint;\n      if (!endpoint) {\n        endpoint = await this.sp.getSPUrlById(params.dstPrimarySpId);\n      }\n\n      const { reqMeta, optionsWithOutHeaders, url } =\n        getApprovalMetaInfo<MigrateBucketApprovalResponse>(endpoint, 'MigrateBucket', {\n          operator: operator,\n          bucket_name: bucketName,\n          dst_primary_sp_id: dstPrimarySpId,\n          dst_primary_sp_approval: {\n            expired_height: '0',\n            sig: '',\n            global_virtual_group_family_id: 0,\n          },\n        });\n\n      const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          ...optionsWithOutHeaders,\n          headers: signHeaders,\n        },\n        30000,\n      );\n\n      const signedMsgString = result.headers.get('X-Gnfd-Signed-Msg') || '';\n      const signedMsg = decodeObjectFromHexString(signedMsgString) as MigrateBucketApprovalResponse;\n\n      return {\n        code: 0,\n        message: 'Get migrate bucket approval success.',\n        body: signedMsgString,\n        statusCode: result.status,\n        signedMsg: signedMsg,\n      };\n    } catch (error: any) {\n      throw {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async migrateBucket(params: MigrateBucketApprovalRequest, authType: AuthType) {\n    assertAuthType(authType);\n\n    const { signedMsg } = await this.getMigrateBucketApproval(params, authType);\n    if (!signedMsg) {\n      throw new Error('Get migrate bucket approval error');\n    }\n\n    const msg: MsgMigrateBucket = {\n      bucketName: signedMsg.bucket_name,\n      operator: signedMsg.operator,\n      dstPrimarySpId: signedMsg.dst_primary_sp_id,\n      dstPrimarySpApproval: {\n        expiredHeight: Long.fromString(signedMsg.dst_primary_sp_approval.expired_height),\n        globalVirtualGroupFamilyId:\n          signedMsg.dst_primary_sp_approval.global_virtual_group_family_id,\n        sig: bytesFromBase64(signedMsg.dst_primary_sp_approval.sig),\n      },\n    };\n\n    return await this.migrateBucketTx(msg, signedMsg);\n  }\n\n  public async cancelMigrateBucket(msg: MsgCancelMigrateBucket): Promise<TxResponse> {\n    return await this.txClient.tx(\n      MsgCancelMigrateBucketTypeUrl,\n      msg.operator,\n      MsgCancelMigrateBucketSDKTypeEIP712,\n      MsgCancelMigrateBucket.toSDK(msg),\n      MsgCancelMigrateBucket.encode(msg).finish(),\n    );\n  }\n\n  private async migrateBucketTx(msg: MsgMigrateBucket, signedMsg: MigrateBucketApprovalResponse) {\n    return await this.txClient.tx(\n      MsgMigrateBucketTypeUrl,\n      msg.operator,\n      MsgMigrateBucketSDKTypeEIP712,\n      {\n        ...signedMsg,\n        type: MsgMigrateBucketTypeUrl,\n        primary_sp_approval: {\n          expired_height: signedMsg.dst_primary_sp_approval.expired_height,\n          global_virtual_group_family_id:\n            signedMsg.dst_primary_sp_approval.global_virtual_group_family_id,\n          sig: signedMsg.dst_primary_sp_approval.sig,\n        },\n      },\n      MsgMigrateBucket.encode(msg).finish(),\n    );\n  }\n\n  public async getBucketMeta(params: GetBucketMetaRequest) {\n    const { bucketName } = params;\n    verifyBucketName(bucketName);\n\n    let endpoint = params.endpoint;\n    if (!endpoint) {\n      endpoint = await this.sp.getSPUrlByBucket(bucketName);\n    }\n\n    const { url } = getBucketMetaInfo(endpoint, params);\n\n    const result = await this.spClient.callApi(url, {\n      method: METHOD_GET,\n    });\n\n    const xml = await result.text();\n    const res = await parseGetBucketMetaResponse(xml);\n\n    return {\n      code: 0,\n      message: 'get bucket meta success.',\n      statusCode: result.status,\n      body: res,\n    };\n  }\n\n  public async listBucketReadRecords(params: ListBucketReadRecordRequest, authType: AuthType) {\n    try {\n      assertAuthType(authType);\n\n      const { bucketName } = params;\n      let endpoint = params.endpoint;\n      if (!endpoint) {\n        endpoint = await this.sp.getSPUrlByBucket(bucketName);\n      }\n      verifyUrl(endpoint);\n\n      const { url, optionsWithOutHeaders, reqMeta } = getListBucketReadRecordMetaInfo(\n        endpoint,\n        params,\n      );\n      const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          ...optionsWithOutHeaders,\n          headers: signHeaders,\n        },\n        3000,\n        {\n          code: -1,\n          message: 'Get Bucket Quota error.',\n        },\n      );\n\n      const xmlData = await result.text();\n      const res = await parseListBucketReadRecordResponse(xmlData);\n\n      return {\n        code: 0,\n        body: res,\n        message: 'success',\n        statusCode: result.status,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async listBucketsByIds(params: ListBucketsByIDsRequest) {\n    try {\n      const { ids } = params;\n      const sp = await this.sp.getInServiceSP();\n      const { url } = getListBucketsByIDsMetaInfo(sp.endpoint, { ids });\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers: {},\n          method: METHOD_GET,\n        },\n        3000,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = await parseListBucketsByIdsResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'success',\n        statusCode: status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async listBucketsByPaymentAccount(params: ListBucketsByPaymentAccountRequest) {\n    try {\n      const sp = await this.sp.getInServiceSP();\n      const { url } = getListBucketByPaymentMetaInfo(sp.endpoint, params);\n\n      const result = await this.spClient.callApi(url, {\n        headers: {},\n        method: METHOD_GET,\n      });\n\n      const xmlData = await result.text();\n      const res = parseListBucketByPaymentResponse(xmlData);\n      return {\n        code: 0,\n        message: 'Get bucket success.',\n        statusCode: result.status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n}\n","import {\n  QueryInturnAttestationSubmitterResponse,\n  QueryLatestAttestedChallengesResponse,\n  QueryParamsResponse,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/challenge/query';\nimport { MsgAttest, MsgSubmit } from '@bnb-chain/greenfield-cosmos-types/greenfield/challenge/tx';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport { MsgAttestTypeUrl, MsgSubmitTypeUrl, TxResponse } from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport { TxClient } from '../clients/txClient';\nimport { MsgAttestSDKTypeEIP712 } from '../messages/greenfield/chanenge/MsgAttest';\nimport { MsgSubmitSDKTypeEIP712 } from '../messages/greenfield/chanenge/MsgSubmit';\n\nexport interface IChallenge {\n  // TODO: getChallengeInfo();\n\n  /**\n   * challenges the service provider data integrity, used by off-chain service greenfield-challenger.\n   */\n  submitChallenge(address: string, msg: MsgSubmit): Promise<TxResponse>;\n\n  /**\n   * Attest handles user's request for attesting a challenge.\n     The attestation can include a valid challenge or is only for heartbeat purpose.\n     If the challenge is valid, the related storage provider will be slashed.\n     For heartbeat attestation, the challenge is invalid and the storage provider will not be slashed.\n   */\n  attestChallenge(address: string, msg: MsgAttest): Promise<TxResponse>;\n\n  latestAttestedChallenges(): Promise<QueryLatestAttestedChallengesResponse>;\n\n  inturnAttestationSubmitter(): Promise<QueryInturnAttestationSubmitterResponse>;\n\n  params(): Promise<QueryParamsResponse>;\n}\n\n@injectable()\nexport class Challenge implements IChallenge {\n  private queryClient = container.resolve(RpcQueryClient);\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n\n  public async submitChallenge(address: string, msg: MsgSubmit) {\n    return await this.txClient.tx(\n      MsgSubmitTypeUrl,\n      address,\n      MsgSubmitSDKTypeEIP712,\n      MsgSubmit.toSDK(msg),\n      MsgSubmit.encode(msg).finish(),\n    );\n  }\n\n  public async attestChallenge(address: string, msg: MsgAttest) {\n    return await this.txClient.tx(\n      MsgAttestTypeUrl,\n      address,\n      MsgAttestSDKTypeEIP712,\n      MsgAttest.toSDK(msg),\n      MsgAttest.encode(msg).finish(),\n    );\n  }\n\n  public async latestAttestedChallenges() {\n    const rpc = await this.queryClient.getChallengeQueryClient();\n    return await rpc.LatestAttestedChallenges();\n  }\n\n  public async inturnAttestationSubmitter() {\n    const rpc = await this.queryClient.getChallengeQueryClient();\n    return await rpc.InturnAttestationSubmitter();\n  }\n\n  public async params() {\n    const rpc = await this.queryClient.getChallengeQueryClient();\n    return await rpc.Params();\n  }\n}\n","export const MsgClaimSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'from_address',\n      type: 'string',\n    },\n    {\n      name: 'src_chain_id',\n      type: 'uint32',\n    },\n    {\n      name: 'dest_chain_id',\n      type: 'uint32',\n    },\n    {\n      name: 'sequence',\n      type: 'uint64',\n    },\n    {\n      name: 'timestamp',\n      type: 'uint64',\n    },\n  ],\n};\n","import {\n  QueryCrossChainPackageRequest,\n  QueryCrossChainPackageResponse,\n  QueryReceiveSequenceRequest,\n  QueryReceiveSequenceResponse,\n  QuerySendSequenceRequest,\n  QuerySendSequenceResponse,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/crosschain/v1/query';\nimport {\n  QueryInturnRelayerRequest,\n  QueryInturnRelayerResponse,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/oracle/v1/query';\nimport { MsgClaim } from '@bnb-chain/greenfield-cosmos-types/cosmos/oracle/v1/tx';\nimport { QueryParamsResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/bridge/query';\nimport { MsgTransferOut } from '@bnb-chain/greenfield-cosmos-types/greenfield/bridge/tx';\nimport {\n  MsgMirrorBucket,\n  MsgMirrorGroup,\n  MsgMirrorObject,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport {\n  MsgClaimTypeUrl,\n  MsgMirrorBucketTypeUrl,\n  MsgMirrorGroupTypeUrl,\n  MsgMirrorObjectTypeUrl,\n  MsgTransferOutTypeUrl,\n  TxResponse,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport { TxClient } from '../clients/txClient';\nimport { MsgClaimSDKTypeEIP712 } from '../messages/cosmos/oracle/MsgClaim';\nimport { MsgTransferOutSDKTypeEIP712 } from '../messages/greenfield/bridge/MsgTransferOut';\nimport { MsgMirrorBucketSDKTypeEIP712 } from '../messages/greenfield/storage/MsgMirrorBucket';\nimport { MsgMirrorGroupSDKTypeEIP712 } from '../messages/greenfield/storage/MsgMirrorGroup';\nimport { MsgMirrorObjectSDKTypeEIP712 } from '../messages/greenfield/storage/MsgMirrorObject';\n\nexport interface ICrossChain {\n  /**\n   * makes a transfer from Greenfield to BSC\n   */\n  transferOut(msg: MsgTransferOut): Promise<TxResponse>;\n\n  /**\n   * cross-chain packages from BSC to Greenfield, used by relayers which run by validators\n   */\n  claims(msg: MsgClaim): Promise<TxResponse>;\n\n  /**\n   * gets the next send sequence for a channel\n   */\n  getChannelSendSequence(request: QuerySendSequenceRequest): Promise<QuerySendSequenceResponse>;\n\n  /**\n   * gets the next receive sequence for a channel\n   */\n  getChannelReceiveSequence(\n    request: QueryReceiveSequenceRequest,\n  ): Promise<QueryReceiveSequenceResponse>;\n\n  /**\n   * gets the in-turn relayer bls public key and its relay interval\n   */\n  getInturnRelayer(request: QueryInturnRelayerRequest): Promise<QueryInturnRelayerResponse>;\n\n  getCrosschainPackage(\n    request: QueryCrossChainPackageRequest,\n  ): Promise<QueryCrossChainPackageResponse>;\n\n  /**\n   * mirrors the group to BSC as NFT\n   */\n  mirrorGroup(msg: MsgMirrorGroup): Promise<TxResponse>;\n\n  /**\n   * mirrors the bucket to BSC as NFT\n   */\n  mirrorBucket(msg: MsgMirrorBucket): Promise<TxResponse>;\n\n  /**\n   * mirrors the object to BSC as NFT\n   */\n  mirrorObject(msg: MsgMirrorObject): Promise<TxResponse>;\n\n  getParams(): Promise<QueryParamsResponse>;\n}\n\n@injectable()\nexport class CrossChain implements ICrossChain {\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n  private queryClient: RpcQueryClient = container.resolve(RpcQueryClient);\n\n  public async transferOut(msg: MsgTransferOut) {\n    return await this.txClient.tx(\n      MsgTransferOutTypeUrl,\n      msg.from,\n      MsgTransferOutSDKTypeEIP712,\n      MsgTransferOut.toSDK(msg),\n      MsgTransferOut.encode(msg).finish(),\n    );\n  }\n\n  public async claims(msg: MsgClaim) {\n    return await this.txClient.tx(\n      MsgClaimTypeUrl,\n      msg.fromAddress,\n      MsgClaimSDKTypeEIP712,\n      MsgClaim.toSDK(msg),\n      MsgClaim.encode(msg).finish(),\n    );\n  }\n\n  public async getChannelSendSequence(request: QuerySendSequenceRequest) {\n    const rpc = await this.queryClient.getCrosschainQueryClient();\n    return await rpc.SendSequence(request);\n  }\n\n  public async getChannelReceiveSequence(request: QueryReceiveSequenceRequest) {\n    const rpc = await this.queryClient.getCrosschainQueryClient();\n    return await rpc.ReceiveSequence(request);\n  }\n\n  public async getInturnRelayer(request: QueryInturnRelayerRequest) {\n    const rpc = await this.queryClient.getOracleQueryClient();\n    return await rpc.InturnRelayer(request);\n  }\n\n  public async getCrosschainPackage(request: QueryCrossChainPackageRequest) {\n    const rpc = await this.queryClient.getCrosschainQueryClient();\n    return await rpc.CrossChainPackage(request);\n  }\n\n  public async mirrorGroup(msg: MsgMirrorGroup) {\n    return await this.txClient.tx(\n      MsgMirrorGroupTypeUrl,\n      msg.operator,\n      MsgMirrorGroupSDKTypeEIP712,\n      MsgMirrorGroup.toSDK(msg),\n      MsgMirrorGroup.encode(msg).finish(),\n    );\n  }\n\n  public async mirrorBucket(msg: MsgMirrorBucket) {\n    return await this.txClient.tx(\n      MsgMirrorBucketTypeUrl,\n      msg.operator,\n      MsgMirrorBucketSDKTypeEIP712,\n      MsgMirrorBucket.toSDK(msg),\n      MsgMirrorBucket.encode(msg).finish(),\n    );\n  }\n\n  public async mirrorObject(msg: MsgMirrorObject) {\n    return await this.txClient.tx(\n      MsgMirrorObjectTypeUrl,\n      msg.operator,\n      MsgMirrorObjectSDKTypeEIP712,\n      MsgMirrorObject.toSDK(msg),\n      MsgMirrorObject.encode(msg).finish(),\n    );\n  }\n\n  async getParams() {\n    const rpc = await this.queryClient.getBridgeQueryClient();\n    return rpc.Params();\n  }\n}\n","export const MsgFundCommunityPoolTypeUrlSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'amount',\n      type: 'TypeMsg1Amount[]',\n    },\n    {\n      name: 'depositor',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n  TypeMsg1Amount: [\n    {\n      name: 'amount',\n      type: 'string',\n    },\n    {\n      name: 'denom',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgSetWithdrawAddressSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'delegator_address',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'withdraw_address',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgWithdrawDelegatorRewardSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'delegator_address',\n      type: 'string',\n    },\n    {\n      name: 'validator_address',\n      type: 'string',\n    },\n  ],\n};\n","export const MsgWithdrawValidatorCommissionSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'validator_address',\n      type: 'string',\n    },\n  ],\n};\n","import {\n  MsgFundCommunityPool,\n  MsgSetWithdrawAddress,\n  MsgWithdrawDelegatorReward,\n  MsgWithdrawValidatorCommission,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/distribution/v1beta1/tx';\nimport { delay, inject, injectable } from 'tsyringe';\nimport {\n  MsgFundCommunityPoolTypeUrl,\n  MsgSetWithdrawAddressTypeUrl,\n  MsgWithdrawDelegatorRewardTypeUrl,\n  MsgWithdrawValidatorCommissionTypeUrl,\n  TxResponse,\n} from '..';\nimport { TxClient } from '../clients/txClient';\nimport { MsgFundCommunityPoolTypeUrlSDKTypeEIP712 } from '../messages/cosmos/distribution/MsgFundCommunityPoolTypeUrl';\nimport { MsgSetWithdrawAddressSDKTypeEIP712 } from '../messages/cosmos/distribution/MsgSetWithdrawAddress';\nimport { MsgWithdrawDelegatorRewardSDKTypeEIP712 } from '../messages/cosmos/distribution/MsgWithdrawDelegatorReward';\nimport { MsgWithdrawValidatorCommissionSDKTypeEIP712 } from '../messages/cosmos/distribution/MsgWithdrawValidatorCommission';\nexport interface IDistribution {\n  /**\n   * sets the withdrawal address for a delegator address\n   */\n  setWithdrawAddress(msg: MsgSetWithdrawAddress): Promise<TxResponse>;\n\n  /**\n   * withdraw accumulated commission by validator\n   */\n  withdrawValidatorCommission(\n    address: string,\n    msg: MsgWithdrawValidatorCommission,\n  ): Promise<TxResponse>;\n\n  /**\n   * withdraw rewards by a delegator\n   */\n  withdrawDelegatorReward(msg: MsgWithdrawDelegatorReward): Promise<TxResponse>;\n\n  /**\n   * sends coins directly from the sender to the community pool.\n   */\n  fundCommunityPoolundComm(address: string, msg: MsgFundCommunityPool): Promise<TxResponse>;\n}\n\n@injectable()\nexport class Distribution implements IDistribution {\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n\n  public async setWithdrawAddress(msg: MsgSetWithdrawAddress) {\n    return await this.txClient.tx(\n      MsgSetWithdrawAddressTypeUrl,\n      msg.delegatorAddress,\n      MsgSetWithdrawAddressSDKTypeEIP712,\n      MsgSetWithdrawAddress.toSDK(msg),\n      MsgSetWithdrawAddress.encode(msg).finish(),\n    );\n  }\n\n  public async withdrawValidatorCommission(address: string, msg: MsgWithdrawValidatorCommission) {\n    return await this.txClient.tx(\n      MsgWithdrawValidatorCommissionTypeUrl,\n      address,\n      MsgWithdrawValidatorCommissionSDKTypeEIP712,\n      MsgWithdrawValidatorCommission.toSDK(msg),\n      MsgWithdrawValidatorCommission.encode(msg).finish(),\n    );\n  }\n\n  public async withdrawDelegatorReward(msg: MsgWithdrawDelegatorReward) {\n    return await this.txClient.tx(\n      MsgWithdrawDelegatorRewardTypeUrl,\n      msg.delegatorAddress,\n      MsgWithdrawDelegatorRewardSDKTypeEIP712,\n      MsgWithdrawDelegatorReward.toSDK(msg),\n      MsgWithdrawDelegatorReward.encode(msg).finish(),\n    );\n  }\n\n  public async fundCommunityPoolundComm(address: string, msg: MsgFundCommunityPool) {\n    return await this.txClient.tx(\n      MsgFundCommunityPoolTypeUrl,\n      address,\n      MsgFundCommunityPoolTypeUrlSDKTypeEIP712,\n      MsgFundCommunityPool.toSDK(msg),\n      MsgFundCommunityPool.encode(msg).finish(),\n    );\n  }\n}\n","export const MsgGrantAllowanceSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'granter',\n      type: 'string',\n    },\n    {\n      name: 'grantee',\n      type: 'string',\n    },\n    {\n      name: 'allowance',\n      type: 'TypeAny',\n    },\n  ],\n  TypeAny: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'value',\n      type: 'bytes',\n    },\n  ],\n};\n","export const MsgRevokeAllowanceSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'granter',\n      type: 'string',\n    },\n    {\n      name: 'grantee',\n      type: 'string',\n    },\n  ],\n};\n","import { TxClient } from '../clients/txClient';\nimport { MsgGrantAllowanceSDKTypeEIP712 } from '../messages/feegrant/MsgGrantAllowance';\nimport { MsgRevokeAllowanceSDKTypeEIP712 } from '../messages/feegrant/MsgRevokeAllowance';\nimport {\n  QueryAllowanceRequest,\n  QueryAllowanceResponse,\n  QueryAllowancesRequest,\n  QueryAllowancesResponse,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/query';\nimport {\n  MsgGrantAllowance,\n  MsgRevokeAllowance,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/tx';\nimport { base64FromBytes } from '@bnb-chain/greenfield-cosmos-types/helpers';\nimport { arrayify } from '@ethersproject/bytes';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport {\n  encodeToHex,\n  IGrantAllowance,\n  MsgGrantAllowanceTypeUrl,\n  MsgRevokeAllowanceTypeUrl,\n  newAllowedMsgAllowance,\n  newBasicAllowance,\n  newMarshal,\n  newMsgGrantAllowance,\n  TxResponse,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\n\nexport interface IFeeGrant {\n  grantAllowance(msg: IGrantAllowance): Promise<TxResponse>;\n\n  revokeAllowance(msg: MsgRevokeAllowance): Promise<TxResponse>;\n\n  getAllowence(request: QueryAllowanceRequest): Promise<QueryAllowanceResponse>;\n\n  getAllowences(request: QueryAllowancesRequest): Promise<QueryAllowancesResponse>;\n}\n\n@injectable()\nexport class FeeGrant implements IFeeGrant {\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n  private queryClient: RpcQueryClient = container.resolve(RpcQueryClient);\n\n  public async grantAllowance(params: IGrantAllowance) {\n    const { amount, denom, allowedMessages, grantee, granter, expirationTime } = params;\n\n    const basicAllowance = newBasicAllowance(amount, denom, expirationTime);\n    const allowedMsgAllowance = newAllowedMsgAllowance(allowedMessages, basicAllowance);\n    const grantAllowance = newMsgGrantAllowance(grantee, granter, allowedMsgAllowance);\n    const marshal = newMarshal(amount, denom, allowedMessages, expirationTime);\n\n    return await this.txClient.tx(\n      MsgGrantAllowanceTypeUrl,\n      granter,\n      MsgGrantAllowanceSDKTypeEIP712,\n      {\n        ...MsgGrantAllowance.toSDK(grantAllowance),\n        allowance: {\n          // @ts-ignore\n          type: grantAllowance.allowance?.typeUrl,\n          value: base64FromBytes(arrayify('0x' + encodeToHex(JSON.stringify(marshal)))),\n          // TODO: @roshan next version should return hex string\n          // value: '0x' + encodeToHex(JSON.stringify(marshal)),\n        },\n      },\n      MsgGrantAllowance.encode(grantAllowance).finish(),\n    );\n  }\n\n  public async revokeAllowance(msg: MsgRevokeAllowance) {\n    return await this.txClient.tx(\n      MsgRevokeAllowanceTypeUrl,\n      msg.granter,\n      MsgRevokeAllowanceSDKTypeEIP712,\n      MsgRevokeAllowance.toSDK(msg),\n      MsgRevokeAllowance.encode(msg).finish(),\n    );\n  }\n\n  public async getAllowence(request: QueryAllowanceRequest) {\n    const rpc = await this.queryClient.getFeeGrantQueryClient();\n    return await rpc.Allowance(request);\n  }\n\n  public async getAllowences(request: QueryAllowancesRequest) {\n    const rpc = await this.queryClient.getFeeGrantQueryClient();\n    return await rpc.Allowances(request);\n  }\n}\n","import {\n  QueryMsgGasParamsRequest,\n  QueryMsgGasParamsResponse,\n  QueryParamsResponse,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/gashub/v1beta1/query';\nimport { container, injectable } from 'tsyringe';\nimport { RpcQueryClient } from '../clients/queryclient';\n\nexport interface IGashub {\n  getParams(): Promise<QueryParamsResponse>;\n\n  getMsgGasParams(request: QueryMsgGasParamsRequest): Promise<QueryMsgGasParamsResponse>;\n}\n\n@injectable()\nexport class Gashub implements IGashub {\n  private queryClient: RpcQueryClient = container.resolve(RpcQueryClient);\n\n  async getMsgGasParams(request: QueryMsgGasParamsRequest): Promise<QueryMsgGasParamsResponse> {\n    const rpc = await this.queryClient.getGashubClient();\n    return await rpc.MsgGasParams(request);\n  }\n\n  async getParams() {\n    const rpc = await this.queryClient.getGashubClient();\n    return await rpc.Params();\n  }\n}\n","import {\n  QueryGroupNFTResponse,\n  QueryHeadGroupMemberResponse,\n  QueryHeadGroupResponse,\n  QueryListGroupsRequest,\n  QueryListGroupsResponse,\n  QueryNFTRequest,\n  QueryPolicyForGroupRequest,\n  QueryPolicyForGroupResponse,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';\nimport {\n  MsgCreateGroup,\n  MsgDeleteGroup,\n  MsgLeaveGroup,\n  MsgPutPolicy,\n  MsgUpdateGroupExtra,\n  MsgUpdateGroupMember,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport {\n  fromTimestamp,\n  MsgCreateGroupTypeUrl,\n  MsgDeleteGroupTypeUrl,\n  MsgLeaveGroupTypeUrl,\n  MsgUpdateGroupExtraTypeUrl,\n  MsgUpdateGroupMemberTypeUrl,\n  TxResponse,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport { TxClient } from '../clients/txClient';\nimport { MsgCreateGroupSDKTypeEIP712 } from '../messages/greenfield/storage/MsgCreateGroup';\nimport { MsgDeleteGroupSDKTypeEIP712 } from '../messages/greenfield/storage/MsgDeleteGroup';\nimport { MsgLeaveGroupSDKTypeEIP712 } from '../messages/greenfield/storage/MsgLeaveGroup';\nimport { MsgUpdateGroupExtraSDKTypeEIP712 } from '../messages/greenfield/storage/MsgUpdateGroupExtra';\nimport { getMsgUpdateGroupMemberSDKTypeEIP712 } from '../messages/greenfield/storage/MsgUpdateGroupMember';\nimport { GRNToString, newBucketGRN, newGroupGRN, newObjectGRN } from '../utils/grn';\nimport { Storage } from './storage';\n\nexport interface IGroup {\n  /**\n   * create a new group on greenfield chain the group members can be initialized  or not\n   */\n  createGroup(msg: MsgCreateGroup): Promise<TxResponse>;\n\n  /**\n   * send DeleteGroup txn to greenfield chain and return txn hash\n   */\n  deleteGroup(msg: MsgDeleteGroup): Promise<TxResponse>;\n\n  /**\n   * support adding or removing members from the group and return the txn hash\n   */\n  updateGroupMember(msg: MsgUpdateGroupMember): Promise<TxResponse>;\n\n  updateGroupExtra(msg: MsgUpdateGroupExtra): Promise<TxResponse>;\n\n  /**\n   * make the member leave the specific group\n   */\n  leaveGroup(address: string, msg: MsgLeaveGroup): Promise<TxResponse>;\n\n  /**\n   * query the groupInfo on chain, return the group info if exists\n   */\n  headGroup(groupName: string, groupOwner: string): Promise<QueryHeadGroupResponse>;\n\n  /**\n   * query the group member info on chain, return true if the member exists in group\n   */\n  headGroupMember(\n    groupName: string,\n    groupOwner: string,\n    member: string,\n  ): Promise<QueryHeadGroupMemberResponse>;\n\n  /**\n   * @deprecated\n   */\n  listGroup(request: QueryListGroupsRequest): Promise<QueryListGroupsResponse>;\n\n  headGroupNFT(request: QueryNFTRequest): Promise<QueryGroupNFTResponse>;\n\n  /**\n   * get the bucket policy info of the group specified by group id\n   * it queries a bucket policy that grants permission to a group\n   */\n  getPolicyOfGroup(request: QueryPolicyForGroupRequest): Promise<QueryPolicyForGroupResponse>;\n\n  getBucketPolicyOfGroup(bucketName: string, groupId: number): Promise<QueryPolicyForGroupResponse>;\n\n  getObjectPolicyOfGroup(\n    bucketName: string,\n    objectName: string,\n    groupId: number,\n  ): Promise<QueryPolicyForGroupResponse>;\n\n  putGroupPolicy(\n    owner: string,\n    groupName: string,\n    srcMsg: Omit<MsgPutPolicy, 'resource' | 'expirationTime'>,\n  ): Promise<TxResponse>;\n}\n\n@injectable()\nexport class Group implements IGroup {\n  constructor(\n    @inject(delay(() => TxClient)) private txClient: TxClient,\n    @inject(delay(() => Storage)) private storage: Storage,\n  ) {}\n\n  private queryClient: RpcQueryClient = container.resolve(RpcQueryClient);\n\n  public async createGroup(msg: MsgCreateGroup) {\n    return await this.txClient.tx(\n      MsgCreateGroupTypeUrl,\n      msg.creator,\n      MsgCreateGroupSDKTypeEIP712,\n      MsgCreateGroup.toSDK(msg),\n      MsgCreateGroup.encode(msg).finish(),\n    );\n  }\n\n  public async deleteGroup(msg: MsgDeleteGroup) {\n    return await this.txClient.tx(\n      MsgDeleteGroupTypeUrl,\n      msg.operator,\n      MsgDeleteGroupSDKTypeEIP712,\n      MsgDeleteGroup.toSDK(msg),\n      MsgDeleteGroup.encode(msg).finish(),\n    );\n  }\n\n  public async updateGroupMember(msg: MsgUpdateGroupMember) {\n    if (msg.groupName === '') {\n      throw new Error('group name is empty');\n    }\n\n    if (msg.membersToAdd.length === 0 && msg.membersToDelete.length === 0) {\n      throw new Error('no update member');\n    }\n\n    return await this.txClient.tx(\n      MsgUpdateGroupMemberTypeUrl,\n      msg.operator,\n      getMsgUpdateGroupMemberSDKTypeEIP712({\n        membersToAdd: msg.membersToAdd,\n        membersToDelete: msg.membersToDelete,\n      }),\n      {\n        ...MsgUpdateGroupMember.toSDK(msg),\n        members_to_add: msg.membersToAdd.map((x) => {\n          return {\n            member: x.member,\n            expiration_time: x.expirationTime && fromTimestamp(x.expirationTime),\n          };\n        }),\n      },\n      MsgUpdateGroupMember.encode(msg).finish(),\n    );\n  }\n\n  public async updateGroupExtra(msg: MsgUpdateGroupExtra) {\n    return await this.txClient.tx(\n      MsgUpdateGroupExtraTypeUrl,\n      msg.operator,\n      MsgUpdateGroupExtraSDKTypeEIP712,\n      MsgUpdateGroupExtra.toSDK(msg),\n      MsgUpdateGroupExtra.encode(msg).finish(),\n    );\n  }\n\n  public async leaveGroup(address: string, msg: MsgLeaveGroup) {\n    return await this.txClient.tx(\n      MsgLeaveGroupTypeUrl,\n      address,\n      MsgLeaveGroupSDKTypeEIP712,\n      MsgLeaveGroup.toSDK(msg),\n      MsgLeaveGroup.encode(msg).finish(),\n    );\n  }\n\n  public async headGroup(groupName: string, groupOwner: string) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.HeadGroup({\n      groupName,\n      groupOwner,\n    });\n  }\n\n  public async headGroupMember(groupName: string, groupOwner: string, member: string) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.HeadGroupMember({\n      groupName,\n      groupOwner,\n      member,\n    });\n  }\n\n  public async headGroupNFT(request: QueryNFTRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.HeadGroupNFT(request);\n  }\n\n  public async listGroup(request: QueryListGroupsRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.ListGroups(request);\n  }\n\n  public async getPolicyOfGroup(request: QueryPolicyForGroupRequest) {\n    return await this.storage.getPolicyForGroup(request);\n  }\n\n  public async getBucketPolicyOfGroup(bucketName: string, groupId: number) {\n    const resource = GRNToString(newBucketGRN(bucketName));\n    return await this.storage.getPolicyForGroup({\n      resource,\n      principalGroupId: groupId.toString(),\n    });\n  }\n\n  public async getObjectPolicyOfGroup(bucketName: string, objectName: string, groupId: number) {\n    const resource = GRNToString(newObjectGRN(bucketName, objectName));\n\n    return await this.storage.getPolicyForGroup({\n      resource,\n      principalGroupId: groupId.toString(),\n    });\n  }\n\n  public async putGroupPolicy(\n    owner: string,\n    groupName: string,\n    srcMsg: Omit<MsgPutPolicy, 'resource' | 'expirationTime'>,\n  ) {\n    const resource = GRNToString(newGroupGRN(owner, groupName));\n    const msg: MsgPutPolicy = {\n      ...srcMsg,\n      resource,\n    };\n    return this.storage.putPolicy(msg);\n  }\n}\n","import { EMPTY_STRING_SHA256, METHOD_POST } from '@/constants';\nimport { ReqMeta } from '@/types';\nimport { DelegatedOpts } from '@/types/sp/Common';\nimport { generateUrlByBucketName } from '@/utils/asserts/s3';\nimport { encodePath, getSortQueryParams } from '../auth';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/resumable_put_object.md\nexport const getResumablePutObjectMetaInfo = async (\n  endpoint: string,\n  params: {\n    objectName: string;\n    bucketName: string;\n    contentType: string;\n    body: File;\n    offset: number;\n    complete: boolean;\n    delegatedOpts?: DelegatedOpts;\n  },\n) => {\n  const { bucketName, objectName, contentType, body, offset, complete, delegatedOpts } = params;\n  const path = `/${encodePath(objectName)}`;\n  let queryMap: Record<string, string> = {\n    offset: String(offset),\n    complete: String(complete),\n  };\n\n  if (delegatedOpts) {\n    queryMap = {\n      ...queryMap,\n      delegate: '',\n      payload_size: String(body.size),\n      visibility: delegatedOpts.visibility.toString(),\n      is_update: String(delegatedOpts.isUpdate || false),\n    };\n  }\n\n  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n  url = getSortQueryParams(url, queryMap);\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    // txnHash: txnHash,\n    method: METHOD_POST,\n    url: {\n      hostname: url.hostname,\n      query: url.searchParams.toString(),\n      path,\n    },\n    contentType,\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_POST,\n    body,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n","import { EMPTY_STRING_SHA256, METHOD_POST } from '@/constants';\nimport { ReqMeta } from '@/types';\nimport { DelegateCreateFolderRepsonse } from '@/types/sp/DelegateCreateFolder';\nimport { generateUrlByBucketName } from '@/utils';\nimport { VisibilityType } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/common';\nimport { XMLParser } from 'fast-xml-parser';\nimport { encodePath, getSortQueryParams } from '../auth';\n\nexport const getDelegatedCreateFolderMetaInfo = async (\n  endpoint: string,\n  params: {\n    objectName: string;\n    bucketName: string;\n    delegatedOpts?: {\n      visibility: VisibilityType;\n    };\n  },\n) => {\n  const { bucketName, objectName, delegatedOpts } = params;\n  const path = `/${encodePath(objectName)}`;\n  let queryMap = {};\n\n  if (delegatedOpts) {\n    queryMap = {\n      'create-folder': '',\n      payload_size: '0',\n      visibility: delegatedOpts.visibility.toString(),\n    };\n  }\n\n  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n  url = getSortQueryParams(url, queryMap);\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    method: METHOD_POST,\n    url: {\n      hostname: url.hostname,\n      query: url.searchParams.toString(),\n      path,\n    },\n    contentType: '',\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_POST,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n\nexport const parseDelegatedCreateFolderResponse = (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n\n  const res = xmlParser.parse(data) as DelegateCreateFolderRepsonse;\n  return res;\n};\n","import { convertStrToBool, formatObjectInfo } from '@/types/sp/Common';\nimport { GetObjectMetaRequest, GetObjectMetaResponse } from '@/types/sp/GetObjectMeta';\nimport { generateUrlByBucketName } from '@/utils/asserts/s3';\nimport { XMLParser } from 'fast-xml-parser';\nimport { encodePath, getSortQueryParams } from '../auth';\nimport type { SPMetaInfo } from './metaInfos';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/get_object_meta.md\nexport const getObjectMetaInfo = (\n  endpoint: string,\n  params: GetObjectMetaRequest,\n): Pick<SPMetaInfo, 'url'> => {\n  const { objectName, bucketName } = params;\n\n  const path = `${encodePath(objectName)}`;\n  const queryMap = {\n    'object-meta': '',\n  };\n\n  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n  url = getSortQueryParams(url, queryMap);\n\n  return {\n    url: url.href,\n  };\n};\n\nexport const parseGetObjectMetaResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as GetObjectMetaResponse;\n\n  const ObjectTmp = res.GfSpGetObjectMetaResponse.Object || {};\n  if (ObjectTmp) {\n    // @ts-ignore\n    ObjectTmp.Removed = convertStrToBool(ObjectTmp.Removed);\n    ObjectTmp.UpdateAt = Number(ObjectTmp.UpdateAt);\n    ObjectTmp.DeleteAt = Number(ObjectTmp.DeleteAt);\n\n    ObjectTmp.ObjectInfo = formatObjectInfo(ObjectTmp.ObjectInfo);\n  }\n\n  res.GfSpGetObjectMetaResponse = {\n    ...res.GfSpGetObjectMetaResponse,\n    Object: ObjectTmp,\n  };\n\n  return res;\n};\n","import { EMPTY_STRING_SHA256, METHOD_GET } from '@/constants';\nimport { ReqMeta, UploadOffsetResponse } from '@/types';\nimport { generateUrlByBucketName } from '@/utils/asserts/s3';\nimport { XMLParser } from 'fast-xml-parser';\nimport { encodePath, getSortQueryParams } from '../auth';\n\n// Uploading object's offset\nexport const getObjectOffsetInfo = async (\n  endpoint: string,\n  params: {\n    objectName: string;\n    bucketName: string;\n  },\n) => {\n  const { bucketName, objectName } = params;\n  const path = `/${encodePath(objectName)}`;\n  const queryMap = {\n    'upload-context': '',\n  };\n\n  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n  url = getSortQueryParams(url, queryMap);\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    method: METHOD_GET,\n    url: {\n      hostname: new URL(url).hostname,\n      query: url.searchParams.toString(),\n      path,\n    },\n    contentType: 'application/octet-stream',\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_GET,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n\nexport const parseObjectOffsetResponse = (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n\n  const res = xmlParser.parse(data) as UploadOffsetResponse;\n\n  res.QueryResumeOffset.Offset = Number(res.QueryResumeOffset.Offset);\n\n  return res;\n};\n","import { EMPTY_STRING_SHA256, METHOD_GET } from '@/constants';\nimport { ReqMeta } from '@/types';\nimport { UploadProgressResponse } from '@/types/sp/UploadProgress';\nimport { generateUrlByBucketName } from '@/utils/asserts/s3';\nimport { XMLParser } from 'fast-xml-parser';\nimport { encodePath, getSortQueryParams } from '../auth';\n\n// Object's upload-progress\nexport const getObjectStatusInfo = async (\n  endpoint: string,\n  params: {\n    objectName: string;\n    bucketName: string;\n  },\n) => {\n  const { bucketName, objectName } = params;\n  const path = `/${encodePath(objectName)}`;\n  const queryMap = {\n    'upload-progress': '',\n  };\n\n  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n  url = getSortQueryParams(url, queryMap);\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    method: METHOD_GET,\n    url: {\n      hostname: new URL(url).hostname,\n      query: url.searchParams.toString(),\n      path,\n    },\n    // contentType: 'application/octet-stream',\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_GET,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n\nexport const parseObjectStatusResponse = (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n\n  const res = xmlParser.parse(data) as UploadProgressResponse;\n\n  return res;\n};\n","import { convertStrToBool, formatObjectInfo } from '@/types/sp/Common';\nimport {\n  GetListObjectPoliciesRequest,\n  GetListObjectPoliciesResponse,\n} from '@/types/sp/ListObjectPolicies';\nimport { generateUrlByBucketName } from '@/utils';\nimport { actionTypeFromJSON } from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';\nimport { XMLParser } from 'fast-xml-parser';\nimport { encodePath, getSortQueryParams } from '../auth';\n\nexport const getListObjectPoliciesMetaInfo = (\n  endpoint: string,\n  params: GetListObjectPoliciesRequest,\n) => {\n  const { actionType, bucketName, objectName, limit = '10', startAfter = '' } = params;\n  const path = `/${encodePath(objectName)}`;\n  const queryMap = {\n    'object-policies': 'null',\n    'start-after': startAfter,\n    limit: String(limit),\n    'action-type': String(actionTypeFromJSON(actionType)),\n  };\n\n  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));\n  url = getSortQueryParams(url, queryMap);\n\n  return {\n    url: url.href,\n  };\n};\n\nexport const parseGetListObjectPoliciesResponse = (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as GetListObjectPoliciesResponse;\n\n  let Policies = res.GfSpListObjectPoliciesResponse.Policies || [];\n\n  if (Policies) {\n    if (!Array.isArray(Policies)) {\n      Policies = [Policies];\n    }\n\n    Policies = Policies.map((item) => {\n      return {\n        ...item,\n        PrincipalType: Number(item.ResourceType),\n        ResourceType: Number(item.ResourceType),\n        CreateTimestamp: Number(item.CreateTimestamp),\n        UpdateTimestamp: Number(item.UpdateTimestamp),\n        ExpirationTime: Number(item.ExpirationTime),\n      };\n    });\n  }\n\n  res.GfSpListObjectPoliciesResponse = {\n    Policies,\n  };\n\n  return res;\n};\n","import { convertStrToBool, formatObjectInfo } from '@/types/sp/Common';\nimport { ListObjectsByBucketNameResponse } from '@/types/sp/ListObjectsByBucketName';\nimport { XMLParser } from 'fast-xml-parser';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_objects_by_bucket.md\nexport const parseListObjectsByBucketNameResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as ListObjectsByBucketNameResponse;\n\n  let Objects = res.GfSpListObjectsByBucketNameResponse.Objects || [];\n  if (Objects) {\n    if (!Array.isArray(Objects)) {\n      Objects = [Objects];\n    }\n\n    Objects = Objects.map((item) => {\n      return {\n        ...item,\n        // @ts-ignore\n        Removed: convertStrToBool(item.Removed),\n        UpdateAt: Number(item.UpdateAt),\n        DeleteAt: Number(item.DeleteAt),\n        ObjectInfo: formatObjectInfo(item.ObjectInfo),\n      };\n    });\n  }\n\n  let CommonPrefixes = res.GfSpListObjectsByBucketNameResponse.CommonPrefixes || [];\n  if (CommonPrefixes) {\n    if (!Array.isArray(CommonPrefixes)) {\n      CommonPrefixes = [CommonPrefixes];\n    }\n  }\n\n  res.GfSpListObjectsByBucketNameResponse = {\n    ...res.GfSpListObjectsByBucketNameResponse,\n    Objects,\n    CommonPrefixes,\n    // @ts-ignore\n    IsTruncated: convertStrToBool(res.GfSpListObjectsByBucketNameResponse.IsTruncated),\n  };\n\n  return res;\n};\n","import { ListObjectsByIDsRequest, ListObjectsByIDsResponse } from '@/types';\nimport { formatObjectInfo, convertStrToBool } from '@/types/sp/Common';\nimport { XMLParser } from 'fast-xml-parser';\nimport { getSortQueryParams } from '../auth';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_objects_by_ids.md\nexport const getListObjectsByIDsMetaInfo = (endpoint: string, params: ListObjectsByIDsRequest) => {\n  const path = '';\n  const queryMap = {\n    ids: params.ids.join(','),\n    'objects-query': 'null',\n  };\n\n  let url = new URL(path, endpoint);\n  url = getSortQueryParams(url, queryMap);\n\n  return {\n    url: url.href,\n  };\n};\n\nexport const parseListObjectsByIdsResponse = async (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as ListObjectsByIDsResponse;\n\n  let ObjectEntry = res.GfSpListObjectsByIDsResponse.ObjectEntry;\n\n  if (ObjectEntry) {\n    if (!Array.isArray(ObjectEntry)) {\n      ObjectEntry = [ObjectEntry];\n    }\n\n    ObjectEntry = ObjectEntry.map((item) => {\n      let Value = item.Value;\n      if (Value) {\n        Value = {\n          ...item.Value,\n          ObjectInfo: formatObjectInfo(item.Value.ObjectInfo),\n          // @ts-ignore\n          Removed: convertStrToBool(item.Value.Removed),\n          UpdateAt: Number(item.Value.UpdateAt),\n          DeleteAt: Number(item.Value.DeleteAt),\n        };\n      }\n\n      return {\n        ...item,\n        Id: Number(item.Id),\n        Value,\n      };\n    });\n  }\n\n  res.GfSpListObjectsByIDsResponse = {\n    ...res.GfSpListObjectsByIDsResponse,\n    ObjectEntry,\n  };\n\n  return res;\n};\n","import { getResumablePutObjectMetaInfo } from '@/clients/spclient/spApis/resumablePutObject';\nimport { DelegatedOpts, UploadFile } from '@/types/sp/Common';\nimport {\n  ActionType,\n  Principal,\n  PrincipalType,\n  principalTypeFromJSON,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';\nimport {\n  QueryHeadObjectResponse,\n  QueryNFTRequest,\n  QueryObjectNFTResponse,\n  QueryPolicyForAccountResponse,\n  QueryVerifyPermissionResponse,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';\nimport {\n  MsgCancelCreateObject,\n  MsgCreateObject,\n  MsgDeleteObject,\n  MsgDeletePolicy,\n  MsgPutPolicy,\n  MsgUpdateObjectInfo,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';\nimport { base64FromBytes, bytesFromBase64 } from '@bnb-chain/greenfield-cosmos-types/helpers';\nimport { hexlify } from '@ethersproject/bytes';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { Headers } from 'cross-fetch';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport {\n  DEFAULT_PART_SIZE,\n  GRNToString,\n  MsgCancelCreateObjectTypeUrl,\n  MsgCreateObjectTypeUrl,\n  MsgDeleteObjectTypeUrl,\n  MsgUpdateObjectInfoTypeUrl,\n  newObjectGRN,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport {\n  HTTPHeaderRegPubKey,\n  encodePath,\n  getAuthorization,\n  getSortQuery,\n} from '../clients/spclient/auth';\nimport {\n  getDelegatedCreateFolderMetaInfo,\n  parseDelegatedCreateFolderResponse,\n} from '../clients/spclient/spApis/delegatedCreateFolder';\nimport { getGetObjectMetaInfo } from '../clients/spclient/spApis/getObject';\nimport {\n  getObjectMetaInfo,\n  parseGetObjectMetaResponse,\n} from '../clients/spclient/spApis/getObjectMeta';\nimport {\n  getObjectOffsetInfo,\n  parseObjectOffsetResponse,\n} from '../clients/spclient/spApis/getObjectOffset';\nimport {\n  getObjectStatusInfo,\n  parseObjectStatusResponse,\n} from '../clients/spclient/spApis/getObjectStatus';\nimport {\n  getListObjectPoliciesMetaInfo,\n  parseGetListObjectPoliciesResponse,\n} from '../clients/spclient/spApis/listObjectPolicies';\nimport { parseListObjectsByBucketNameResponse } from '../clients/spclient/spApis/listObjectsByBucket';\nimport {\n  getListObjectsByIDsMetaInfo,\n  parseListObjectsByIdsResponse,\n} from '../clients/spclient/spApis/listObjectsByIds';\nimport { parseError } from '../clients/spclient/spApis/parseError';\nimport { getPutObjectMetaInfo } from '../clients/spclient/spApis/putObject';\nimport { SpClient } from '../clients/spclient/spClient';\nimport { TxClient } from '../clients/txClient';\nimport { METHOD_GET, NORMAL_ERROR_CODE } from '../constants/http';\nimport { MsgCancelCreateObjectSDKTypeEIP712 } from '../messages/greenfield/storage/MsgCancelCreateObject';\nimport { MsgCreateObjectSDKTypeEIP712 } from '../messages/greenfield/storage/MsgCreateObject';\nimport { MsgDeleteObjectSDKTypeEIP712 } from '../messages/greenfield/storage/MsgDeleteObject';\nimport { MsgUpdateObjectInfoSDKTypeEIP712 } from '../messages/greenfield/storage/MsgUpdateObjectInfo';\nimport {\n  AuthType,\n  GetListObjectPoliciesRequest,\n  GetListObjectPoliciesResponse,\n  GetPrivewObject,\n  ListObjectsByBucketNameRequest,\n  ListObjectsByIDsRequest,\n  ListObjectsByIDsResponse,\n  Long,\n  ObjectStatus,\n  OnProgress,\n  SpResponse,\n  TxResponse,\n  UploadOffsetResponse,\n} from '../types';\nimport {\n  DelegateCreateFolderRepsonse,\n  DelegatedCreateFolderRequest,\n} from '../types/sp/DelegateCreateFolder';\nimport { DelegatedPubObjectRequest } from '../types/sp/DelegatedPubObject';\nimport { GetObjectRequest } from '../types/sp/GetObject';\nimport { GetObjectMetaRequest, GetObjectMetaResponse } from '../types/sp/GetObjectMeta';\nimport { ListObjectsByBucketNameResponse } from '../types/sp/ListObjectsByBucketName';\nimport { PutObjectRequest } from '../types/sp/PutObject';\nimport { UploadProgressResponse } from '../types/sp/UploadProgress';\nimport { assertAuthType, assertFileType, assertStringRequire } from '../utils/asserts/params';\nimport {\n  checkObjectName,\n  generateUrlByBucketName,\n  verifyBucketName,\n  verifyObjectName,\n  verifyUrl,\n} from '../utils/asserts/s3';\nimport { Sp } from './sp';\nimport { Storage } from './storage';\n\nexport interface IObject {\n  createObject(msg: MsgCreateObject): Promise<TxResponse>;\n\n  uploadObject(configParam: PutObjectRequest, authType: AuthType): Promise<SpResponse<null>>;\n\n  delegateUploadObject(\n    params: DelegatedPubObjectRequest,\n    authType: AuthType,\n  ): Promise<SpResponse<null>>;\n\n  cancelCreateObject(msg: MsgCancelCreateObject): Promise<TxResponse>;\n\n  updateObjectInfo(msg: MsgUpdateObjectInfo): Promise<TxResponse>;\n\n  deleteObject(msg: MsgDeleteObject): Promise<TxResponse>;\n\n  headObject(bucketName: string, objectName: string): Promise<QueryHeadObjectResponse>;\n\n  headObjectById(objectId: string): Promise<QueryHeadObjectResponse>;\n\n  headObjectNFT(request: QueryNFTRequest): Promise<QueryObjectNFTResponse>;\n\n  /**\n   * get s3 object's blob\n   */\n  getObject(configParam: GetObjectRequest, authType: AuthType): Promise<SpResponse<Blob>>;\n\n  getObjectPreviewUrl(configParam: GetPrivewObject, authType: AuthType): Promise<string>;\n\n  /**\n   * download s3 object\n   */\n  downloadFile(configParam: GetObjectRequest, authType: AuthType): Promise<void>;\n\n  listObjects(\n    configParam: ListObjectsByBucketNameRequest,\n  ): Promise<SpResponse<ListObjectsByBucketNameResponse>>;\n\n  createFolder(\n    msg: Omit<MsgCreateObject, 'payloadSize' | 'contentType' | 'expectChecksums'>,\n  ): Promise<TxResponse>;\n\n  delegateCreateFolder(\n    params: DelegatedCreateFolderRequest,\n    authType: AuthType,\n  ): Promise<SpResponse<DelegateCreateFolderRepsonse>>;\n\n  putObjectPolicy(\n    bucketName: string,\n    objectName: string,\n    // expirationTime: Date,\n    srcMsg: Omit<MsgPutPolicy, 'resource'>,\n  ): Promise<TxResponse>;\n\n  deleteObjectPolicy(\n    operator: string,\n    bucketName: string,\n    objectName: string,\n    principalAddr: string,\n    principalType: keyof typeof PrincipalType,\n  ): Promise<TxResponse>;\n\n  isObjectPermissionAllowed(\n    bucketName: string,\n    objectName: string,\n    actionType: ActionType,\n    operator: string,\n  ): Promise<QueryVerifyPermissionResponse>;\n\n  getObjectPolicy(\n    bucketName: string,\n    objectName: string,\n    principalAddr: string,\n  ): Promise<QueryPolicyForAccountResponse>;\n\n  getObjectMeta(params: GetObjectMetaRequest): Promise<SpResponse<GetObjectMetaResponse>>;\n\n  listObjectsByIds(params: ListObjectsByIDsRequest): Promise<SpResponse<ListObjectsByIDsResponse>>;\n\n  listObjectPolicies(\n    params: GetListObjectPoliciesRequest,\n  ): Promise<SpResponse<GetListObjectPoliciesResponse>>;\n\n  /**\n   * return the status of object including the uploading progress\n   */\n  getObjectUploadProgress(\n    bucketName: string,\n    objectName: string,\n    authType: AuthType,\n  ): Promise<string>;\n}\n\n@injectable()\nexport class Objects implements IObject {\n  constructor(\n    @inject(delay(() => TxClient)) private txClient: TxClient,\n    @inject(delay(() => Storage)) private storage: Storage,\n    @inject(delay(() => Sp)) private sp: Sp,\n  ) {}\n\n  private queryClient: RpcQueryClient = container.resolve(RpcQueryClient);\n  private spClient = container.resolve(SpClient);\n\n  public async createObject(msg: MsgCreateObject) {\n    verifyBucketName(msg.bucketName);\n    verifyObjectName(msg.objectName);\n    checkObjectName(msg.objectName);\n    assertStringRequire(msg.creator, 'empty creator address');\n\n    const createObjMsg: MsgCreateObject = {\n      ...msg,\n      primarySpApproval: {\n        globalVirtualGroupFamilyId: 0,\n        expiredHeight: Long.fromInt(0),\n        sig: Uint8Array.from([]),\n      },\n    };\n\n    return await this.txClient.tx(\n      MsgCreateObjectTypeUrl,\n      msg.creator,\n      MsgCreateObjectSDKTypeEIP712,\n      {\n        ...MsgCreateObject.toSDK(createObjMsg),\n        primary_sp_approval: {\n          expired_height: '0',\n          global_virtual_group_family_id: 0,\n        },\n        expect_checksums: createObjMsg.expectChecksums.map((e) => base64FromBytes(e)),\n        payload_size: createObjMsg.payloadSize.toNumber(),\n      },\n      MsgCreateObject.encode(createObjMsg).finish(),\n    );\n  }\n\n  public async delegateUploadObject(params: DelegatedPubObjectRequest, authType: AuthType) {\n    const {\n      bucketName,\n      objectName,\n      body,\n      resumableOpts,\n      timeout = 30000,\n      delegatedOpts,\n      onProgress,\n    } = params;\n\n    assertAuthType(authType);\n    verifyBucketName(bucketName);\n    verifyObjectName(objectName);\n\n    const disableResumable = resumableOpts?.disableResumable ?? true;\n    const partSize = resumableOpts?.partSize ?? DEFAULT_PART_SIZE;\n\n    let endpoint = params.endpoint;\n    if (!endpoint) {\n      endpoint = await this.sp.getSPUrlByBucket(bucketName);\n    }\n\n    const { params: storageParams } = await this.storage.params();\n    const maxSegmentSize = storageParams.versionedParams.maxSegmentSize.toNumber();\n\n    if (partSize % maxSegmentSize !== 0) {\n      throw new Error(\n        'partSize should be an integer multiple of the segment size: ' + maxSegmentSize,\n      );\n    }\n\n    if (body.size <= partSize || disableResumable) {\n      return this.putObject({\n        endpoint,\n        bucketName,\n        objectName,\n        body,\n        authType,\n        delegatedOpts,\n        duration: timeout,\n        txnHash: '',\n        onProgress,\n      });\n    }\n\n    return await this.putResumableObject(\n      endpoint,\n      bucketName,\n      objectName,\n      body,\n      partSize,\n      authType,\n      timeout,\n      delegatedOpts,\n    );\n  }\n\n  public async uploadObject(\n    params: PutObjectRequest,\n    authType: AuthType,\n  ): Promise<SpResponse<null>> {\n    const { bucketName, objectName, body, duration = 30000, resumableOpts, onProgress } = params;\n    assertAuthType(authType);\n    verifyBucketName(bucketName);\n    verifyObjectName(objectName);\n\n    let endpoint = params.endpoint;\n    if (!endpoint) {\n      endpoint = await this.sp.getSPUrlByBucket(bucketName);\n    }\n\n    let txnHash = params.txnHash;\n    if (!txnHash) {\n      const { body } = await this.getObjectMeta({\n        bucketName,\n        objectName,\n        endpoint,\n      });\n      txnHash = body.GfSpGetObjectMetaResponse.Object.CreateTxHash;\n    }\n\n    const { params: storageParams } = await this.storage.params();\n\n    const maxSegmentSize = storageParams.versionedParams.maxSegmentSize.toNumber();\n\n    const disableResumable = resumableOpts?.disableResumable ?? true;\n    const partSize = resumableOpts?.partSize ?? DEFAULT_PART_SIZE;\n\n    if (partSize % maxSegmentSize !== 0) {\n      throw new Error(\n        'partSize should be an integer multiple of the segment size: ' + maxSegmentSize,\n      );\n    }\n\n    if (body.size <= partSize || disableResumable) {\n      return this.putObject({\n        endpoint,\n        bucketName,\n        objectName,\n        body,\n        txnHash,\n        authType,\n        duration,\n        onProgress,\n      });\n    }\n\n    return await this.putResumableObject(\n      endpoint,\n      bucketName,\n      objectName,\n      body,\n      partSize,\n      authType,\n      duration,\n    );\n  }\n\n  private async putObject(params: {\n    endpoint: string;\n    bucketName: string;\n    objectName: string;\n    body: UploadFile;\n    txnHash: string;\n    authType: AuthType;\n    delegatedOpts?: DelegatedOpts;\n    duration: number;\n    onProgress?: OnProgress;\n  }): Promise<SpResponse<null>> {\n    const {\n      authType,\n      body,\n      bucketName,\n      delegatedOpts,\n      duration,\n      endpoint,\n      objectName,\n      txnHash,\n      onProgress,\n    } = params;\n\n    const { reqMeta, optionsWithOutHeaders, url, file } = await getPutObjectMetaInfo(endpoint, {\n      bucketName,\n      objectName,\n      contentType: body.type,\n      txnHash,\n      body,\n      delegatedOpts,\n    });\n    const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n    try {\n      const result = await this.spClient.upload(\n        url,\n        {\n          ...optionsWithOutHeaders,\n          headers: signHeaders,\n        },\n        duration,\n        file,\n        {\n          onProgress,\n        },\n      );\n\n      const { status } = result;\n\n      return { code: 0, message: 'Put object success.', statusCode: status };\n    } catch (error: any) {\n      return {\n        code: error.code || -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  private splitPartInfo(objectSize: number, configuredPartSize: number) {\n    const partSizeFlt = configuredPartSize;\n    // Total parts count.\n    const totalPartsCount = Math.ceil(objectSize / partSizeFlt);\n    // Part size.\n    const partSize = partSizeFlt;\n    // Last part size.\n    const lastPartSize = objectSize - (totalPartsCount - 1) * partSize;\n    return {\n      totalPartsCount,\n      partSize,\n      lastPartSize,\n    };\n  }\n\n  private async putResumableObject(\n    endpoint: string,\n    bucketName: string,\n    objectName: string,\n    body: UploadFile,\n    partSize: number,\n    authType: AuthType,\n    timeout: number,\n    delegatedOpts?: DelegatedOpts,\n  ) {\n    let offset = 0;\n    if (!delegatedOpts) {\n      const isObjectExist = await this.headSPObjectInfo(bucketName, objectName, authType);\n      if (!isObjectExist) {\n        throw new Error('Object does not exist');\n      }\n\n      offset = await this.getObjectResumableUploadOffset(bucketName, objectName, authType);\n    }\n\n    const { totalPartsCount } = this.splitPartInfo(body.size, partSize);\n\n    // split file\n    const file = assertFileType(body) ? body.content : body;\n    const chunks = [];\n    for (let i = 0; i < totalPartsCount; i++) {\n      const start = i * partSize;\n      const end = Math.min(start + partSize, body.size);\n      const chunk = file.slice(start, end);\n      chunks.push(chunk);\n    }\n\n    let startPartNumber = offset / partSize;\n    while (startPartNumber < totalPartsCount) {\n      const chunkFile = new File([chunks[startPartNumber]], '');\n\n      const { reqMeta, optionsWithOutHeaders, url } = await getResumablePutObjectMetaInfo(\n        endpoint,\n        {\n          bucketName,\n          objectName,\n          contentType: body.type,\n          body: chunkFile,\n          offset: startPartNumber * partSize,\n          complete: startPartNumber === totalPartsCount - 1,\n          delegatedOpts,\n        },\n      );\n\n      const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n      try {\n        await this.spClient.callApi(\n          url,\n          {\n            ...optionsWithOutHeaders,\n            headers: signHeaders,\n          },\n          timeout,\n        );\n      } catch (error: any) {\n        return {\n          code: -1,\n          message: error.message,\n          statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n        };\n      } finally {\n        startPartNumber++;\n      }\n    }\n\n    return { code: 0, message: 'Put all object parts success.', statusCode: 200 };\n  }\n\n  private async headSPObjectInfo(bucketName: string, objectName: string, authType: AuthType) {\n    const { code } = await this.getObjectStatusFromSp(bucketName, objectName, authType);\n\n    if (code === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private async getObjectResumableUploadOffset(\n    bucketName: string,\n    objectName: string,\n    authType: AuthType,\n  ) {\n    const { objectInfo } = await this.headObject(bucketName, objectName);\n    if (!objectInfo) {\n      throw new Error('Object not found');\n    }\n\n    if (objectInfo.objectStatus == ObjectStatus.OBJECT_STATUS_CREATED) {\n      const { code, body } = await this.getObjectOffsetFromSP(bucketName, objectName, authType);\n\n      if (body) {\n        return body.QueryResumeOffset.Offset;\n      }\n    }\n\n    return 0;\n  }\n\n  private async getObjectOffsetFromSP(\n    bucketName: string,\n    objectName: string,\n    authType: AuthType,\n  ): Promise<SpResponse<UploadOffsetResponse>> {\n    const endpoint = await this.sp.getSPUrlByBucket(bucketName);\n\n    const { url, optionsWithOutHeaders, reqMeta } = await getObjectOffsetInfo(endpoint, {\n      bucketName,\n      objectName,\n    });\n\n    const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n    try {\n      const result = await this.spClient.callApi(\n        url,\n        {\n          ...optionsWithOutHeaders,\n          headers: signHeaders,\n        },\n        5000,\n      );\n      // console.log('upload-context result', result);\n      const { status } = result;\n\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        return {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n          body: {\n            QueryResumeOffset: {\n              Offset: 0,\n            },\n          },\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = parseObjectOffsetResponse(xmlData);\n\n      return { code: 0, message: 'get upload offset success', statusCode: status, body: res };\n    } catch (error: any) {\n      // console.log('err', error);\n      const message = error.message;\n\n      if (message.includes('no uploading record')) {\n        return {\n          code: -1,\n          message: message,\n          statusCode: error.code,\n          body: {\n            QueryResumeOffset: {\n              Offset: 0,\n            },\n          },\n        };\n      }\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  private async getObjectStatusFromSp(\n    bucketName: string,\n    objectName: string,\n    authType: AuthType,\n  ): Promise<SpResponse<UploadProgressResponse>> {\n    const endpoint = await this.sp.getSPUrlByBucket(bucketName);\n\n    const { url, optionsWithOutHeaders, reqMeta } = await getObjectStatusInfo(endpoint, {\n      bucketName,\n      objectName,\n    });\n\n    const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n    try {\n      const result = await this.spClient.callApi(\n        url,\n        {\n          ...optionsWithOutHeaders,\n          headers: signHeaders,\n        },\n        5000,\n      );\n      // console.log('upload-progress result', result);\n      const { status } = result;\n\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = parseObjectStatusResponse(xmlData);\n\n      return { code: 0, message: 'success', statusCode: status, body: res };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async cancelCreateObject(msg: MsgCancelCreateObject) {\n    return await this.txClient.tx(\n      MsgCancelCreateObjectTypeUrl,\n      msg.operator,\n      MsgCancelCreateObjectSDKTypeEIP712,\n      MsgCancelCreateObject.toSDK(msg),\n      MsgCancelCreateObject.encode(msg).finish(),\n    );\n  }\n\n  public async deleteObject(msg: MsgDeleteObject) {\n    return await this.txClient.tx(\n      MsgDeleteObjectTypeUrl,\n      msg.operator,\n      MsgDeleteObjectSDKTypeEIP712,\n      MsgDeleteObject.toSDK(msg),\n      MsgDeleteObject.encode(msg).finish(),\n    );\n  }\n\n  public async updateObjectInfo(msg: MsgUpdateObjectInfo) {\n    return await this.txClient.tx(\n      MsgUpdateObjectInfoTypeUrl,\n      msg.operator,\n      MsgUpdateObjectInfoSDKTypeEIP712,\n      MsgUpdateObjectInfo.toSDK(msg),\n      MsgUpdateObjectInfo.encode(msg).finish(),\n    );\n  }\n\n  public async headObject(bucketName: string, objectName: string) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n\n    return rpc.HeadObject({\n      bucketName,\n      objectName,\n    });\n  }\n\n  public async headObjectById(objectId: string) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n\n    return rpc.HeadObjectById({\n      objectId,\n    });\n  }\n\n  public async headObjectNFT(request: QueryNFTRequest) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.HeadObjectNFT(request);\n  }\n\n  public async getObject(params: GetObjectRequest, authType: AuthType) {\n    try {\n      assertAuthType(authType);\n      const { bucketName, objectName, duration = 30000 } = params;\n      verifyBucketName(bucketName);\n      verifyObjectName(objectName);\n\n      let endpoint = params.endpoint;\n      if (!endpoint) {\n        endpoint = await this.sp.getSPUrlByBucket(bucketName);\n      }\n\n      const { reqMeta, optionsWithOutHeaders, url } = await getGetObjectMetaInfo(endpoint, {\n        bucketName,\n        objectName,\n      });\n\n      const headers = await this.spClient.signHeaders(reqMeta, authType);\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          ...optionsWithOutHeaders,\n          headers,\n        },\n        duration,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n\n        return {\n          code: code || -1,\n          message: message || 'Get object error.',\n          statusCode: status,\n        };\n      }\n\n      const fileBlob = await result.blob();\n      return {\n        code: 0,\n        body: fileBlob,\n        message: 'Get object success.',\n        statusCode: status,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async getObjectPreviewUrl(params: GetPrivewObject, authType: AuthType) {\n    assertAuthType(authType);\n    if (authType.type === 'ECDSA') {\n      throw new Error('Get object preview url only support EDDSA');\n    }\n    const { bucketName, objectName, queryMap } = params;\n    verifyBucketName(bucketName);\n    verifyObjectName(objectName);\n    let endpoint = params.endpoint;\n    if (!endpoint) {\n      endpoint = await this.sp.getSPUrlByBucket(bucketName);\n    }\n\n    const path = '/' + encodePath(objectName);\n    const url = generateUrlByBucketName(endpoint, bucketName) + path;\n\n    let pubKey = '';\n    if (authType.type === 'EDDSA') {\n      pubKey = hexlify(ed25519.getPublicKey(authType.seed.slice(2)));\n    }\n\n    const queryRaw = getSortQuery({\n      ...queryMap,\n      [HTTPHeaderRegPubKey]: pubKey.slice(2),\n    });\n\n    const canonicalRequest = [\n      METHOD_GET,\n      `/${encodePath(objectName)}`,\n      queryRaw,\n      new URL(url).host,\n      '\\n',\n    ].join('\\n');\n\n    const auth = getAuthorization(canonicalRequest, authType);\n\n    return `${url}?Authorization=${encodeURIComponent(auth)}&${queryRaw}`;\n  }\n\n  public async downloadFile(configParam: GetObjectRequest, authType: AuthType): Promise<void> {\n    try {\n      const { objectName } = configParam;\n      const getObjectResult = await this.getObject(configParam, authType);\n\n      if (getObjectResult.code !== 0) {\n        throw new Error(getObjectResult.message);\n      }\n\n      const file = getObjectResult?.body;\n      if (file) {\n        // const {file} = getObjectResult;\n        const fileURL = URL.createObjectURL(file);\n        // create <a> tag dynamically\n        const fileLink = document.createElement('a');\n        fileLink.href = fileURL;\n        // it forces the name of the downloaded file\n        fileLink.download = objectName as string;\n        // triggers the click event\n        fileLink.click();\n      }\n      return;\n    } catch (error: any) {\n      throw new Error(error);\n    }\n  }\n\n  public async listObjects(configParam: ListObjectsByBucketNameRequest) {\n    try {\n      const { bucketName, endpoint, duration = 30000, query = new URLSearchParams() } = configParam;\n\n      verifyBucketName(bucketName);\n      verifyUrl(endpoint);\n\n      const url = `${generateUrlByBucketName(endpoint, bucketName)}?${query?.toString()}`;\n      const headers = new Headers();\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers,\n          method: METHOD_GET,\n        },\n        duration,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        return {\n          code: code || -1,\n          message: message || 'List object error.',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = await parseListObjectsByBucketNameResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'List object success.',\n        statusCode: status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async createFolder(\n    msg: Omit<MsgCreateObject, 'payloadSize' | 'contentType' | 'expectChecksums'>,\n  ) {\n    if (!msg.objectName.endsWith('/')) {\n      throw new Error(\n        'failed to create folder. Folder names must end with a forward slash (/) character',\n      );\n    }\n\n    /**\n     * const file = new File([], 'scc', { type: 'text/plain' });\n      const fileBytes = await file.arrayBuffer();\n      console.log('fileBytes', fileBytes);\n      const rs = new ReedSolomon();\n      const fileBytes = await file.arrayBuffer();\n      const expectCheckSums = rs.encode(new Uint8Array(fileBytes));\n     */\n\n    const newMsg: MsgCreateObject = {\n      ...msg,\n      payloadSize: Long.fromInt(0),\n      contentType: 'text/plain',\n      expectChecksums: [\n        '47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=',\n        '47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=',\n        '47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=',\n        '47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=',\n        '47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=',\n        '47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=',\n        '47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=',\n      ].map((x) => bytesFromBase64(x)),\n    };\n\n    return this.createObject(newMsg);\n  }\n\n  public async delegateCreateFolder(params: DelegatedCreateFolderRequest, authType: AuthType) {\n    const { bucketName, objectName, delegatedOpts, timeout = 10000 } = params;\n\n    let endpoint = params.endpoint;\n    if (!endpoint) {\n      endpoint = await this.sp.getSPUrlByBucket(bucketName);\n    }\n    const { reqMeta, optionsWithOutHeaders, url } = await getDelegatedCreateFolderMetaInfo(\n      endpoint,\n      {\n        bucketName: bucketName,\n        objectName: objectName,\n        // contentType: '',\n        delegatedOpts,\n      },\n    );\n    const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n    try {\n      const result = await this.spClient.callApiV2(\n        url,\n        {\n          ...optionsWithOutHeaders,\n          headers: signHeaders,\n        },\n        timeout,\n      );\n      const { status } = result;\n\n      //@ts-ignore\n      const xmlData = result.text;\n      const res = parseDelegatedCreateFolderResponse(xmlData);\n\n      return { code: 0, message: 'Create folder success.', statusCode: status, body: res };\n    } catch (error: any) {\n      return {\n        code: error.code || -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async putObjectPolicy(\n    bucketName: string,\n    objectName: string,\n    // expirationTime: Date,\n    srcMsg: Omit<MsgPutPolicy, 'resource'>,\n  ) {\n    const resource = GRNToString(newObjectGRN(bucketName, objectName));\n    const msg: MsgPutPolicy = {\n      ...srcMsg,\n      resource,\n      // expirationTime: fromJsonTimestamp(expirationTime),\n    };\n    return await this.storage.putPolicy(msg);\n  }\n\n  public async isObjectPermissionAllowed(\n    bucketName: string,\n    objectName: string,\n    actionType: ActionType,\n    operator: string,\n  ) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n    return await rpc.VerifyPermission({\n      bucketName,\n      objectName,\n      actionType,\n      operator,\n    });\n  }\n\n  public async getObjectPolicy(bucketName: string, objectName: string, principalAddr: string) {\n    const rpc = await this.queryClient.getStorageQueryClient();\n\n    const resource = GRNToString(newObjectGRN(bucketName, objectName));\n\n    return await rpc.QueryPolicyForAccount({\n      resource,\n      principalAddress: principalAddr,\n    });\n  }\n\n  public async deleteObjectPolicy(\n    operator: string,\n    bucketName: string,\n    objectName: string,\n    principalAddr: string,\n    principalType: keyof typeof PrincipalType,\n  ) {\n    const resource = GRNToString(newObjectGRN(bucketName, objectName));\n    const principal: Principal = {\n      type: principalTypeFromJSON(principalType),\n      value: principalAddr,\n    };\n\n    const msg: MsgDeletePolicy = {\n      resource,\n      principal,\n      operator: operator,\n    };\n    return await this.storage.deletePolicy(msg);\n  }\n\n  public async getObjectMeta(params: GetObjectMetaRequest) {\n    const { bucketName, objectName, endpoint } = params;\n    verifyBucketName(bucketName);\n    verifyObjectName(objectName);\n\n    const { url } = getObjectMetaInfo(endpoint, params);\n\n    const result = await this.spClient.callApi(url, {\n      method: METHOD_GET,\n    });\n\n    const xml = await result.text();\n    const res = await parseGetObjectMetaResponse(xml);\n\n    return {\n      code: 0,\n      message: 'get object meta success.',\n      statusCode: result.status,\n      body: res,\n    };\n  }\n\n  public async listObjectsByIds(params: ListObjectsByIDsRequest) {\n    try {\n      const sp = await this.sp.getInServiceSP();\n      const { url } = getListObjectsByIDsMetaInfo(sp.endpoint, params);\n\n      const result = await this.spClient.callApi(\n        url,\n        {\n          headers: {},\n          method: METHOD_GET,\n        },\n        3000,\n      );\n      const { status } = result;\n      if (!result.ok) {\n        const xmlError = await result.text();\n        const { code, message } = await parseError(xmlError);\n        throw {\n          code: code || -1,\n          message: message || 'error',\n          statusCode: status,\n        };\n      }\n\n      const xmlData = await result.text();\n      const res = await parseListObjectsByIdsResponse(xmlData);\n\n      return {\n        code: 0,\n        message: 'success',\n        statusCode: status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n\n  public async listObjectPolicies(params: GetListObjectPoliciesRequest) {\n    let endpoint = params.endpoint;\n    if (!endpoint) {\n      endpoint = await this.sp.getSPUrlByBucket(params.bucketName);\n    }\n    const { url } = getListObjectPoliciesMetaInfo(endpoint, params);\n\n    const result = await this.spClient.callApi(url, {\n      headers: {},\n      method: METHOD_GET,\n    });\n\n    const xml = await result.text();\n    const res = parseGetListObjectPoliciesResponse(xml);\n\n    return {\n      code: 0,\n      message: 'success',\n      statusCode: result.status,\n      body: res,\n    };\n  }\n\n  public async getObjectUploadProgress(bucketName: string, objectName: string, authType: AuthType) {\n    const { objectInfo } = await this.headObject(bucketName, objectName);\n\n    if (!objectInfo) {\n      throw new Error('object not exist');\n    }\n\n    if (objectInfo.objectStatus == ObjectStatus.OBJECT_STATUS_CREATED) {\n      const { body, message } = await this.getObjectStatusFromSp(bucketName, objectName, authType);\n\n      if (!body) {\n        throw new Error('fail to fetch object uploading progress from sp ' + message);\n      }\n\n      return body.QueryUploadProgress.ProgressDescription;\n    }\n\n    return objectInfo.objectStatus.toString();\n  }\n}\n","import { IUpdateOneSpPubKeyParams } from '@/types';\nimport { fetchWithTimeout } from '@/utils/http';\nimport { Headers } from 'cross-fetch';\n\nexport const updateUserAccountKey = async ({\n  address,\n  domain,\n  sp,\n  pubKey,\n  expireDate,\n  authorization,\n}: IUpdateOneSpPubKeyParams) => {\n  let result;\n  const url = `${sp.endpoint}/auth/update_key_v2`;\n  const headers = new Headers({\n    'X-Gnfd-User-Address': address,\n    'X-Gnfd-App-Domain': domain,\n    'X-Gnfd-App-Reg-Public-Key': pubKey,\n    'X-Gnfd-Expiry-Timestamp': expireDate,\n    Authorization: authorization,\n  });\n\n  try {\n    result = await fetchWithTimeout(url, {\n      headers,\n      method: 'POST',\n    });\n    if (!result.ok) {\n      return { code: -1, data: { address }, message: 'upload sp pubKey error.' };\n    }\n  } catch (error) {\n    return { code: -1, data: { address }, message: 'upload sp pubKey error.' };\n  }\n\n  return {\n    code: 0,\n    data: {\n      ...sp,\n    },\n  };\n};\n","import {\n  IFetchNonces,\n  TGenSecondSignMsgParams,\n  IPersonalSignParams,\n  ISp,\n  IUpdateSpsPubKeyParams,\n} from '../types/storage';\nimport { getNonce } from '@/clients/spclient/spApis/getNonce';\nimport { updateUserAccountKey } from '@/clients/spclient/spApis/updateUserAccountKey';\n\nconst delay = <T>(ms: number, value: T) =>\n  new Promise((resolve) => setTimeout(() => resolve(value), ms));\n\nexport const promiseRaceAll = async (\n  promises: Promise<unknown>[],\n  timeout = 3000,\n  timeoutValue: any = { code: -1 },\n) => {\n  return Promise.all(\n    promises.map((p: Promise<unknown>) => {\n      return Promise.race([p, delay(timeout, timeoutValue)]);\n    }),\n  );\n};\n\nexport const genLocalSignMsg = (sps: ISp[], domain: string) => {\n  const spMsg = sps\n    .map((sp: ISp) => {\n      return `- SP ${sp.endpoint} (name:${sp.name || ''}) with nonce:${sp.nonce}`;\n    })\n    .join('\\n');\n  const firstSign = `Sign this message to let dapp ${domain} access the following SPs:\n    ${spMsg}`;\n\n  return firstSign;\n};\n\nexport const fetchNonces = async ({ sps, address, domain }: IFetchNonces): Promise<any> => {\n  const promises = sps.map((sp: ISp) =>\n    getNonce({\n      spEndpoint: sp.endpoint,\n      spAddress: sp.address,\n      spName: sp.name,\n      address,\n      domain,\n    }),\n  );\n  const res = await promiseRaceAll(promises, 3000, { code: -1, nonce: null });\n\n  return res;\n};\n\nexport const updateSpsPubKey = async ({\n  address,\n  sps,\n  domain,\n  pubKey,\n  expireDate,\n  authorization,\n}: IUpdateSpsPubKeyParams) => {\n  return Promise.all(\n    sps.map((sp: ISp) =>\n      Promise.race([\n        updateUserAccountKey({\n          address,\n          domain,\n          sp,\n          pubKey,\n          expireDate,\n          authorization,\n        }),\n        delay(3000, { code: -1, data: { address } }),\n      ]),\n    ),\n  );\n};\n\nexport const getSpsEndpoint = (sps: ISp[]) => {\n  const spsEndpoint = sps.map((sp) => sp.endpoint);\n\n  return spsEndpoint;\n};\n\nexport const genSecondSignMsg = ({\n  domain,\n  address,\n  pubKey,\n  chainId,\n  issuedDate,\n  expireDate,\n}: TGenSecondSignMsgParams): string => {\n  // NOTICE: DO NOT CHANGE THE TEMPLATE FORMAT\n  return `${domain} wants you to sign in with your BNB Greenfield account:${address}\nRegister your identity public key ${pubKey}\nURI: ${domain}\nVersion: 1\nChain ID: ${chainId}\nIssued At: ${issuedDate}\nExpiration Time: ${expireDate}\n`;\n};\n\nexport const personalSign = async ({ message, address, provider }: IPersonalSignParams) => {\n  const sign = await provider.request({\n    method: 'personal_sign',\n    params: [message, address],\n  });\n\n  return sign;\n};\n","import { hexlify } from '@ethersproject/bytes';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { injectable } from 'tsyringe';\nimport { convertTimeStampToDate, getUtcZeroTimestamp, SpResponse } from '..';\nimport { NORMAL_ERROR_CODE } from '../constants/http';\nimport { genSecondSignMsg, personalSign, updateSpsPubKey } from '../offchainauth';\nimport {\n  IGenOffChainAuthKeyPairAndUpload,\n  IReturnOffChainAuthKeyPairAndUpload,\n} from '../types/storage';\n\nexport interface IOffChainAuth {\n  /**\n   * generate off-chain auth key pair and upload the public key to meta service, return the seedString for signing message when user need to get approval from sp.\n   */\n  genOffChainAuthKeyPairAndUpload(\n    params: IGenOffChainAuthKeyPairAndUpload,\n    provider: any,\n  ): Promise<SpResponse<IReturnOffChainAuthKeyPairAndUpload>>;\n}\n\n@injectable()\nexport class OffChainAuth implements IOffChainAuth {\n  public async genOffChainAuthKeyPairAndUpload(\n    { sps, address, domain, expirationMs, chainId }: IGenOffChainAuthKeyPairAndUpload,\n    provider: any,\n  ) {\n    try {\n      const { privateKey, publicKey } = this.generateKeys();\n\n      const curUtcZeroTimestamp = getUtcZeroTimestamp();\n      const expirationTime = curUtcZeroTimestamp + expirationMs;\n      const issuedDate = convertTimeStampToDate(curUtcZeroTimestamp);\n      const expireDate = convertTimeStampToDate(expirationTime);\n      const signMsg = genSecondSignMsg({\n        domain,\n        address,\n        pubKey: hexlify(publicKey).slice(2),\n        chainId,\n        issuedDate,\n        expireDate,\n      });\n      const signRes = await personalSign({ message: signMsg, address, provider });\n      const jsonSignMsg = JSON.stringify(signMsg).replace(/\\\"/g, '');\n      const authorization = `GNFD1-ETH-PERSONAL_SIGN,SignedMsg=${jsonSignMsg},Signature=${signRes}`;\n\n      const res = await updateSpsPubKey({\n        address,\n        sps,\n        domain,\n        pubKey: hexlify(publicKey).slice(2),\n        expireDate,\n        authorization,\n      });\n\n      const uploadSpsPubkeyFailed = res\n        .filter((item: any) => item.code !== 0)\n        .map((item: any) => item.data.address);\n      if (uploadSpsPubkeyFailed.length === sps.length) {\n        throw new Error(`No SP service is available. Please try again later.`);\n      }\n      const successSps: string[] = [];\n      res.forEach((item: any) => {\n        if (item.code === 0) {\n          successSps.push(item.data.address);\n        }\n      });\n\n      return {\n        code: 0,\n        body: {\n          seedString: hexlify(privateKey),\n          keypairs: {\n            privateKey: hexlify(privateKey).slice(2),\n            publicKey: hexlify(publicKey).slice(2),\n          },\n          expirationTime,\n          spAddresses: successSps,\n          failedSpAddresses: uploadSpsPubkeyFailed,\n        },\n        message: 'Sign and upload public key success',\n      };\n    } catch (error: any) {\n      return { code: -1, message: error.message, statusCode: error?.status || NORMAL_ERROR_CODE };\n    }\n  }\n\n  private generateKeys() {\n    const privateKey = ed25519.utils.randomPrivateKey();\n    const publicKey = ed25519.getPublicKey(privateKey);\n\n    return {\n      privateKey,\n      publicKey,\n    };\n  }\n}\n","import { EMPTY_STRING_SHA256, METHOD_GET } from '@/constants';\nimport { ReqMeta } from '@/types';\nimport { convertStrToBool } from '@/types/sp/Common';\nimport {\n  ListUserPaymentAccountsResponse,\n  ListUserPaymentAccountsResquest,\n} from '@/types/sp/ListUserPaymentAccounts';\nimport { XMLParser } from 'fast-xml-parser';\nimport { getSortQuery, getSortQueryParams } from '../auth';\n\n// https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/list_user_payment_accounts.md\nexport const getListUserPaymentAccountMetaInfo = (\n  endpoint: string,\n  params: ListUserPaymentAccountsResquest,\n) => {\n  const path = '/';\n  const queryMap = {\n    'user-payments': 'null',\n  };\n  const query = getSortQuery(queryMap);\n  let url = new URL(path, endpoint);\n  url = getSortQueryParams(url, queryMap);\n\n  const reqMeta: Partial<ReqMeta> = {\n    contentSHA256: EMPTY_STRING_SHA256,\n    method: METHOD_GET,\n    url: {\n      hostname: new URL(url).hostname,\n      query,\n      path,\n    },\n    userAddress: params.account,\n  };\n\n  const optionsWithOutHeaders: Omit<RequestInit, 'headers'> = {\n    method: METHOD_GET,\n  };\n\n  return {\n    url: url.href,\n    optionsWithOutHeaders,\n    reqMeta,\n  };\n};\n\nexport const parseListUserPaymentAccountResponse = (data: string) => {\n  const xmlParser = new XMLParser({\n    parseTagValue: false,\n  });\n  const res = xmlParser.parse(data) as ListUserPaymentAccountsResponse;\n\n  let PaymentAccounts = res.GfSpListUserPaymentAccountsResponse.PaymentAccounts || [];\n\n  if (PaymentAccounts) {\n    if (!Array.isArray(PaymentAccounts)) {\n      PaymentAccounts = [PaymentAccounts];\n    }\n\n    PaymentAccounts = PaymentAccounts.map((item) => {\n      item.PaymentAccount = {\n        ...item.PaymentAccount,\n        // @ts-ignore\n        Refundable: convertStrToBool(item.PaymentAccount.Refundable),\n        UpdateAt: Number(item.PaymentAccount.UpdateAt),\n        UpdateTime: Number(item.PaymentAccount.UpdateTime),\n      };\n\n      return item;\n    });\n  }\n\n  res.GfSpListUserPaymentAccountsResponse.PaymentAccounts = PaymentAccounts;\n\n  return res;\n};\n","import { assertAuthType } from '@/utils/asserts/params';\nimport {\n  QueryAutoSettleRecordsRequest,\n  QueryAutoSettleRecordsResponse,\n  QueryDynamicBalanceRequest,\n  QueryDynamicBalanceResponse,\n  QueryGetStreamRecordResponse,\n  QueryOutFlowsRequest,\n  QueryOutFlowsResponse,\n  QueryParamsByTimestampRequest,\n  QueryParamsByTimestampResponse,\n  QueryParamsResponse,\n  QueryPaymentAccountCountRequest,\n  QueryPaymentAccountCountResponse,\n  QueryPaymentAccountCountsRequest,\n  QueryPaymentAccountCountsResponse,\n  QueryPaymentAccountRequest,\n  QueryPaymentAccountResponse,\n  QueryPaymentAccountsByOwnerRequest,\n  QueryPaymentAccountsByOwnerResponse,\n  QueryPaymentAccountsRequest,\n  QueryPaymentAccountsResponse,\n  QueryStreamRecordsRequest,\n  QueryStreamRecordsResponse,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';\nimport {\n  MsgDeposit,\n  MsgDisableRefund,\n  MsgWithdraw,\n} from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport {\n  AuthType,\n  MsgDepositTypeUrl,\n  MsgDisableRefundTypeUrl,\n  MsgWithdrawTypeUrl,\n  NORMAL_ERROR_CODE,\n  SpResponse,\n  TxResponse,\n} from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport {\n  getListUserPaymentAccountMetaInfo,\n  parseListUserPaymentAccountResponse,\n} from '../clients/spclient/spApis/listUserPaymentAccounts';\nimport { SpClient } from '../clients/spclient/spClient';\nimport { TxClient } from '../clients/txClient';\nimport { MsgDepositSDKTypeEIP712 } from '../messages/greenfield/payment/MsgDeposit';\nimport { MsgDisableRefundSDKTypeEIP712 } from '../messages/greenfield/payment/MsgDisableRefund';\nimport { MsgWithdrawSDKTypeEIP712 } from '../messages/greenfield/payment/MsgWithdraw';\nimport {\n  ListUserPaymentAccountsResponse,\n  ListUserPaymentAccountsResquest,\n} from '../types/sp/ListUserPaymentAccounts';\nimport { SpConfig } from './config';\nimport { Sp } from './sp';\n\nexport interface IPayment {\n  /**\n   * retrieves stream record information for a given stream address.\n   * the account must actions: deposit, withdraw\n   */\n  getStreamRecord(account: string): Promise<QueryGetStreamRecordResponse>;\n\n  getStreamRecordAll(request: QueryStreamRecordsRequest): Promise<QueryStreamRecordsResponse>;\n\n  /**\n   * deposits BNB to a stream account.\n   */\n  deposit(msg: MsgDeposit): Promise<TxResponse>;\n\n  /**\n   * withdraws BNB from a stream account.\n   */\n  withdraw(msg: MsgWithdraw): Promise<TxResponse>;\n\n  /**\n   * disables refund for a stream account.\n   */\n  disableRefund(msg: MsgDisableRefund): Promise<TxResponse>;\n\n  params(): Promise<QueryParamsResponse>;\n\n  paramsByTimestamp(\n    request: QueryParamsByTimestampRequest,\n  ): Promise<QueryParamsByTimestampResponse>;\n\n  paymentAccount(request: QueryPaymentAccountRequest): Promise<QueryPaymentAccountResponse>;\n\n  paymentAccountAll(request: QueryPaymentAccountsRequest): Promise<QueryPaymentAccountsResponse>;\n\n  /** Queries a PaymentAccountCount by index. */\n  getPaymentAccountCount(\n    request: QueryPaymentAccountCountRequest,\n  ): Promise<QueryPaymentAccountCountResponse>;\n\n  /** Queries a list of PaymentAccountCount items. */\n  getPaymentAccountCounts(\n    request: QueryPaymentAccountCountsRequest,\n  ): Promise<QueryPaymentAccountCountsResponse>;\n\n  /** Queries a list of DynamicBalance items. */\n  dynamicBalance(request: QueryDynamicBalanceRequest): Promise<QueryDynamicBalanceResponse>;\n\n  /** Queries a list of GetPaymentAccountsByOwner items. */\n  getPaymentAccountsByOwner(\n    request: QueryPaymentAccountsByOwnerRequest,\n  ): Promise<QueryPaymentAccountsByOwnerResponse>;\n\n  getAutoSettleRecords(\n    request: QueryAutoSettleRecordsRequest,\n  ): Promise<QueryAutoSettleRecordsResponse>;\n\n  getOutFlows(request: QueryOutFlowsRequest): Promise<QueryOutFlowsResponse>;\n\n  listUserPaymentAccounts(\n    params: ListUserPaymentAccountsResquest,\n    authType: AuthType,\n    config?: SpConfig,\n  ): Promise<SpResponse<ListUserPaymentAccountsResponse>>;\n}\n\n@injectable()\nexport class Payment implements IPayment {\n  constructor(\n    @inject(delay(() => TxClient)) private txClient: TxClient,\n    @inject(delay(() => Sp)) private sp: Sp,\n  ) {}\n  private spClient = container.resolve(SpClient);\n  private queryClient: RpcQueryClient = container.resolve(RpcQueryClient);\n\n  public async getStreamRecord(account: string) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.StreamRecord({\n      account,\n    });\n  }\n\n  public async getStreamRecordAll(request: QueryStreamRecordsRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.StreamRecords(request);\n  }\n\n  public async params() {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.Params();\n  }\n\n  public async paramsByTimestamp(request: QueryParamsByTimestampRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.ParamsByTimestamp(request);\n  }\n\n  public async getPaymentAccountCount(request: QueryPaymentAccountCountRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.PaymentAccountCount(request);\n  }\n\n  public async getPaymentAccountCounts(request: QueryPaymentAccountCountsRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.PaymentAccountCounts(request);\n  }\n\n  public async paymentAccount(request: QueryPaymentAccountRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.PaymentAccount(request);\n  }\n\n  public async paymentAccountAll(request: QueryPaymentAccountsRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.PaymentAccounts(request);\n  }\n\n  public async dynamicBalance(request: QueryDynamicBalanceRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.DynamicBalance(request);\n  }\n\n  public async getPaymentAccountsByOwner(request: QueryPaymentAccountsByOwnerRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.PaymentAccountsByOwner(request);\n  }\n\n  public async getAutoSettleRecords(request: QueryAutoSettleRecordsRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.AutoSettleRecords(request);\n  }\n\n  public async getOutFlows(request: QueryOutFlowsRequest) {\n    const rpc = await this.queryClient.getPaymentQueryClient();\n    return await rpc.OutFlows(request);\n  }\n\n  public async deposit(msg: MsgDeposit) {\n    return await this.txClient.tx(\n      MsgDepositTypeUrl,\n      msg.creator,\n      MsgDepositSDKTypeEIP712,\n      MsgDeposit.toSDK(msg),\n      MsgDeposit.encode(msg).finish(),\n    );\n  }\n\n  public async withdraw(msg: MsgWithdraw) {\n    return await this.txClient.tx(\n      MsgWithdrawTypeUrl,\n      msg.creator,\n      MsgWithdrawSDKTypeEIP712,\n      MsgWithdraw.toSDK(msg),\n      MsgWithdraw.encode(msg).finish(),\n    );\n  }\n\n  public async disableRefund(msg: MsgDisableRefund) {\n    return await this.txClient.tx(\n      MsgDisableRefundTypeUrl,\n      msg.owner,\n      MsgDisableRefundSDKTypeEIP712,\n      MsgDisableRefund.toSDK(msg),\n      MsgDisableRefund.encode(msg).finish(),\n    );\n  }\n\n  public async listUserPaymentAccounts(\n    params: ListUserPaymentAccountsResquest,\n    authType: AuthType,\n    config?: SpConfig,\n  ) {\n    try {\n      assertAuthType(authType);\n      let endpoint = '';\n      if (config && config.endpoint) {\n        endpoint = config.endpoint;\n      } else {\n        const sp = await this.sp.getInServiceSP();\n        endpoint = sp.endpoint;\n      }\n\n      const { url, optionsWithOutHeaders, reqMeta } = getListUserPaymentAccountMetaInfo(\n        endpoint,\n        params,\n      );\n\n      const signHeaders = await this.spClient.signHeaders(reqMeta, authType);\n\n      const result = await this.spClient.callApi(url, {\n        ...optionsWithOutHeaders,\n        headers: signHeaders,\n      });\n\n      const xml = await result.text();\n      const res = parseListUserPaymentAccountResponse(xml);\n\n      return {\n        code: 0,\n        message: 'Get bucket success.',\n        statusCode: result.status,\n        body: res,\n      };\n    } catch (error: any) {\n      return {\n        code: -1,\n        message: error.message,\n        statusCode: error?.statusCode || NORMAL_ERROR_CODE,\n      };\n    }\n  }\n}\n","export const MsgSubmitProposalSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'initial_deposit',\n      type: 'TypeMsg1InitialDeposit[]',\n    },\n    {\n      name: 'messages',\n      type: 'TypeAny[]',\n    },\n    {\n      name: 'metadata',\n      type: 'string',\n    },\n    {\n      name: 'proposer',\n      type: 'string',\n    },\n    {\n      name: 'summary',\n      type: 'string',\n    },\n    {\n      name: 'title',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n  ],\n  TypeMsg1InitialDeposit: [\n    {\n      name: 'amount',\n      type: 'string',\n    },\n    {\n      name: 'denom',\n      type: 'string',\n    },\n  ],\n  TypeAny: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'value',\n      type: 'bytes',\n    },\n  ],\n};\n","export const MsgVoteSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'metadata',\n      type: 'string',\n    },\n    {\n      name: 'option',\n      type: 'string',\n    },\n    {\n      name: 'proposal_id',\n      type: 'uint64',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'voter',\n      type: 'string',\n    },\n  ],\n};\n","import { voteOptionToJSON } from '@bnb-chain/greenfield-cosmos-types/cosmos/gov/v1/gov';\nimport { MsgSubmitProposal, MsgVote } from '@bnb-chain/greenfield-cosmos-types/cosmos/gov/v1/tx';\nimport { MsgCreateValidator } from '@bnb-chain/greenfield-cosmos-types/cosmos/staking/v1beta1/tx';\nimport { delay, inject, injectable } from 'tsyringe';\nimport { encodeToHex, MsgSubmitProposalTypeUrl, MsgVoteTypeUrl, TxResponse } from '..';\nimport { TxClient } from '../clients/txClient';\nimport { MsgSubmitProposalSDKTypeEIP712 } from '../messages/cosmos/gov/MsgSubmitProposal';\nimport { MsgVoteSDKTypeEIP712 } from '../messages/cosmos/gov/MsgVote';\n\nexport interface IProposal {\n  /**\n   * NOTICE: only validator can use this api\n   */\n  submitProposal(createValidatorTx: object, srcMsg: MsgSubmitProposal): Promise<TxResponse>;\n\n  /**\n   * NOTICE: only validator can use this api\n   */\n  voteProposal(msg: MsgVote): Promise<TxResponse>;\n}\n\n@injectable()\nexport class Proposal implements IProposal {\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n\n  public async voteProposal(msg: MsgVote) {\n    return await this.txClient.tx(\n      MsgVoteTypeUrl,\n      msg.voter,\n      MsgVoteSDKTypeEIP712,\n      {\n        ...MsgVote.toSDK(msg),\n        option: voteOptionToJSON(msg.option),\n        proposal_id: msg.proposalId.toNumber(),\n      },\n      MsgVote.encode(msg).finish(),\n    );\n  }\n\n  public async submitProposal(createMsg: MsgCreateValidator, submitMsg: MsgSubmitProposal) {\n    return await this.txClient.tx(\n      MsgSubmitProposalTypeUrl,\n      submitMsg.proposer,\n      MsgSubmitProposalSDKTypeEIP712,\n      {\n        ...MsgSubmitProposal.toSDK(submitMsg),\n        messages: [\n          {\n            type: '/cosmos.staking.v1beta1.MsgCreateValidator',\n            value: encodeToHex(JSON.stringify(createMsg)),\n            // base64FromBytes(arrayify('0x' + encodeToHex(JSON.stringify(createMsg)))),\n          },\n        ],\n      },\n      MsgSubmitProposal.encode(submitMsg).finish(),\n    );\n  }\n}\n","export const MsgCreateValidatorSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'bls_key',\n      type: 'string',\n    },\n    {\n      name: 'bls_proof',\n      type: 'string',\n    },\n    {\n      name: 'challenger_address',\n      type: 'string',\n    },\n    {\n      name: 'commission',\n      type: 'TypeMsg1Commission',\n    },\n    {\n      name: 'delegator_address',\n      type: 'string',\n    },\n    {\n      name: 'description',\n      type: 'TypeMsg1Description',\n    },\n    {\n      name: 'from',\n      type: 'string',\n    },\n    {\n      name: 'min_self_delegation',\n      type: 'string',\n    },\n    {\n      name: 'pubkey',\n      type: 'TypeAny',\n    },\n    {\n      name: 'relayer_address',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'validator_address',\n      type: 'string',\n    },\n    {\n      name: 'value',\n      type: 'TypeMsg1Value',\n    },\n  ],\n  TypeMsg1Commission: [\n    {\n      name: 'max_change_rate',\n      type: 'string',\n    },\n    {\n      name: 'max_rate',\n      type: 'string',\n    },\n    {\n      name: 'rate',\n      type: 'string',\n    },\n  ],\n  TypeMsg1Description: [\n    {\n      name: 'details',\n      type: 'string',\n    },\n    {\n      name: 'identity',\n      type: 'string',\n    },\n    {\n      name: 'moniker',\n      type: 'string',\n    },\n    {\n      name: 'security_contact',\n      type: 'string',\n    },\n    {\n      name: 'website',\n      type: 'string',\n    },\n  ],\n  TypeMsg1Value: [\n    {\n      name: 'amount',\n      type: 'string',\n    },\n    {\n      name: 'denom',\n      type: 'string',\n    },\n  ],\n  TypeAny: [\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'value',\n      type: 'bytes',\n    },\n  ],\n};\n","export const MsgEditValidatorSDKTypeEIP712 = {\n  Msg1: [\n    {\n      name: 'bls_key',\n      type: 'string',\n    },\n    {\n      name: 'bls_proof',\n      type: 'string',\n    },\n    {\n      name: 'challenger_address',\n      type: 'string',\n    },\n    {\n      name: 'commission_rate',\n      type: 'string',\n    },\n    {\n      name: 'description',\n      type: 'TypeMsg1Description',\n    },\n    {\n      name: 'min_self_delegation',\n      type: 'string',\n    },\n    {\n      name: 'relayer_address',\n      type: 'string',\n    },\n    {\n      name: 'type',\n      type: 'string',\n    },\n    {\n      name: 'validator_address',\n      type: 'string',\n    },\n  ],\n  TypeMsg1Description: [\n    {\n      name: 'details',\n      type: 'string',\n    },\n    {\n      name: 'identity',\n      type: 'string',\n    },\n    {\n      name: 'moniker',\n      type: 'string',\n    },\n    {\n      name: 'security_contact',\n      type: 'string',\n    },\n    {\n      name: 'website',\n      type: 'string',\n    },\n  ],\n};\n","import {\n  QueryValidatorsRequest,\n  QueryValidatorsResponse,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/staking/v1beta1/query';\nimport {\n  MsgCreateValidator,\n  MsgEditValidator,\n} from '@bnb-chain/greenfield-cosmos-types/cosmos/staking/v1beta1/tx';\nimport { container, delay, inject, injectable } from 'tsyringe';\nimport { MsgCreateValidatorTypeUrl, MsgEditValidatorTypeUrl, TxResponse } from '..';\nimport { RpcQueryClient } from '../clients/queryclient';\nimport { TxClient } from '../clients/txClient';\nimport { MsgCreateValidatorSDKTypeEIP712 } from '../messages/cosmos/staking/MsgCreateValidator';\nimport { MsgEditValidatorSDKTypeEIP712 } from '../messages/cosmos/staking/MsgEditValidator';\nimport { Proposal } from './proposal';\n\nexport interface IValidator {\n  /**\n   * lists all validators (if status is empty string) or validators filtered by status.\n   * STATUS:\n   * \"BOND_STATUS_UNBONDED\",\n   * \"BOND_STATUS_UNBONDING\",\n   * \"BOND_STATUS_BONDED\",\n   */\n  listValidators(request: QueryValidatorsRequest): Promise<QueryValidatorsResponse>;\n\n  /**\n   * NOTICE: only validator can use this api\n   */\n  createValidator(address: string, createValidatorSrcMsg: MsgCreateValidator): Promise<TxResponse>;\n\n  /**\n   * NOTICE: only validator can use this api\n   */\n  editValidator(address: string, msg: MsgEditValidator): Promise<TxResponse>;\n}\n\n@injectable()\nexport class Validator implements IValidator {\n  constructor(@inject(delay(() => TxClient)) private txClient: TxClient) {}\n  private queryClient: RpcQueryClient = container.resolve(RpcQueryClient);\n\n  private proposal: Proposal = container.resolve(Proposal);\n\n  public async listValidators(request: QueryValidatorsRequest) {\n    const client = await this.queryClient.getStakingClient();\n    return client.Validators(request);\n  }\n\n  public async createValidator(address: string, msg: MsgCreateValidator) {\n    return await this.txClient.tx(\n      MsgCreateValidatorTypeUrl,\n      address,\n      MsgCreateValidatorSDKTypeEIP712,\n      MsgCreateValidator.toSDK(msg),\n      MsgCreateValidator.encode(msg).finish(),\n    );\n  }\n\n  public async editValidator(address: string, msg: MsgEditValidator) {\n    return await this.txClient.tx(\n      MsgEditValidatorTypeUrl,\n      address,\n      MsgEditValidatorSDKTypeEIP712,\n      MsgEditValidator.toSDK(msg),\n      MsgEditValidator.encode(msg).finish(),\n    );\n  }\n}\n","import 'reflect-metadata';\nimport { container } from 'tsyringe';\nimport { Account, IAccount } from './api/account';\nimport { Basic, IBasic } from './api/basic';\nimport { Bucket, IBucket } from './api/bucket';\nimport { Challenge, IChallenge } from './api/challenge';\nimport { CrossChain, ICrossChain } from './api/crosschain';\nimport { Distribution, IDistribution } from './api/distribution';\nimport { FeeGrant, IFeeGrant } from './api/feegrant';\nimport { Gashub, IGashub } from './api/gashub';\nimport { Group, IGroup } from './api/group';\nimport { IObject, Objects } from './api/objects';\nimport { IOffChainAuth, OffChainAuth } from './api/offchainauth';\nimport { IPayment, Payment } from './api/payment';\nimport { IProposal, Proposal } from './api/proposal';\nimport { ISp, Sp } from './api/sp';\nimport { IStorage, Storage } from './api/storage';\nimport { Validator } from './api/validator';\nimport { IVirtualGroup, VirtualGroup } from './api/virtualGroup';\nimport { RpcQueryClient } from './clients/queryclient';\nimport { ISpClient, SpClient } from './clients/spclient/spClient';\nimport { ITxClient, TxClient } from './clients/txClient';\n\nexport class Client {\n  /**\n   * @rpcUrl string\n   * @chaidId string\n   * @wasmURL optional, need setting only used for browser\n   */\n  static create(rpcUrl: string, chainId: string): Client {\n    container.register('RPC_URL', { useValue: rpcUrl });\n    container.register('CHAIN_ID', { useValue: chainId });\n\n    const account = container.resolve<Account>(Account);\n    const basic = container.resolve<Basic>(Basic);\n    const bucket = container.resolve<Bucket>(Bucket);\n    const challenge = container.resolve<Challenge>(Challenge);\n    const crosschain = container.resolve<CrossChain>(CrossChain);\n    const distribution = container.resolve<Distribution>(Distribution);\n    const feegrant = container.resolve<FeeGrant>(FeeGrant);\n    const gashub = container.resolve<Gashub>(Gashub);\n    const group = container.resolve<Group>(Group);\n    const objects = container.resolve<Objects>(Objects);\n    const payment = container.resolve<Payment>(Payment);\n    const proposal = container.resolve<Proposal>(Proposal);\n    const queryClient = container.resolve<RpcQueryClient>(RpcQueryClient);\n    const sp = container.resolve<Sp>(Sp);\n    const spClient = container.resolve(SpClient);\n    const storage = container.resolve<Storage>(Storage);\n    const txClient = container.resolve<TxClient>(TxClient);\n    const offchainauth = container.resolve<OffChainAuth>(OffChainAuth);\n    const validator = container.resolve<Validator>(Validator);\n    const virtualGroup = container.resolve<VirtualGroup>(VirtualGroup);\n\n    return new Client(\n      account,\n      basic,\n      bucket,\n      challenge,\n      crosschain,\n      distribution,\n      feegrant,\n      gashub,\n      group,\n      objects,\n      payment,\n      proposal,\n      queryClient,\n      sp,\n      spClient,\n      storage,\n      txClient,\n      offchainauth,\n      validator,\n      virtualGroup,\n    );\n  }\n\n  constructor(\n    public account: IAccount,\n    public basic: IBasic,\n    public bucket: IBucket,\n    public challenge: IChallenge,\n    public crosschain: ICrossChain,\n    public distribution: IDistribution,\n    public feegrant: IFeeGrant,\n    public gashub: IGashub,\n    public group: IGroup,\n    public object: IObject,\n    public payment: IPayment,\n    public proposal: IProposal,\n    public queryClient: RpcQueryClient,\n    public sp: ISp,\n    public spClient: ISpClient,\n    public storage: IStorage,\n    public txClient: ITxClient,\n    public offchainauth: IOffChainAuth,\n    public validator: Validator,\n    public virtualGroup: IVirtualGroup,\n  ) {}\n}\n","import type { ReqMeta } from '@/types';\nimport { getGetObjectMetaInfo } from './getObject';\nimport { getPutObjectMetaInfo } from './putObject';\nimport { getQueryBucketReadQuotaMetaInfo } from './queryBucketReadQuota';\n\nexport type SPMetaInfo = {\n  url: string;\n  optionsWithOutHeaders: Omit<RequestInit, 'headers'>;\n  reqMeta: Partial<ReqMeta>;\n};\n\nexport const SpMetaInfo = {\n  getGetObjectMetaInfo,\n  getPutObjectMetaInfo,\n  getQueryBucketReadQuotaMetaInfo,\n};\n"],"names":["Any","mapValues","sortBy","cloneDeep","get","set","toUtf8String","base64","hexlify","arrayify","publicKeyCreate","recoverPublicKey","computePublicKey","PubKey","TypedDataUtils","SignTypedDataVersion","formatEther","AuthQueryClientImpl","BankQueryClientImpl","PaymentQueryClientImpl","SpQueryClientImpl","ChallengeQueryClientImpl","CrosschainQueryClientImpl","OracleQueryClientImpl","BridgeQueryClientImpl","FeeGrantQueryClientImpl","StorageQueryClientImpl","MsgClientImpl","GashubClientImpl","VirtualGroupClientImpl","StakingQueryClientImpl","injectable","inject","Tendermint37Client","QueryClient","setupAuthExtension","setupAuthzExtension","setupBankExtension","setupDistributionExtension","setupFeegrantExtension","setupGovExtension","setupIbcExtension","setupMintExtension","setupSlashingExtension","setupStakingExtension","setupTxExtension","createProtobufRpcClient","container","TxRaw","TxBody","signTypedData","makeAuthInfoBytes","ServiceClientImpl","Tx","AuthInfo","SimulateRequest","StargateClient","MsgMultiSend","MsgCreatePaymentAccount","BaseAccount","MsgSend","delay","tdServiceClientImpl","Long","utf8ToBytes","ed25519","Headers","signingKey","SigningKey","joinSignature","keccak256","toUtf8Bytes","toHex","XMLParser","BasicAllowance","AllowedMsgAllowance","fromTimestamp","ResourceType","dayjs","utc","timezone","fetch","superagent","isNode","MsgSettle","Status","actionTypeFromJSON","MsgPutPolicy","MsgDeletePolicy","MsgSetTag","MsgSetBucketFlowRateLimit","PickVGFStrategy","MsgCreateBucket","MsgDeleteBucket","MsgToggleSPAsDelegatedAgent","visibilityTypeFromJSON","UInt64Value","MsgUpdateBucketInfo","principalTypeFromJSON","bytesFromBase64","MsgCancelMigrateBucket","MsgMigrateBucket","MsgSubmit","MsgAttest","MsgTransferOut","MsgClaim","MsgMirrorGroup","MsgMirrorBucket","MsgMirrorObject","MsgSetWithdrawAddress","MsgWithdrawValidatorCommission","MsgWithdrawDelegatorReward","MsgFundCommunityPool","MsgGrantAllowance","base64FromBytes","MsgRevokeAllowance","MsgCreateGroup","MsgDeleteGroup","MsgUpdateGroupMember","MsgUpdateGroupExtra","MsgLeaveGroup","MsgCreateObject","ObjectStatus","MsgCancelCreateObject","MsgDeleteObject","MsgUpdateObjectInfo","MsgDeposit","MsgWithdraw","MsgDisableRefund","MsgVote","voteOptionToJSON","MsgSubmitProposal","MsgCreateValidator","MsgEditValidator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwCA;AACO,SAAS,UAAU,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE;AAC1D,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;AACjI,IAAI,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AACnI,SAAS,KAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;AACtJ,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAClE,CAAC;AACD;AACO,SAAS,OAAO,CAAC,UAAU,EAAE,SAAS,EAAE;AAC/C,IAAI,OAAO,UAAU,MAAM,EAAE,GAAG,EAAE,EAAE,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC,EAAE;AACzE,CAAC;AA8CD;AACO,SAAS,UAAU,CAAC,WAAW,EAAE,aAAa,EAAE;AACvD,IAAI,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,UAAU,EAAE,OAAO,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;AACnI,CAAC;AACD;AACO,SAAS,SAAS,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE;AAC7D,IAAI,SAAS,KAAK,CAAC,KAAK,EAAE,EAAE,OAAO,KAAK,YAAY,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,UAAU,OAAO,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;AAChH,IAAI,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,EAAE,UAAU,OAAO,EAAE,MAAM,EAAE;AAC/D,QAAQ,SAAS,SAAS,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;AACnG,QAAQ,SAAS,QAAQ,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;AACtG,QAAQ,SAAS,IAAI,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,EAAE;AACtH,QAAQ,IAAI,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9E,KAAK,CAAC,CAAC;AACP,CAAC;AA6MD;AACuB,OAAO,eAAe,KAAK,UAAU,GAAG,eAAe,GAAG,UAAU,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE;AACvH,IAAI,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAC/B,IAAI,OAAO,CAAC,CAAC,IAAI,GAAG,iBAAiB,EAAE,CAAC,CAAC,KAAK,GAAG,KAAK,EAAE,CAAC,CAAC,UAAU,GAAG,UAAU,EAAE,CAAC,CAAC;AACrF;;MC9Ta,WAAW,GAAG,CAAC,IAAY,EAAE,GAAW,KAAI;IACvD,OACK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAG,CACN,EAAA,EAAA,IAAI,EACJ,CAAA,CAAA;AACJ,EAAE;MAEW,WAAW,GAAG,CAAC,OAAe,EAAE,QAAoB,KAAI;IACnE,OAAOA,OAAG,CAAC,WAAW,CAAC;QACrB,OAAO;AACP,QAAA,KAAK,EAAE,QAAQ;AAChB,KAAA,CAAC,CAAC;AACL,EAAE;AAEW,MAAA,YAAY,GAAG,CAAC,KAAa,EAAE,OAAe,EAAE,OAAe,KAAI;IAC9E,OAAO;QACL,KAAK;AACL,QAAA,WAAW,EAAE,IAAI;AACjB,QAAA,MAAM,EAAE;AACN,YAAA,IAAI,EAAE,eAAe;AACrB,YAAA,OAAO,EAAE,OAAO;YAChB,OAAO;AACP,YAAA,iBAAiB,EAAE,4CAA4C;AAC/D,YAAA,IAAI,EAAE,GAAG;AACV,SAAA;QACD,OAAO;KACC,CAAC;AACb,EAAE;AAEW,MAAA,eAAe,GAAG,CAC7B,aAAqB,EACrB,QAAgB,EAChB,aAAqB,EACrB,IAAY,EACZ,GAAW,EACX,GAAW,EACX,aAAqB,KACnB;AACF,IAAA,IAAI,GAAG,GAAwB;AAC7B,QAAA,cAAc,EAAE,aAAa;AAC7B,QAAA,QAAQ,EAAE,aAAa;QACvB,QAAQ;QACR,IAAI;QACJ,GAAG;AACH,QAAA,cAAc,EAAE,aAAa;KAC9B,CAAC;IAEF,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;AAChC,QAAA,OAAO,GAAG,CAAC;AACZ,KAAA;AAED,IAAA,IAAI,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;AAC9B,QAAA,GAAG,GACE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAG,CACH,EAAA,GAAG,CACP,CAAC;AACH,KAAA;AAAM,SAAA;AACL,QAAA,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC;AAChB,KAAA;AAED,IAAA,OAAO,GAAG,CAAC;AACb,EAAE;AAEW,MAAA,aAAa,GAAG,CAAC,QAAgB,KAAI;AAChD,IAAA,MAAM,KAAK,GAAG;AACZ,QAAA,IAAI,EAAE;AACJ,YAAA,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE;AACjC,YAAA,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE;AACpC,SAAA;AACD,QAAA,YAAY,EAAE;AACZ,YAAA,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;AAChC,YAAA,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;AACnC,YAAA,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;AACpC,YAAA,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,QAAQ,EAAE;AAC7C,YAAA,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;AACjC,SAAA;AACD,QAAA,GAAG,EAAE;AACH,YAAA,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClC,YAAA,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE;AACtC,YAAA,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE;AACjC,YAAA,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;AACpC,SAAA;AACD,QAAA,EAAE,EAAE;AACF,YAAA;AACE,gBAAA,IAAI,EAAE,gBAAgB;AACtB,gBAAA,IAAI,EAAE,SAAS;AAChB,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,UAAU;AAChB,gBAAA,IAAI,EAAE,SAAS;AAChB,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,KAAK;AACX,gBAAA,IAAI,EAAE,KAAK;AACZ,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,MAAM;AACZ,gBAAA,IAAI,EAAE,QAAQ;AACf,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,UAAU;AAChB,gBAAA,IAAI,EAAE,SAAS;AAChB,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,gBAAgB;AACtB,gBAAA,IAAI,EAAE,SAAS;AAChB,aAAA;AACF,SAAA;KACF,CAAC;AAEF,IAAA,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AAC3B,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,YAAA,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC;AACZ,gBAAA,IAAI,EAAE,CAAA,GAAA,EAAM,CAAC,GAAG,CAAC,CAAE,CAAA;AACnB,gBAAA,IAAI,EAAE,CAAA,GAAA,EAAM,CAAC,GAAG,CAAC,CAAE,CAAA;AACpB,aAAA,CAAC,CAAC;AACJ,SAAA;QACD,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,QAAQ,CAAC,CAAC;AACnC,KAAA;AAAM,SAAA,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QACvC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;QAE/E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/B,YAAA,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC;AACZ,gBAAA,IAAI,EAAE,CAAA,GAAA,EAAM,CAAC,GAAG,CAAC,CAAE,CAAA;AACnB,gBAAA,IAAI,EAAE,CAAA,GAAA,EAAM,CAAC,GAAG,CAAC,CAAE,CAAA;AACpB,aAAA,CAAC,CAAC;AACJ,SAAA;AAED,QAAA,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAChC,KAAA;AAAM,SAAA;AACL,QAAA,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC;AACZ,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,MAAM;AACb,SAAA,CAAC,CAAC;AACH,QAAA,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAChC,KAAA;AAED,IAAA,OAAOC,6BAAS,CAAC,KAAK,EAAE,CAAC,CAAC,KAAI;QAC5B,OAAOC,0BAAM,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AAC7B,KAAC,CAAC,CAAC;AACL,EAAE;AAEK,MAAM,WAAW,GAAG,CACzB,MAAc,EACd,KAAa,EACb,SAAiB,EACjB,KAAa,EACb,OAAe,KACb;IACF,OAAO;AACL,QAAA,MAAM,EAAE;AACN,YAAA;gBACE,MAAM;gBACN,KAAK;AACN,aAAA;AACF,SAAA;QACD,SAAS;QACT,KAAK;QACL,OAAO;KACR,CAAC;AACJ,EAAE;AAEW,MAAA,gBAAgB,GAAG,CAC9B,OAAyC,KACL;IACpC,MAAM,GAAG,GAAqC,EAAE,CAAC;IAEjD,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,KAAI;QAChC,IAAI,KAAK,KAAK,CAAC,EAAE;AACf,YAAA,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAClB,SAAA;AAAM,aAAA;YACL,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACnC,YAAA,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,CAAA,GAAA,EAAM,KAAK,GAAG,CAAC,CAAA,CAAE,CAAC,CAAC;YACxD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAmC,CAAC,CAAC;AAC/D,SAAA;AACH,KAAC,CAAC,CAAC;AAEH,IAAA,OAAO,GAAG,CAAC;AACb,EAAE;AAEW,MAAA,iBAAiB,GAAG,CAAC,GAAiB,KAAI;AACrD,IAAA,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC;IAExC,MAAM,GAAG,GAAyC,EAAE,CAAC;IACrD,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAI;AAC1B,QAAA,GAAG,CAAC,CAAM,GAAA,EAAA,KAAK,GAAG,CAAC,CAAA,CAAE,CAAC,GACjB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAG,KACN,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,GACzB,CAAC;AACJ,KAAC,CAAC,CAAC;AAEH,IAAA,OAAO,GAAG,CAAC;AACb,EAAE;AAEK,MAAM,WAAW,GAAG,CAAC,OAAe,KAAgB;IACzD,MAAM,OAAO,GAAe,EAAE,CAAC;AAE/B,IAAA,SAAS,iBAAiB,CAAC,GAAW,EAAE,OAAiB,EAAE,EAAA;QACzD,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE;AAC3C,YAAA,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE;gBACrB,MAAM,OAAO,GAAa,CAAC,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC;;gBAEzC,IAAI,GAAG,KAAK,OAAO,EAAE;AACnB,oBAAA,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACvB,iBAAA;gBACD,iBAAiB,CAAE,GAAW,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;AAC/C,aAAA;AACF,SAEA;KACF;IAED,iBAAiB,CAAC,OAAO,CAAC,CAAC;AAC3B,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEK,MAAM,kBAAkB,GAAG,CAAC,OAAe,EAAE,MAAkB,KAAI;AACxE,IAAA,MAAM,OAAO,GAAGC,6BAAS,CAAC,OAAO,CAAC,CAAC;AAEnC,IAAA,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;QACvB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,QAAQ,GAAGC,uBAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;;AAGpC,QAAA,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;;AAE9B,YAAAC,uBAAG,CAAC,OAAO,EAAE,IAAI,EAAEC,oBAAY,CAACC,iBAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC3D,SAAA;AAAM,aAAA,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;;AAErC,YAAAF,uBAAG,CAAC,OAAO,EAAE,IAAI,EAAEG,aAAO,CAACD,iBAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACtD,SAAA;AAAM,aAAA,CAEN;AACH,KAAC,CAAC,CAAC;AAEH,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC;;AClPD;;AAEG;AACI,MAAM,iBAAiB,GAAG,CAAC,MAAc,KAAI;AAClD,IAAA,MAAM,eAAe,GAAGE,cAAQ,CAAC,MAAM,CAAC,CAAC;AACzC,IAAA,MAAM,cAAc,GAAGC,+BAAe,CAAC,eAAe,CAAC,CAAC;IACxD,MAAM,EAAE,GAAGF,aAAO,CAACC,cAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;AAC7C,IAAA,MAAM,MAAM,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC;AACnC,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;;ACVD;;;;;;;AAOG;AACU,MAAA,SAAS,GAAG,CAAC,EAAE,WAAW,EAAE,SAAS,EAAiB,KAAI;IACrE,MAAM,kBAAkB,GAAGE,2BAAgB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AACpE,IAAA,OAAOC,2BAAgB,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;AACpD,EAAE;AAEF;;;AAGG;AACU,MAAA,eAAe,GAAG,CAAC,EAAU,KAAI;AAC5C,IAAA,MAAM,MAAM,GAAGC,WAAM,CAAC,WAAW,CAAC;AAChC,QAAA,GAAG,EAAEJ,cAAQ,CAAC,EAAE,CAAC;AAClB,KAAA,CAAC,CAAC;IAEH,OAAO;AACL,QAAA,OAAO,EAAE,wCAAwC;QACjD,KAAK,EAAEI,WAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE;KACtC,CAAC;AACJ,EAAE;AAEW,MAAA,UAAU,GAAG,CAAC,OAAe,KAAI;AAC5C,IAAA,OAAOC,yBAAc,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAEC,+BAAoB,CAAC,EAAE,CAAC,CAAC;AACjF;;ACjCA;;;AAGG;MACU,SAAS,GAAG,CAAO,IAAY,EAAE,OAAe,KAA4B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;;;;IAGvF,MAAM,SAAS,GAAG,OAAM,CAAA,EAAA,GAAC,MAAc,CAAC,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,CAAC;AACxD,QAAA,MAAM,EAAE,sBAAsB;AAC9B,QAAA,MAAM,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;AACxB,KAAA,CAAC,CAAA,CAAC;AAEH,IAAA,MAAM,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;IAExC,OAAO;QACL,SAAS;QACT,WAAW;KACZ,CAAC;AACJ,CAAC,EAAC;AAEK,MAAM,oBAAoB,GAAG,CAAO,IAAY,EAAE,OAAe,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;;IAC1E,MAAM,SAAS,GAAG,OAAM,CAAA,EAAA,GAAC,MAAc,CAAC,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,CAAC;AACxD,QAAA,MAAM,EAAE,sBAAsB;AAC9B,QAAA,MAAM,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;AACxB,KAAA,CAAC,CAAA,CAAC;AACH,IAAA,OAAO,SAAS,CAAC;AACnB,CAAC,CAAA;;ACzBY,MAAA,mBAAmB,GAAG,CACjC,cAAgC,EAChC,KAAK,GAAG,KAAK,KACM;;IACnB,IAAI,CAAC,cAAc,CAAC,OAAO;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;AAElE,IAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAA,cAAc,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AACpE,IAAA,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,cAAc,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACxE,MAAM,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IAE3C,OAAO;QACL,QAAQ;QACR,QAAQ;AACR,QAAA,MAAM,EAAEC,iBAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACpC,CAAC;AACJ;;ACmBO,IAAM,cAAc,GAApB,MAAM,cAAc,CAAA;AACzB,IAAA,WAAA,CAAuC,MAAc,EAAA;QAAd,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;QAI7C,IAAS,CAAA,SAAA,GAA6B,IAAI,CAAC;QAQ3C,IAAa,CAAA,aAAA,GAEV,IAAI,CAAC;AAbd,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACtB;IAGY,YAAY,GAAA;;AACvB,YAAA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,IAAI,CAAC,SAAS,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnD,aAAA;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB,CAAA,CAAA;AAAA,KAAA;IAKY,cAAc,GAAA;;AACzB,YAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACvB,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC5D,gBAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;AAC7B,aAAA;YACD,OAAO,IAAI,CAAC,aAAa,CAAC;SAC3B,CAAA,CAAA;AAAA,KAAA;IAEY,kBAAkB,GAAA;;AAC7B,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,qBAAmB,CAAC,SAAS,CAAC,CAAC;SAC3C,CAAA,CAAA;AAAA,KAAA;IAEY,kBAAkB,GAAA;;AAC7B,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAmB,CAAC,SAAS,CAAC,CAAC;SAC3C,CAAA,CAAA;AAAA,KAAA;IAEY,qBAAqB,GAAA;;AAChC,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAsB,CAAC,SAAS,CAAC,CAAC;SAC9C,CAAA,CAAA;AAAA,KAAA;IAEY,gBAAgB,GAAA;;AAC3B,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAiB,CAAC,SAAS,CAAC,CAAC;SACzC,CAAA,CAAA;AAAA,KAAA;IAEY,uBAAuB,GAAA;;AAClC,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAwB,CAAC,SAAS,CAAC,CAAC;SAChD,CAAA,CAAA;AAAA,KAAA;IAEY,wBAAwB,GAAA;;AACnC,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAyB,CAAC,SAAS,CAAC,CAAC;SACjD,CAAA,CAAA;AAAA,KAAA;IAEY,oBAAoB,GAAA;;AAC/B,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAqB,CAAC,SAAS,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;IAEY,oBAAoB,GAAA;;AAC/B,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAqB,CAAC,SAAS,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;IAEY,sBAAsB,GAAA;;AACjC,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAuB,CAAC,SAAS,CAAC,CAAC;SAC/C,CAAA,CAAA;AAAA,KAAA;IAEY,qBAAqB,GAAA;;AAChC,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAsB,CAAC,SAAS,CAAC,CAAC;SAC9C,CAAA,CAAA;AAAA,KAAA;IAEY,YAAY,GAAA;;AACvB,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,gBAAa,CAAC,SAAS,CAAC,CAAC;SACrC,CAAA,CAAA;AAAA,KAAA;IAEY,eAAe,GAAA;;AAC1B,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAgB,CAAC,SAAS,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;IAEY,qBAAqB,GAAA;;AAChC,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAsB,CAAC,SAAS,CAAC,CAAC;SAC9C,CAAA,CAAA;AAAA,KAAA;IAEY,gBAAgB,GAAA;;AAC3B,YAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5C,YAAA,OAAO,IAAIC,uBAAsB,CAAC,SAAS,CAAC,CAAC;SAC9C,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AA7FY,cAAc,GAAA,UAAA,CAAA;AAD1B,IAAAC,mBAAU,EAAE;AAEE,IAAA,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC,SAAS,CAAC,CAAA;;AADnB,CAAA,EAAA,cAAc,CA6F1B,CAAA;AAEM,MAAM,uBAAuB,GAAG,CACrC,MAAc,KAGZ,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;IACF,MAAM,QAAQ,GAAG,MAAMC,gCAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1D,OAAO;QACLC,oBAAW,CAAC,cAAc,CACxB,QAAQ,EACRC,2BAAkB,EAClBC,4BAAmB,EACnBC,2BAAkB,EAClBC,mCAA0B,EAC1BC,+BAAsB,EACtBC,0BAAiB,EACjBC,0BAAiB,EACjBC,2BAAkB,EAClBC,+BAAsB,EACtBC,8BAAqB,EACrBC,yBAAgB,CACjB;QACD,QAAQ;KACT,CAAC;AACJ,CAAC,CAAA,CAAC;AAEK,MAAM,aAAa,GAAG,CAAO,MAAc,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;IACpD,MAAM,GAAG,QAAQ,CAAC,GAAG,MAAM,uBAAuB,CAAC,MAAM,CAAC,CAAC;IAC3D,MAAM,GAAG,GAAGC,gCAAuB,CAAC,IAAIZ,oBAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;AClKM,MAAM,cAAc,GAAG,+BAA+B;AACtD,MAAM,mBAAmB,GAAG,oCAAoC;AAChE,MAAM,eAAe,GAAG,6BAA6B;AACrD,MAAM,wBAAwB,GAAG,6CAA6C;AAC9E,MAAM,yBAAyB,GAAG,8CAA8C;AAChF,MAAM,qBAAqB,GAAG,oCAAoC;AAClE,MAAM,gBAAgB,GAAG,kCAAkC;AAC3D,MAAM,gBAAgB,GAAG,kCAAkC;AAC3D,MAAM,8BAA8B,GAAG,8CAA8C;AACrF,MAAM,iBAAiB,GAAG,iCAAiC;AAC3D,MAAM,uBAAuB,GAAG,uCAAuC;AACvE,MAAM,kBAAkB,GAAG,kCAAkC;AAC7D,MAAM,4BAA4B,GAAG,4CAA4C;AACjF,MAAM,uBAAuB,GAAG,uCAAuC;AACvE,MAAM,6BAA6B,GAAG,6CAA6C;AACnF,MAAM,sBAAsB,GAAG,sCAAsC;AACrE,MAAM,qBAAqB,GAAG,qCAAqC;AACnE,MAAM,sBAAsB,GAAG,sCAAsC;AACrE,MAAM,sBAAsB,GAAG,sCAAsC;AACrE,MAAM,qBAAqB,GAAG,qCAAqC;AACnE,MAAM,sBAAsB,GAAG,sCAAsC;AACrE,MAAM,sBAAsB,GAAG,sCAAsC;AACrE,MAAM,gBAAgB,GAAG,gCAAgC;AACzD,MAAM,kCAAkC,GAAG,kDAAkD;AAC7F,MAAM,oBAAoB,GAAG,oCAAoC;AACjE,MAAM,sBAAsB,GAAG,sCAAsC;AACrE,MAAM,qBAAqB,GAAG,qCAAqC;AACnE,MAAM,sBAAsB,GAAG,sCAAsC;AACrE,MAAM,mBAAmB,GAAG,mCAAmC;AAC/D,MAAM,0BAA0B,GAAG,0CAA0C;AAC7E,MAAM,0BAA0B,GAAG,0CAA0C;AAC7E,MAAM,2BAA2B,GAAG,2CAA2C;AAC/E,MAAM,0BAA0B,GAAG,0CAA0C;AAC7E,MAAM,qBAAqB,GAAG,0CAA0C;AACxE,MAAM,0BAA0B,GAAG,+CAA+C;AAClF,MAAM,uBAAuB,GAAG,2CAA2C;AAC3E,MAAM,yBAAyB,GAAG,6CAA6C;AAC/E,MAAM,cAAc,GAAG,yBAAyB;AAChD,MAAM,gCAAgC,GAAG,gDAAgD;AACzF,MAAM,wBAAwB,GAAG,mCAAmC;AACpE,MAAM,iCAAiC,GAC5C,0DAA0D;AACrD,MAAM,4BAA4B,GAAG,qDAAqD;AAC1F,MAAM,qCAAqC,GAChD,8DAA8D;AACzD,MAAM,2BAA2B,GAAG,oDAAoD;AACxF,MAAM,gBAAgB,GAAG;;AC9CzB,MAAM,mBAAmB,GAC9B,mEAAmE;AAC9D,MAAM,iBAAiB,GAAG,IAAI;AAC9B,MAAM,UAAU,GAAG,MAAM;AACzB,MAAM,WAAW,GAAG,OAAO;AAC3B,MAAM,UAAU,GAAG,MAAM;AAEhC;AACO,MAAM,2BAA2B,GAAG,IAAI;AAE/C;AACO,MAAM,0BAA0B,GAAG;;ACRnC,MAAM,WAAW,GAAG,uEAAuE;AAC3F,MAAM,aAAa,GAAG,MAAM;AAEnC;MACa,iBAAiB,GAAG,IAAI,GAAG,IAAI,GAAG;;AC6ExC,IAAM,QAAQ,GAAd,MAAM,QAAQ,CAAA;IAGnB,WAA+B,CAAA,MAAc,EAAsB,OAAe,EAAA;AAK1E,QAAA,IAAA,CAAA,OAAO,GAAYa,kBAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAC9C,QAAA,IAAA,CAAA,cAAc,GAAGA,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AALzD,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KACxB;IAKY,EAAE,CACb,OAA8B,EAC9B,OAA8B,EAC9B,gBAAgD,EAChD,MAA4B,EAC5B,QAAgC,EAAA;;AAEhC,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;AACpC,gBAAA;oBACE,OAAO;oBACP,QAAQ;AACT,iBAAA;AACF,aAAA,CAAC,CAAC;AAEH,YAAA,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC;AAC5B,gBAAA;AACE,oBAAA,UAAU,EAAE;wBACV,OAAO;wBACP,OAAO;wBACP,gBAAgB;wBAChB,MAAM;wBACN,QAAQ;AACR,wBAAA,SAAS,EAAE,WAAW;AACvB,qBAAA;AACF,iBAAA;AACF,aAAA,CAAC,CAAC;YAEH,OAAO;gBACL,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,SAAS,EAAE,EAAE,CAAC,SAAS;AACvB,gBAAA,UAAU,EAAE;oBACV,OAAO;oBACP,OAAO;oBACP,gBAAgB;oBAChB,MAAM;oBACN,QAAQ;AACR,oBAAA,SAAS,EAAE,WAAW;AACvB,iBAAA;aACF,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,KAAK,CAAC,EACjB,OAAO,EACP,QAAQ,EACR,aAAa,EACb,OAAO,GACE,EAAA;;YACT,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC3D,YAAA,MAAM,UAAU,GAAGtC,cAAQ,CAAC,QAAQ,CAAC,CAAC;YACtC,MAAM,SAAS,GAAGuC,UAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAE3C,OAAO;AACL,gBAAA,QAAQ,EAAE,CAAO,IAAqB,KAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACxC,oBAAA,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AAC1E,iBAAC,CAAA;AACD,gBAAA,SAAS,EAAE,CAAO,IAAsB,KAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC1C,oBAAA,MAAM,EACJ,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,OAAO,EACP,UAAU,EACV,qBAAqB,GAAG,oBAAoB,GAC7C,GAAG,IAAI,CAAC;AAET,oBAAA,MAAM,GAAG,GAAG,WAAW,CACrB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,EAC3C,KAAK,EACL,MAAM,CAAC,QAAQ,CAAC,EAChB,KAAK,EACL,OAAO,CACR,CAAC;;AAEF,oBAAA,MAAM,YAAY,GAAG,aAAa,CAAC,aAAa,CAAC,CAAC;;AAGlD,oBAAA,MAAM,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;;oBAEvC,MAAM,YAAY,GAAG,kBAAkB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAE5D,oBAAA,MAAM,QAAQ,GAAG,eAAe,CAC9B,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,EACpC,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAC/B,IAAI,CAAC,OAAO,EACZ,EAAE,EACF,GAAG,EACH,YAAY,EACZ,GAAG,CACJ,CAAC;AAEF,oBAAA,MAAM,MAAM,GAAG,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;;AAElE,oBAAA,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,UAAU;0BACpC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC;AAC1C,0BAAE,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;AAEnF,oBAAA,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC;wBAC1C,KAAK;AACL,wBAAA,QAAQ,EAAE,WAAW,CAAC,QAAQ,GAAG,EAAE;wBACnC,QAAQ;wBACR,QAAQ;wBACR,MAAM;wBACN,OAAO;wBACP,KAAK;AACN,qBAAA,CAAC,CAAC;AAEH,oBAAA,MAAM,KAAK,GAAGA,UAAK,CAAC,WAAW,CAAC;wBAC9B,SAAS,EAAE,SAAS,CAAC,SAAS;wBAC9B,aAAa;AACb,wBAAA,UAAU,EAAE,CAACvC,cAAQ,CAAC,SAAS,CAAC,CAAC;AAClC,qBAAA,CAAC,CAAC;oBACH,MAAM,OAAO,GAAGuC,UAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;;AAG7C,oBAAA,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AAC5C,iBAAC,CAAA;aACF,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEO,IAAA,YAAY,CAAC,MAAmD,EAAA;QACtE,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,KAAI;YACtC,OAAO,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;AAC9C,SAAC,CAAC,CAAC;AAEH,QAAA,MAAM,MAAM,GAAGC,WAAM,CAAC,WAAW,CAAC;AAChC,YAAA,QAAQ,EAAE,aAAa;AACxB,SAAA,CAAC,CAAC;QACH,MAAM,WAAW,GAAGA,WAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;AACnD,QAAA,OAAO,WAAW,CAAC;KACpB;IAEO,eAAe,CACrB,MAAuC,EACvC,UAAqC,EAAA;QAErC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAE7B,QAAA,MAAM,MAAM,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,SAAS,GAAGC,wBAAa,CAAC;;;AAG9B,YAAA,IAAI,EAAE,MAAM;YACZ,OAAO,EAAEnC,+BAAoB,CAAC,EAAE;YAChC,UAAU,EAAE,MAAM,CAAC,IAAI,CAACN,cAAQ,CAAC,UAAU,CAAC,CAAC;AAC9C,SAAA,CAAC,CAAC;QAEH,OAAO;YACL,MAAM;YACN,SAAS;SACV,CAAC;KACH;AAEa,IAAA,eAAe,CAC3B,MAAuC,EACvC,OAAe,EACf,qBAA2D,EAAA;;AAE3D,YAAA,MAAM,SAAS,GAAG,MAAM,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/E,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;;YAGvD,MAAM,EAAE,GAAG,SAAS,CAAC;gBACnB,SAAS;gBACT,WAAW;AACZ,aAAA,CAAC,CAAC;AACH,YAAA,MAAM,MAAM,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC;YAEnC,OAAO;gBACL,MAAM;gBACN,SAAS;aACV,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEO,IAAA,gBAAgB,CACtB,MAGC,EAAA;AAED,QAAA,MAAM,EAAE,MAAM,EAAE,KAAK,GAAG,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;AAC/F,QAAA,IAAI,CAAC,MAAM;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;AAEnD,QAAA,MAAM,SAAS,GAAW;AACxB,YAAA;gBACE,KAAK;AACL,gBAAA,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AACpD,aAAA;SACF,CAAC;QAEF,MAAM,aAAa,GAAG0C,8BAAiB,CACrC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAChD,SAAS,EACT,QAAQ,EACR,OAAO,EACP,KAAK;;AAEL,QAAA,GAAG,CACJ,CAAC;AAEF,QAAA,OAAO,aAAa,CAAC;KACtB;AAEY,IAAA,aAAa,CACxB,WAAuB,EACvB,WAAwB,EACxB,OAAwB,EAAA;;YAExB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;AAC3D,YAAA,MAAM,GAAG,GAAG,IAAIC,yBAAiB,CAAC,SAAS,CAAC,CAAC;AAE7C,YAAA,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC;AAC1B,YAAA,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC;AAC1C,gBAAA,QAAQ,EAAE,WAAW,CAAC,QAAQ,GAAG,EAAE;gBACnC,KAAK;AACL,gBAAA,QAAQ,EAAE,CAAC;AACX,gBAAA,QAAQ,EAAE,GAAG;AACb,gBAAA,MAAM,EAAE,eAAe,CAAC,WAAW,CAAC;AACpC,gBAAA,OAAO,EAAE,EAAE;AACX,gBAAA,KAAK,EAAE,EAAE;AACV,aAAA,CAAC,CAAC;AACH,YAAA,MAAM,EAAE,GAAGC,OAAE,CAAC,WAAW,CAAC;AACxB,gBAAA,QAAQ,EAAEC,aAAQ,CAAC,MAAM,CAAC,aAAa,CAAC;AACxC,gBAAA,IAAI,EAAEL,WAAM,CAAC,MAAM,CAAC,WAAW,CAAC;gBAChC,UAAU,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAClC,aAAA,CAAC,CAAC;AAEH,YAAA,MAAM,OAAO,GAAGM,uBAAe,CAAC,WAAW,CAAC;gBAC1C,OAAO,EAAEF,OAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE;AAChC,aAAA,CAAC,CAAC;YAEH,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACxC,YAAA,OAAO,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,cAAc,CAAC,UAAsB,EAAA;;YAChD,MAAM,QAAQ,GAAG,MAAMpB,gCAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAE/D,MAAM,MAAM,GAAG,MAAMuB,uBAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACrD,YAAA,OAAO,MAAM,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,OAAO,CAAC,SAA2C,EAAA;;AAC9D,YAAA,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,UAAU,CAAC,CAAC;AACvD,YAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAClE,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAE3C,OAAO;AACL,gBAAA,QAAQ,EAAE,CAAO,IAAqB,KAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;oBACxC,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AAClE,iBAAC,CAAA;AACD,gBAAA,SAAS,EAAE,CAAO,IAAsB,KAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC1C,oBAAA,MAAM,EACJ,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,OAAO,EACP,UAAU,EACV,qBAAqB,GAAG,oBAAoB,GAC7C,GAAG,IAAI,CAAC;AAET,oBAAA,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACrE,oBAAA,MAAM,GAAG,GAAG,WAAW,CACrB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,EAC3C,KAAK,EACL,MAAM,CAAC,QAAQ,CAAC,EAChB,KAAK,EACL,OAAO,CACR,CAAC;AACF,oBAAA,MAAM,YAAY,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;AAC1C,oBAAA,MAAM,aAAa,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;AAC7C,oBAAA,MAAM,QAAQ,GAAG,eAAe,CAC9B,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,EACpC,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAC/B,IAAI,CAAC,OAAO,EACZ,EAAE,EACF,GAAG,EACH,aAAa,EACb,GAAG,CACJ,CAAC;AAEF,oBAAA,MAAM,MAAM,GAAG,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;;AAGlE,oBAAA,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,UAAU;0BACpC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC;AAC1C,0BAAE,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;AAEnF,oBAAA,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC;wBAC1C,KAAK;AACL,wBAAA,QAAQ,EAAE,WAAW,CAAC,QAAQ,GAAG,EAAE;wBACnC,QAAQ;wBACR,QAAQ;wBACR,MAAM;wBACN,OAAO;wBACP,KAAK;AACN,qBAAA,CAAC,CAAC;AAEH,oBAAA,MAAM,KAAK,GAAGR,UAAK,CAAC,WAAW,CAAC;AAC9B,wBAAA,SAAS,EAAE,WAAW;wBACtB,aAAa;AACb,wBAAA,UAAU,EAAE,CAACvC,cAAQ,CAAC,SAAS,CAAC,CAAC;AAClC,qBAAA,CAAC,CAAC;oBACH,MAAM,OAAO,GAAGuC,UAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;;AAG7C,oBAAA,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AAC5C,iBAAC,CAAA;aACF,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAlUY,QAAQ,GAAA,UAAA,CAAA;AADpB,IAAAjB,mBAAU,EAAE;AAIE,IAAA,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC,SAAS,CAAC,CAAA;AAAkB,IAAA,OAAA,CAAA,CAAA,EAAAA,eAAM,CAAC,UAAU,CAAC,CAAA;;AAHvD,CAAA,EAAA,QAAQ,CAkUpB;;ACtZM,MAAM,yBAAyB,GAAG;AACvC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,kBAAkB;AACzB,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,mBAAmB;AAC1B,SAAA;AACF,KAAA;AACD,IAAA,cAAc,EAAE;AACd,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,uBAAuB;AAC9B,SAAA;AACF,KAAA;AACD,IAAA,mBAAmB,EAAE;AACnB,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE;AACf,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,wBAAwB;AAC/B,SAAA;AACF,KAAA;AACD,IAAA,oBAAoB,EAAE;AACpB,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACvDM,MAAM,oBAAoB,GAAG;AAClC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,kBAAkB;AACzB,SAAA;AACF,KAAA;AACD,IAAA,cAAc,EAAE;AACd,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;AC7BM,MAAM,oCAAoC,GAAG;AAClD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACyDM,IAAM,OAAO,GAAb,MAAM,OAAO,CAAA;AAClB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAE7D,QAAA,IAAA,CAAA,WAAW,GAAGe,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KAFiB;IAI5D,aAAa,CAAC,OAAe,EAAE,GAAiB,EAAA;;AAC3D,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,mBAAmB,EACnB,OAAO,EACP,yBAAyB,EACzBU,iBAAY,CAAC,KAAK,CAAC,GAAG,CAAC,EACvBA,iBAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAClC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,oBAAoB,CAAC,GAA4B,EAAA;;AAC5D,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,8BAA8B,EAC9B,GAAG,CAAC,OAAO,EACX,oCAAoC,EACpCC,4BAAuB,CAAC,KAAK,CAAC,GAAG,CAAC,EAClCA,4BAAuB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC7C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,yBAAyB,CAAC,KAAa,EAAA;;YAClD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,sBAAsB,CAAC;gBACtC,KAAK;AACN,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,sBAAsB,CAAC,IAAY,EAAA;;YAC9C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;YACxD,OAAO,GAAG,CAAC,mBAAmB,CAAC;gBAC7B,IAAI;AACL,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;IAEY,iBAAiB,GAAA;;YAC5B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;AACxD,YAAA,OAAO,MAAM,GAAG,CAAC,cAAc,EAAE,CAAC;SACnC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,iBAAiB,CAAC,OAA4B,EAAA;;YACzD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;AACxD,YAAA,OAAO,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACnC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,UAAU,CAAC,OAAe,EAAA;;YACrC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;YACvD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACnD,YAAA,IAAI,CAAC,OAAO;AAAE,gBAAA,OAAOC,gBAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAE9C,YAAA,OAAOA,gBAAW,CAAC,MAAM,CAACA,gBAAW,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAgB,CAAC;SAC7E,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,QAAQ,CAAC,GAAY,EAAA;;AAChC,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,cAAc,EACd,GAAG,CAAC,WAAW,EACf,oBAAoB,EACpBC,YAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAClBA,YAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC7B,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAlEY,OAAO,GAAA,UAAA,CAAA;AADnB,IAAA7B,mBAAU,EAAE;IAEE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAD1D,CAAA,EAAA,OAAO,CAkEnB;;ACtFM,IAAM,KAAK,GAAX,MAAM,KAAK,CAAA;AAAX,IAAA,WAAA,GAAA;AACG,QAAA,IAAA,CAAA,cAAc,GAAGd,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KA0C5D;IAxCc,WAAW,GAAA;;YACtB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;AAC3D,YAAA,MAAM,GAAG,GAAG,IAAIe,yBAAmB,CAAC,SAAS,CAAC,CAAC;AAC/C,YAAA,OAAO,MAAM,GAAG,CAAC,WAAW,EAAE,CAAC;SAChC,CAAA,CAAA;AAAA,KAAA;IAEY,cAAc,GAAA;;YACzB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;AAC3D,YAAA,MAAM,GAAG,GAAG,IAAIA,yBAAmB,CAAC,SAAS,CAAC,CAAC;AAC/C,YAAA,OAAO,MAAM,GAAG,CAAC,cAAc,EAAE,CAAC;SACnC,CAAA,CAAA;AAAA,KAAA;IAEY,oBAAoB,GAAA;;;AAC/B,YAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAChD,MAAM,MAAM,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,WAAW,CAAC,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,CAAC;AACpD,YAAA,IAAI,CAAC,MAAM;AAAE,gBAAA,OAAO,CAAC,CAAC;AACtB,YAAA,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;;AAC1B,KAAA;IAEY,UAAU,GAAA;;YACrB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;AAC3D,YAAA,MAAM,GAAG,GAAG,IAAIA,yBAAmB,CAAC,SAAS,CAAC,CAAC;AAC/C,YAAA,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,UAAU,EAAE,CAAC;YACvC,OAAO,OAAO,CAAC,OAAO,CAAC;SACxB,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,MAAc,EAAA;;YAC1C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;AAC3D,YAAA,MAAM,GAAG,GAAG,IAAIA,yBAAmB,CAAC,SAAS,CAAC,CAAC;AAC/C,YAAA,OAAO,MAAM,GAAG,CAAC,gBAAgB,CAAC;AAChC,gBAAA,MAAM,EAAEC,wBAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAC7B,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,qBAAqB,CAAC,OAAqC,EAAA;;YACtE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;AAC3D,YAAA,MAAM,GAAG,GAAG,IAAID,yBAAmB,CAAC,SAAS,CAAC,CAAC;YAC/C,MAAM,YAAY,GAAG,MAAM,GAAG,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;AAC9D,YAAA,OAAO,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SAC5C,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AA3CY,KAAK,GAAA,UAAA,CAAA;AADjB,IAAA/B,mBAAU,EAAE;AACA,CAAA,EAAA,KAAK,CA2CjB;;AC3FM,MAAM,2BAA2B,GAAG;AACzC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,gBAAgB;AACvB,SAAA;AACF,KAAA;AACD,IAAA,cAAc,EAAE;AACd,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;AC7BM,MAAM,sBAAsB,GAAG;AACpC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,qBAAqB;AAC3B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,oBAAoB;AAC1B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;AC/BM,MAAM,sBAAsB,GAAG;AACpC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,qBAAqB;AAC3B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,eAAe;AACrB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,IAAI,EAAE,MAAM;AACb,SAAA;AACF,KAAA;CACF;;AC/BM,MAAM,uBAAuB,GAAG;AACrC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACnBM,MAAM,6BAA6B,GAAG;AAC3C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACfM,MAAM,wBAAwB,GAAG;AACtC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACnBM,MAAM,kCAAkC,GAAG;AAChD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACnBM,MAAM,4BAA4B,GAAG;AAC1C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,oBAAoB;AAC1B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,oBAAoB;AAC1B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,qBAAqB;AAC3B,YAAA,IAAI,EAAE,2BAA2B;AAClC,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,yBAAyB,EAAE;AACzB,QAAA;AACE,YAAA,IAAI,EAAE,gBAAgB;AACtB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,gCAAgC;AACtC,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;;;;;AAKF,KAAA;CACF;;ACjDM,MAAM,2BAA2B,GAAG;AACzC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACnBM,MAAM,4BAA4B,GAAG;AAC1C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,kBAAkB;AACxB,YAAA,IAAI,EAAE,SAAS;AAChB,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,qBAAqB;AAC3B,YAAA,IAAI,EAAE,2BAA2B;AAClC,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,yBAAyB,EAAE;AACzB,QAAA;AACE,YAAA,IAAI,EAAE,gBAAgB;AACtB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,gCAAgC;AACtC,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;;;;;AAKF,KAAA;CACF;;ACzDM,MAAM,4BAA4B,GAAG;AAC1C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACfM,MAAM,2BAA2B,GAAG;AACzC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACfM,MAAM,4BAA4B,GAAG;AAC1C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACnBM,MAAM,4BAA4B,GAAG;AAC1C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,mBAAmB;AAC1B,SAAA;AACF,KAAA;AACD,IAAA,iBAAiB,EAAE;AACjB,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;AC7BM,MAAM,0BAA0B,GAAG;AACxC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACnBM,MAAM,6BAA6B,GAAG;AAC3C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,yBAAyB;AAC/B,YAAA,IAAI,EAAE,8BAA8B;AACrC,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,4BAA4B,EAAE;AAC5B,QAAA;AACE,YAAA,IAAI,EAAE,gBAAgB;AACtB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,gCAAgC;AACtC,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,KAAK;AACX,YAAA,IAAI,EAAE,OAAO;AACd,SAAA;AACF,KAAA;CACF;;ACrCM,MAAM,4BAA4B,GAAG;AAC1C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACnBM,MAAM,2BAA2B,GAAG;AACzC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,eAAe;AACrB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACvBM,MAAM,4BAA4B,GAAG;AAC1C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACpBM,MAAM,4BAA4B,GAAG,CAAC,QAAkB,KAAI;AACjE,IAAA,MAAM,GAAG,GAAc5B,6BAAS,CAAC,yBAAyB,CAAC,CAAC;AAE5D,IAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AACzB,QAAA,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC;AAC1B,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,UAAU;AACjB,SAAA,CAAC,CAAC;AACJ,KAAA;AAED,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,yBAAyB,GAAG;AAChC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,mBAAmB;AAC1B,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,sBAAsB;AAC7B,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,iBAAiB,EAAE;AACjB,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,kBAAkB,EAAE;AAClB,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,UAAU;AACjB,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;;;;;AAKF,KAAA;CACF;;ACpEM,MAAM,yBAAyB,GAAG,CAAC,WAAoB,KAAI;AAChE,IAAA,MAAM,GAAG,GAAcA,6BAAS,CAAC,sBAAsB,CAAC,CAAC;IAEzD,IAAI,CAAC,WAAW,EAAE;AAChB,QAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACZ,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,cAAc;AACrB,SAAA,CAAC,CAAC;QAEH,GAAG,CAAC,YAAY,GAAG;AACjB,YAAA;AACE,gBAAA,IAAI,EAAE,MAAM;AACZ,gBAAA,IAAI,EAAE,oBAAoB;AAC3B,aAAA;SACF,CAAC;QACF,GAAG,CAAC,gBAAgB,GAAG;AACrB,YAAA;AACE,gBAAA,IAAI,EAAE,KAAK;AACX,gBAAA,IAAI,EAAE,QAAQ;AACf,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,OAAO;AACb,gBAAA,IAAI,EAAE,QAAQ;AACf,aAAA;SACF,CAAC;AACH,KAAA;AAAM,SAAA;AACL,QAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACZ,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,cAAc;AACrB,SAAA,CAAC,CAAC;QAEH,GAAG,CAAC,YAAY,GAAG;AACjB,YAAA;AACE,gBAAA,IAAI,EAAE,MAAM;AACZ,gBAAA,IAAI,EAAE,UAAU;AACjB,aAAA;SACF,CAAC;AACH,KAAA;AAED,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG;AAC7B,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;AC5DM,MAAM,wCAAwC,GAAG;AACtD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACfM,MAAM,gCAAgC,GAAG;AAC9C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,oBAAoB;AAC1B,YAAA,IAAI,EAAE,0BAA0B;AACjC,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,wBAAwB,EAAE;AACxB,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACjCM,MAAM,gCAAgC,GAAG;AAC9C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACnBM,MAAM,oCAAoC,GAAG,CAAC,EACnD,YAAY,EACZ,eAAe,GAIhB,KAAI;AACH,IAAA,MAAM,GAAG,GAAcA,6BAAS,CAAC,iCAAiC,CAAC,CAAC;AAEpE,IAAA,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3B,QAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACZ,YAAA,IAAI,EAAE,gBAAgB;AACtB,YAAA,IAAI,EAAE,wBAAwB;AAC/B,SAAA,CAAC,CAAC;QACH,GAAG,CAAC,oBAAoB,GAAG;AACzB,YAAA;AACE,gBAAA,IAAI,EAAE,iBAAiB;AACvB,gBAAA,IAAI,EAAE,QAAQ;AACf,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,QAAQ;AACd,gBAAA,IAAI,EAAE,QAAQ;AACf,aAAA;SACF,CAAC;AACH,KAAA;AAED,IAAA,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;AAC9B,QAAA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACZ,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,UAAU;AACjB,SAAA,CAAC,CAAC;AACJ,KAAA;AAED,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,iCAAiC,GAAG;AACxC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;;;;;;;;;AASD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;;;;;;;;;;;CAWF;;AC7EM,MAAM,gCAAgC,GAAG;AAC9C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACvBM,MAAM,sCAAsC,GAAG;AACpD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;MCxBY,mBAAmB,GAAG,CAAC,CAAS,EAAE,MAAc,KAAI;AAC/D,IAAA,IAAI,CAAC,CAAC;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;AAClC,EAAE;AAEW,MAAA,gBAAgB,GAAG,CAAC,UAAkB,KAAI;AACrD,IAAA,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;AACxF,EAAE;AAEW,MAAA,cAAc,GAAG,CAAC,QAAkB,KAAI;AACnD,IAAA,IAAI,CAAC,QAAQ;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;AAEvD,IAAA,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;AAC7B,QAAA,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACvC,KAAA;AAED,IAAA,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;AAC7B,QAAA,mBAAmB,CAAC,QAAQ,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC;AACnE,QAAA,mBAAmB,CAAC,QAAQ,CAAC,IAAI,EAAE,wBAAwB,CAAC,CAAC;AAC7D,QAAA,mBAAmB,CAAC,QAAQ,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;AAClE,KAAA;AACH,EAAE;AAEI,SAAU,cAAc,CAAC,IAAgB,EAAA;IAC7C,IAAI,SAAS,IAAI,IAAI,EAAE;AACrB,QAAA,OAAO,IAAI,CAAC;AACb,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AAEK,SAAU,gBAAgB,CAAC,MAAe,EAAA;IAC9C,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,KAAK;AAC3D,QAAA,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;AACzD;;AC3BO,MAAM,mBAAmB,GAAG,CAAC,OAAyB,EAAE,UAAmB,KAAI;IACpF,MAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAEtE,MAAM,GAAG,GAAa,EAAE,CAAC;AACzB,IAAA,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,KAAI;QAC1B,MAAM,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,IAAI,CAAC,CAAA,EAAG,CAAC,CAAI,CAAA,EAAA,CAAC,CAAE,CAAA,CAAC,CAAC;AACxB,KAAC,CAAC,CAAC;IAEH,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;QACvC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAChC,KAAA;AAED,IAAA,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACb,IAAA,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,UAAmB,EAAE,cAAwB,KAAI;IACzE,MAAM,aAAa,GAAa,EAAE,CAAC;IAEnC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;AAC1B,QAAA,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;AAC9B,YAAA,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvB,SAAA;AACH,KAAC,CAAC,CAAC;AAEH,IAAA,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC;AAC9B,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,UAAmB,KAAI;IAC/C,MAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;AAEtE,IAAA,OAAO,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjC,CAAC,CAAC;AAEK,MAAM,mBAAmB,GAAG,CAAC,OAAyB,EAAE,UAAmB,KAAI;;IACpF,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;AAClE,IAAA,MAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACnD,IAAA,MAAM,mBAAmB,GAAG;AAC1B,QAAA,OAAO,CAAC,MAAM;AACd,QAAA,CAAA,EAAA,GAAA,OAAO,CAAC,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI;AACjB,QAAA,CAAA,EAAA,GAAA,OAAO,CAAC,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK;QAClB,gBAAgB;QAChB,aAAa;KACd,CAAC;IAEF,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAExD,IAAA,OAAO,gBAAgB,CAAC;AAC1B,CAAC,CAAC;AAEK,MAAM,gBAAgB,GAAG,CAAC,gBAAwB,EAAE,QAAkB,KAAI;;IAG/E,MAAM,WAAW,GAAG,YAAY,CAAC6D,oBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAChE,IAAI,aAAa,GAAG,EAAE,CAAC;AACvB,IAAA,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;QAC7B,MAAM,GAAG,GAAG,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;QACvD,aAAa,GAAG,0BAA0B,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA,CAAE,CAAC;AAC1D,KAAA;AAAM,SAAA;AACL,QAAA,MAAM,GAAG,GAAGxD,aAAO,CAACyD,eAAO,CAAC,IAAI,CAACzD,aAAO,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzF,aAAa,GAAG,yBAAyB,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA,CAAE,CAAC;AACzD,KAAA;AAED,IAAA,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEK,MAAM,uBAAuB,GAAG,CAAC,IAAsB,KAAI;AAChE,IAAA,MAAM,OAAO,GAAG,IAAI0D,aAAO,EAAE,CAAC;IAC9B,IAAI,IAAI,CAAC,WAAW,EAAE;AACpB,QAAA,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;AAC1E,KAAA;IAED,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,KAAK,EAAE,EAAE;AACvC,QAAA,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AAC1E,KAAA;IAED,IAAI,IAAI,CAAC,aAAa,EAAE;AACtB,QAAA,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AAC9E,KAAA;IAED,IAAI,IAAI,CAAC,SAAS,EAAE;AAClB,QAAA,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;AACxE,KAAA;IAED,IAAI,IAAI,CAAC,WAAW,EAAE;QACpB,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;AACtD,KAAA;AAED,IAAA,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,IAAI,IAAI,CAAC,IAAI,EAAE;AACb,QAAA,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,iBAAiB,EAAE,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACxE,KAAA;AAAM,SAAA;AACL,QAAA,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,iBAAiB,EAAE,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AACnE,KAAA;IAED,IAAI,IAAI,CAAC,eAAe,EAAE;AACxB,QAAA,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,iBAAiB,EAAE,EAAE,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;AAC9F,KAAA;AAAM,SAAA;QACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;AACnC,QAAA,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,iBAAiB,EAAE,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAC9E,KAAA;AAED,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,SAAS,UAAU,CAAC,IAAU,EAAA;AAC5B,IAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC/B,OAAO,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AACtC,CAAC;AAEM,MAAM,uBAAuB,GAAG,eAAe,CAAC;AAChD,MAAM,uBAAuB,GAAG,uBAAuB,CAAC;AACxD,MAAM,yBAAyB,GAAG,iBAAiB,CAAC;AACpD,MAAM,kBAAkB,GAAG,kBAAkB,CAAC;AAC9C,MAAM,yBAAyB,GAAG,yBAAyB,CAAC;AAC5D,MAAM,kBAAkB,GAAG,iBAAiB,CAAC;AAC7C,MAAM,cAAc,GAAG,aAAa,CAAC;AACrC,MAAM,yBAAyB,GAAG,yBAAyB,CAAC;AAC5D,MAAM,eAAe,GAAG,OAAO,CAAC;AAChC,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;AAClD,MAAM,qBAAqB,GAAG,cAAc,CAAC;AAC7C,MAAM,oBAAoB,GAAG,aAAa,CAAC;AAC3C,MAAM,qBAAqB,GAAG,qBAAqB,CAAC;AACpD,MAAM,qBAAqB,GAAG,qBAAqB,CAAC;AACpD,MAAM,mBAAmB,GAAG,mBAAmB,CAAC;AAChD,MAAM,mBAAmB,GAAG,2BAA2B,CAAC;AAE/D,MAAM,iBAAiB,GAAG;IACxB,uBAAuB,CAAC,iBAAiB,EAAE;IAC3C,yBAAyB,CAAC,iBAAiB,EAAE;IAC7C,kBAAkB,CAAC,iBAAiB,EAAE;IACtC,yBAAyB,CAAC,iBAAiB,EAAE;IAC7C,kBAAkB,CAAC,iBAAiB,EAAE;IACtC,cAAc,CAAC,iBAAiB,EAAE;IAClC,yBAAyB,CAAC,iBAAiB,EAAE;IAC7C,eAAe,CAAC,iBAAiB,EAAE;IACnC,oBAAoB,CAAC,iBAAiB,EAAE;IACxC,qBAAqB,CAAC,iBAAiB,EAAE;IACzC,oBAAoB,CAAC,iBAAiB,EAAE;IACxC,qBAAqB,CAAC,iBAAiB,EAAE;IACzC,qBAAqB,CAAC,iBAAiB,EAAE;;CAE1C,CAAC;AAEF;AACO,MAAM,QAAQ,GAAG,CAAC,QAAoB,EAAE,UAAkB,KAAI;AACnE,IAAA,MAAMC,YAAU,GAAG,IAAIC,qBAAU,CAAC,UAAU,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAGD,YAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAClD,IAAA,IAAI,GAAG,GAAGE,mBAAa,CAAC,SAAS,CAAC,CAAC;IAEnC,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,CAAC,KAAK,IAAI;AAAE,QAAA,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAC9C,IAAI,CAAC,KAAK,IAAI;AAAE,QAAA,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAE9C,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEK,MAAM,YAAY,GAAG,CAAC,aAAyB,KAAgB;AACpE,IAAA,MAAM,GAAG,GAAGC,mBAAS,CAAC,aAAa,CAAC,CAAC;AACrC,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEW,MAAA,UAAU,GAAG,CAAC,QAAgB,KAAI;IAC7C,MAAM,aAAa,GAAG,qBAAqB,CAAC;AAC5C,IAAA,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AAChC,QAAA,OAAO,QAAQ,CAAC;AACjB,KAAA;IAED,IAAI,eAAe,GAAG,EAAE,CAAC;AACzB,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,QAAA,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAGtB,QAAA,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE;YAC9E,eAAe,IAAI,CAAC,CAAC;YACrB,SAAS;AACV,SAAA;AAED,QAAA,QAAQ,CAAC;;AAEP,YAAA,KAAK,GAAG,CAAC;AACT,YAAA,KAAK,GAAG,CAAC;AACT,YAAA,KAAK,GAAG,CAAC;AACT,YAAA,KAAK,GAAG,CAAC;AACT,YAAA,KAAK,GAAG;gBACN,eAAe,IAAI,CAAC,CAAC;gBACrB,SAAS;;AAGX,YAAA,SAAS;AACP,gBAAA,MAAM,CAAC,GAAGC,mBAAW,CAAC,CAAC,CAAC,CAAC;AAEzB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACjC,MAAM,MAAM,GAAG/D,aAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,oBAAA,eAAe,IAAI,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AACxD,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;AACD,IAAA,OAAO,eAAe,CAAC;AACzB,EAAE;AAEK,MAAM,YAAY,GAAG,CAAC,QAAgC,KAAI;AAC/D,IAAA,MAAM,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;AAC1C,IAAA,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;QACxB,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,KAAA;IACD,WAAW,CAAC,IAAI,EAAE,CAAC;AAEnB,IAAA,OAAO,WAAW,CAAC,QAAQ,EAAE,CAAC;AAChC,CAAC,CAAC;AAEK,MAAM,kBAAkB,GAAG,CAAC,GAAQ,EAAE,QAAgC,KAAI;;AAE/E,IAAA,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;AACxB,QAAA,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,KAAA;AACD,IAAA,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAExB,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;;AC/ND;AACO,MAAM,mBAAmB,GAAG,CAAI,QAAgB,EAAE,MAAuB,EAAE,GAAM,KAAI;IAC1F,MAAM,IAAI,GAAG,mCAAmC,CAAC;AACjD,IAAA,MAAM,QAAQ,GAAG;QACf,MAAM;KACP,CAAC;IAEF,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAClC,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAExC,IAAA,MAAM,oBAAoB,GAAGgE,WAAK,CAACR,iBAAW,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAErE,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,SAAS,EAAE,oBAAoB;AAC/B,QAAA,MAAM,EAAE,UAAU;AAClB,QAAA,GAAG,EAAE;YACH,QAAQ,EAAE,GAAG,CAAC,QAAQ;AACtB,YAAA,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,IAAI;AACL,SAAA;KACF,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,UAAU;KACnB,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC;;ACkCK,SAAU,SAAS,CAAC,GAA6B,EAAA;AACrD,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,GAAG,CACN,EAAA,EAAA,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAClB,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,EAEpC,CAAA,CAAA;AACJ,CAAC;AAyHK,SAAU,gBAAgB,CAAC,CAAa,EAAA;IAC5C,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAC7B,IAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AACxB,QAAA,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AACf,KAAA;AAED,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,CAAC,CAAA,EAAA;;QAEJ,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,EACpC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,EAC5C,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,EAC5B,0BAA0B,EAAE,MAAM,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAChE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,EAChC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC;;QAEhC,0BAA0B,EAAE,gBAAgB,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAC1E,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,IAAI;SACX,EACD,CAAA,CAAA;AACJ,CAAC;AAEK,SAAU,gBAAgB,CAAC,CAAa,EAAA;IAC5C,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAC7B,IAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AACxB,QAAA,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AACf,KAAA;AAED,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,CAAC,CAAA,EAAA,EACJ,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,EAC5B,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAChB,mBAAmB,EAAE,MAAM,CAAC,CAAC,CAAC,mBAAmB,CAAC,EAClD,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,EACpC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,EAClC,cAAc,EAAE,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,EACxC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,EAChC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,EAChC,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,IAAI;SACX,EACD,CAAA,CAAA;AACJ,CAAC;AAEK,SAAU,gBAAgB,CAAC,GAAW,EAAA;IAC1C,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;AAC9C,CAAC;AAUK,SAAU,gBAAgB,CAAC,CAAa,EAAA;AAC5C,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,CAAC,CACJ,EAAA,EAAA,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,EAC1C,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,EAC5B,CAAA,CAAA;AACJ,CAAC;AAgBK,SAAU,eAAe,CAAC,CAAY,EAAA;IAC1C,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAC7B,IAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AACxB,QAAA,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AACf,KAAA;IAED,OACK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAC,KACJ,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,EAChC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAChB,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,IAAI;SACX,EACD,CAAA,CAAA;AACJ;;AChSA;AACO,MAAM,iBAAiB,GAAG,CAC/B,QAAgB,EAChB,MAA4B,KACD;AAC3B,IAAA,MAAM,IAAI,GAAG,CAAA,CAAA,EAAI,MAAM,CAAC,UAAU,EAAE,CAAC;AACrC,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,aAAa,EAAE,EAAE;KAClB,CAAC;IACF,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAClC,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAExC,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;KACd,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,0BAA0B,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC/D,IAAA,MAAM,SAAS,GAAG,IAAIS,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA0B,CAAC;AAE3D,IAAA,GAAG,CAAC,yBAAyB,CAAC,MAAM,GAC/B,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAG,CAAC,yBAAyB,CAAC,MAAM,CACvC,EAAA,EAAA,UAAU,EAAE,gBAAgB,CAAC,GAAG,CAAC,yBAAyB,CAAC,MAAM,CAAC,UAAU,CAAC,EAC7E,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAyB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAC/D,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAyB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAC/D,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAyB,CAAC,MAAM,CAAC,UAAU,CAAC,GACpE,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;ACjCD;AACO,MAAM,qBAAqB,GAAG,CAAC,QAAgB,KAA6B;IACjF,OAAO;AACL,QAAA,GAAG,EAAE,QAAQ;KACd,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,2BAA2B,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChE,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA2B,CAAC;IAE5D,IAAI,OAAO,GAAG,GAAG,CAAC,0BAA0B,CAAC,OAAO,IAAI,EAAE,CAAC;AAC3D,IAAA,IAAI,OAAO,EAAE;AACX,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;AAC3B,YAAA,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;AACrB,SAAA;QAED,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;YAC7B,OACK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,KACP,UAAU,EAAE,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC;;AAE7C,gBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EACnC,GAAG,EAAE,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EACxB,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,GAAG,CAAC,0BAA0B,GAAG;QAC/B,OAAO;KACR,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;ACpBM,MAAM,iBAAiB,GAAG,CAC/B,MAAc,EACd,KAAA,GAAgB,aAAa,EAC7B,cAAyB,KACP;IAClB,OAAO;AACL,QAAA,UAAU,EAAE;AACV,YAAA;gBACE,MAAM;gBACN,KAAK;AACN,aAAA;AACF,SAAA;AACD,QAAA,UAAU,EAAE,cAAc;KAC3B,CAAC;AACJ,EAAE;MAEW,sBAAsB,GAAG,CACpC,eAAyB,EACzB,cAA8B,KACP;IACvB,OAAO;QACL,eAAe;AACf,QAAA,SAAS,EAAEzE,OAAG,CAAC,WAAW,CAAC;AACzB,YAAA,OAAO,EAAE,qBAAqB;YAC9B,KAAK,EAAE0E,uBAAc,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE;SACtD,CAAC;KACH,CAAC;AACJ,EAAE;AAEW,MAAA,oBAAoB,GAAG,CAClC,OAAe,EACf,OAAe,EACf,mBAAwC,KACnB;IACrB,OAAO;QACL,OAAO;QACP,OAAO;AACP,QAAA,SAAS,EAAE1E,OAAG,CAAC,WAAW,CAAC;AACzB,YAAA,OAAO,EAAE,0BAA0B;YACnC,KAAK,EAAE2E,4BAAmB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,MAAM,EAAE;SAChE,CAAC;KACH,CAAC;AACJ,EAAE;AAEK,MAAM,UAAU,GAAG,CACxB,MAAc,EACd,KAAgB,GAAA,aAAa,EAC7B,gBAA0B,EAC1B,cAAyB,KACvB;IACF,OAAO;AACL,QAAA,OAAO,EAAE,0BAA0B;AACnC,QAAA,SAAS,EAAE;AACT,YAAA,OAAO,EAAE,qBAAqB;AAC9B,YAAA,UAAU,EAAEC,qBAAa,CAAC,cAAc,CAAC;AACzC,YAAA,WAAW,EAAE;AACX,gBAAA;oBACE,MAAM;oBACN,KAAK;AACN,iBAAA;AACF,aAAA;AACF,SAAA;QACD,gBAAgB;KACjB,CAAC;AACJ;;ACvFA,MAAM,QAAQ,GAAG,kBAAkB,CAAC;AACpC,MAAM,WAAW,GAAG,sCAAsC,CAAC;AAC3D,MAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,MAAM,YAAY,GAAG,GAAG,CAAC;AACzB,MAAM,cAAc,GAAG,GAAG,CAAC;AAE3B,MAAM,gBAAgB,GAAG,CAAC,UAAmB,KAAI;IAC/C,IAAI,CAAC,UAAU,EAAE;AACf,QAAA,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;AACxD,KAAA;AACD,IAAA,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;AACjC,IAAA,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,EAAE,EAAE;AAC7B,QAAA,MAAM,IAAI,KAAK,CAAC,CAAA,gEAAA,CAAkE,CAAC,CAAC;AACrF,KAAA;AACD,IAAA,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;AAC9B,QAAA,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;AAC3F,KAAA;IACD,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AACvF,QAAA,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;AAC3E,KAAA;AACD,IAAA,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;AAClC,QAAA,MAAM,IAAI,KAAK,CACb,2FAA2F,CAC5F,CAAC;AACH,KAAA;AACD,IAAA,IACE,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG;AACrB,QAAA,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG;AAC9B,QAAA,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG;AACrB,QAAA,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAC9B;AACA,QAAA,MAAM,IAAI,KAAK,CACb,kFAAkF,CACnF,CAAC;AACH,KAAA;AACH,EAAE;AAEF,MAAM,mBAAmB,GAAG,CAAC,IAAY,KAAa;AACpD,IAAA,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IAC5B,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;AAC7C,QAAA,QAAQ,CAAC,CAAC,IAAI,EAAE;AACd,YAAA,KAAK,eAAe,CAAC;AACrB,YAAA,KAAK,YAAY;AACf,gBAAA,OAAO,IAAI,CAAC;AACf,SAAA;AACF,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,CAAC,GAAW,KAAa;IACtC,IAAI;AACF,QAAA,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/D,QAAA,OAAO,IAAI,CAAC;AACb,KAAA;IAAC,OAAM,EAAA,EAAA;AACN,QAAA,OAAO,KAAK,CAAC;AACd,KAAA;AACH,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,UAAmB,KAAI;IAC/C,IAAI,CAAC,UAAU,EAAE;AACf,QAAA,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;AACxD,KAAA;AACD,IAAA,IAAI,UAAU,CAAC,MAAM,GAAG,IAAI,EAAE;AAC5B,QAAA,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;AAC1E,KAAA;AACD,IAAA,IAAI,mBAAmB,CAAC,UAAU,CAAC,EAAE;AACnC,QAAA,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;AACrD,KAAA;AACD,IAAA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;AACvB,QAAA,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;AACtE,KAAA;AACD,IAAA,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAA,EAAA,CAAI,CAAC,EAAE;AAC7B,QAAA,MAAM,IAAI,KAAK,CAAC,CAAA,iDAAA,CAAmD,CAAC,CAAC;AACtE,KAAA;AACH,EAAE;AAEF,MAAM,aAAa,GAAG,CAAC,OAAgB,KAAI;AACzC,IAAA,IAAI,CAAC,OAAO;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;AACjE,IAAA,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;AAClG,EAAE;AAEF,MAAM,SAAS,GAAG,CAAC,GAAY,KAAI;AACjC,IAAA,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;AAAE,QAAA,OAAO,KAAK,CAAC;AAC3C,IAAA,MAAM,OAAO,GAAG,IAAI,MAAM,CACxB,mBAAmB;AACjB,QAAA,sDAAsD;AACtD,QAAA,iBAAiB;AACjB,QAAA,gBAAgB;AAChB,QAAA,0BAA0B;AAC1B,QAAA,6BAA6B;AAC7B,QAAA,uBAAuB;AACzB,IAAA,GAAG,CACJ,CAAC;AAEF,IAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AAC9D,EAAE;AAEF;AACA,MAAM,UAAU,GAAG,CAAC,YAAoB,EAAE,YAAoB,KAAI;AAChE,IAAA,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC;AACzC,IAAA,IAAI,YAAY,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;AACzC,QAAA,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AACrD,KAAA;AACD,IAAA,IAAI,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;AACvC,QAAA,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC;AAC9E,KAAA;AACD,IAAA,OAAO,YAAY,CAAC;AACtB,EAAE;AAEI,MAAA,uBAAuB,GAAG,CAAC,QAAQ,GAAG,EAAE,EAAE,UAAkB,KAAI;IACpE,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAC7B,SAAS,CAAC,QAAQ,CAAC,CAAC;IACpB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;AACvC,IAAA,OAAO,QAAQ,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAA,EAAA,CAAI,EAAE,CAAA,EAAG,QAAQ,CAAA,EAAA,EAAK,UAAU,CAAA,CAAA,CAAG,CAAC,CAAC;AAC1E,EAAE;AAEF,MAAM,cAAc,GAAG,CAAC,KAAa,KAAI;;AAEvC,IAAA,MAAM,QAAQ,GAAG;QACf,WAAW;QACX,WAAW;QACX,WAAW;QACX,WAAW;QACX,SAAS;QACT,UAAU;AACV,QAAA,kBAAkB;KACnB,CAAC;AAEF,IAAA,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;QAC9B,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClC,QAAA,IAAI,KAAK,EAAE;AACT,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AACF,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,eAAe,GAAG,CAAC,UAAkB,KAAI;AAC7C,IAAA,IACE,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;AACzB,QAAA,UAAU,KAAK,GAAG;AAClB,QAAA,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;QACzB,cAAc,CAAC,UAAU,CAAC,EAC1B;AACA,QAAA,MAAM,IAAI,KAAK,CAAC,8BAA8B,UAAU,CAAA,CAAE,CAAC,CAAC;AAC7D,KAAA;AACH;;ACvJA,MAAM,KAAK,GAAG,CAAC,IAAI,GAAG,EAAE,KAAI;IAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,GAAG,GAAG,EAAE,KAAI;AAC/B,IAAA,OAAO,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC3C,EAAE;AAEF,MAAM,aAAa,GAAG,CAAC,GAAG,GAAG,EAAE,KAAI;IACjC,MAAM,MAAM,GAAG,EAAE,CAAC;AAClB,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QACtC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAClE,KAAA;AACD,IAAA,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzB,EAAE;AAEF,MAAM,uBAAuB,GAAG,CAAC,UAAkB,KAAI;AACrD,IAAA,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;AACtC,IAAA,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;AACjE,IAAA,OAAO,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;AACzB,SAAA,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SAC3C,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,EAAE;AAEF,MAAM,iBAAiB,GAAG,CAAC,GAAG,GAAG,EAAE,KAAI;AACrC,IAAA,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;IACtC,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC1C,IAAA,OAAO,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;AACzB,SAAA,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SAC3C,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,EAAE;AAEF,MAAM,UAAU,GAAG,CAAC,GAAG,GAAG,EAAE,KAAI;IAC9B,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC7C,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QACtC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAClD,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,SAAS,gBAAgB,CAAC,UAAsB,EAAA;AAC9C,IAAA,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;IACzC,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC9C,IAAA,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAChC,CAAC;AAED,MAAM,yBAAyB,GAAG,CAAC,GAAG,GAAG,EAAE,KAAI;AAC7C,IAAA,OAAO,gBAAgB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3C;;AChCA,MAAM,cAAc,GAAG,GAAG,CAAC;AAC3B,MAAM,cAAc,GAAG,GAAG,CAAC;AAC3B,MAAM,aAAa,GAAG,GAAG,CAAC;AAEb,MAAA,YAAY,GAAG,CAAC,UAAkB,KAAU;IACvD,OAAO;QACL,OAAO,EAAEC,kBAAY,CAAC,oBAAoB;AAC1C,QAAA,UAAU,EAAE,EAAE;AACd,QAAA,IAAI,EAAE,UAAU;KACjB,CAAC;AACJ,EAAE;MAEW,YAAY,GAAG,CAAC,UAAkB,EAAE,UAAkB,KAAU;AAC3E,IAAA,MAAM,IAAI,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChD,OAAO;QACL,IAAI;QACJ,OAAO,EAAEA,kBAAY,CAAC,oBAAoB;AAC1C,QAAA,UAAU,EAAE,EAAE;KACf,CAAC;AACJ,EAAE;MAEW,WAAW,GAAG,CAAC,KAAa,EAAE,SAAiB,KAAU;IACpE,OAAO;QACL,OAAO,EAAEA,kBAAY,CAAC,mBAAmB;AACzC,QAAA,UAAU,EAAE,KAAK;AACjB,QAAA,IAAI,EAAE,SAAS;KAChB,CAAC;AACJ,EAAE;AAEW,MAAA,WAAW,GAAG,CAAC,GAAS,KAAI;IACvC,IAAI,GAAG,GAAG,EAAE,CAAC;IAEb,QAAQ,GAAG,CAAC,OAAO;QACjB,KAAKA,kBAAY,CAAC,oBAAoB;YACpC,GAAG,GAAG,OAAO,cAAc,CAAA,EAAA,EAAK,GAAG,CAAC,IAAI,EAAE,CAAC;YAC3C,MAAM;QACR,KAAKA,kBAAY,CAAC,oBAAoB;YACpC,GAAG,GAAG,OAAO,cAAc,CAAA,EAAA,EAAK,GAAG,CAAC,IAAI,EAAE,CAAC;YAC3C,MAAM;QACR,KAAKA,kBAAY,CAAC,mBAAmB;AACnC,YAAA,GAAG,GAAG,CAAA,IAAA,EAAO,aAAa,CAAA,CAAA,EAAI,GAAG,CAAC,UAAU,CAAA,CAAA,EAAI,GAAG,CAAC,IAAI,CAAA,CAAE,CAAC;YAC3D,MAAM;AACR,QAAA;AACE,YAAA,OAAO,EAAE,CAAC;AACb,KAAA;AAED,IAAA,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;AACpB;;AC7DO,MAAM,mBAAmB,GAAG,MAAK;AACtC,IAAAC,yBAAK,CAAC,MAAM,CAACC,uBAAG,CAAC,CAAC;IAElB,OAAOD,yBAAK,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;AACjC,EAAE;AAEW,MAAA,sBAAsB,GAAG,CAAC,YAAoB,KAAI;AAC7D,IAAAA,yBAAK,CAAC,MAAM,CAACC,uBAAG,CAAC,CAAC;AAClB,IAAAD,yBAAK,CAAC,MAAM,CAACE,4BAAQ,CAAC,CAAC;;IAEvB,MAAM,EAAE,GAAG,SAAS,CAAC;AAErB,IAAA,OAAOF,yBAAK,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;AAC7C;;ACLA;AACO,MAAM,+BAA+B,GAAG,CAC7C,QAAgB,EAChB,MAAmC,KACrB;IACd,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC;IACxE,MAAM,IAAI,GAAG,GAAG,CAAC;AACjB,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,kBAAkB,EAAE,MAAM;AAC1B,QAAA,eAAe,EAAE,MAAM,CAAC,YAAY,CAAC;AACrC,QAAA,aAAa,EAAE,MAAM,CAAC,UAAU,CAAC;AACjC,QAAA,iBAAiB,EAAE,MAAM,CAAC,cAAc,CAAC;KAC1C,CAAC;AAEF,IAAA,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAExC,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,MAAM,EAAE,UAAU;AAClB,QAAA,GAAG,EAAE;YACH,QAAQ,EAAE,GAAG,CAAC,QAAQ;AACtB,YAAA,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,IAAI;AACL,SAAA;KACF,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,UAAU;KACnB,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,iCAAiC,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;;AACtE,IAAA,MAAM,SAAS,GAAG,IAAIL,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAiC,CAAC;IAElE,IAAI,WAAW,GAAG,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,wBAAwB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAW,KAAI,EAAE,CAAC;AAClE,IAAA,IAAI,WAAW,EAAE;AACf,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AAC/B,YAAA,WAAW,GAAG,CAAC,WAAW,CAAC,CAAC;AAC7B,SAAA;AAED,QAAA,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,KAAK,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;AAC7E,KAAA;IAED,GAAG,CAAC,wBAAwB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACvB,GAAG,CAAC,wBAAwB,CAAA,EAAA,EAC/B,WAAW,EAAE,WAAW,EAAA,CACzB,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;AClED;AACO,MAAM,2BAA2B,GAAG,CACzC,QAAgB,EAChB,MAA+B,KACJ;IAC3B,MAAM,IAAI,GAAG,GAAG,CAAC;AACjB,IAAA,MAAM,QAAQ,GAAG;QACf,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;AACzB,QAAA,eAAe,EAAE,MAAM;KACxB,CAAC;IAEF,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAClC,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAExC,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;KACd,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,6BAA6B,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClE,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA6B,CAAC;IAE9D,IAAI,WAAW,GAAG,GAAG,CAAC,4BAA4B,CAAC,WAAW,IAAI,EAAE,CAAC;AACrE,IAAA,IAAI,WAAW,EAAE;AACf,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AAC/B,YAAA,WAAW,GAAG,CAAC,WAAW,CAAC,CAAC;AAC7B,SAAA;QAED,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AACrC,YAAA,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,YAAA,IAAI,KAAK,EAAE;AACT,gBAAA,KAAK,GACA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,KAAK,KACb,UAAU,EAAE,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;;AAEnD,oBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAC7C,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EACrC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GACtC,CAAC;AACH,aAAA;AAED,YAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IAAI,CAAA,EAAA,EACP,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EACnB,KAAK,EACL,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,GAAG,CAAC,4BAA4B,GAC3B,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAG,CAAC,4BAA4B,CAAA,EAAA,EACnC,WAAW,EAAA,CACZ,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;ACxDD;AACO,MAAM,8BAA8B,GAAG,CAC5C,QAAgB,EAChB,MAA0C,KACxC;IACF,MAAM,IAAI,GAAG,GAAG,CAAC;AACjB,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,iBAAiB,EAAE,MAAM;QACzB,iBAAiB,EAAE,MAAM,CAAC,cAAc;KACzC,CAAC;IAEF,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAClC,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAExC,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;KACd,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,gCAAgC,GAAG,CAAC,IAAY,KAAI;AAC/D,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAwC,CAAC;IAEzE,IAAI,OAAO,GAAG,GAAG,CAAC,qCAAqC,CAAC,OAAO,IAAI,EAAE,CAAC;AACtE,IAAA,IAAI,OAAO,EAAE;AACX,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;AAC3B,YAAA,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;AACrB,SAAA;QAED,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;YAC7B,OACK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,KACP,UAAU,EAAE,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC;;AAE7C,gBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EACnC,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,GAAG,CAAC,qCAAqC,GAAG;QAC1C,OAAO;KACR,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;;ACtDM,MAAM,UAAU,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC/C,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAyB,CAAC;IAE1D,OAAO;AACL,QAAA,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI;AACpB,QAAA,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,OAAO;KAC3B,CAAC;AACJ,CAAC,CAAA;;ACND;AACO,MAAM,+BAA+B,GAAG,CAC7C,QAAgB,EAChB,MAAwB,KACtB,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;IACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;AAC3C,IAAA,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;AAC/B,IAAA,MAAM,SAAS,GAAG,IAAI,GAAG,IAAI,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;AAC1D,IAAA,MAAM,UAAU,GAAG,KAAK,GAAG,KAAK,GAAG,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;;AAE9D,IAAA,MAAM,cAAc,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAE9D,MAAM,IAAI,GAAG,GAAG,CAAC;AACjB,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,YAAY,EAAE,CAAA,EAAG,SAAS,CAAA,CAAA,EAAI,cAAc,CAAE,CAAA;AAC9C,QAAA,YAAY,EAAE,MAAM;KACrB,CAAC;AACF,IAAA,MAAM,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AACrC,IAAA,MAAM,GAAG,GAAG,CAAG,EAAA,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAG,EAAA,IAAI,CAAI,CAAA,EAAA,KAAK,EAAE,CAAC;AAE/E,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,MAAM,EAAE,UAAU;AAClB,QAAA,GAAG,EAAE;AACH,YAAA,QAAQ,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ;YAC/B,KAAK;YACL,IAAI;AACL,SAAA;KACF,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,UAAU;KACnB,CAAC;IAEF,OAAO;QACL,GAAG;QACH,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC,CAAA,CAAC;AAEK,MAAM,sBAAsB,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC3D,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAsB,CAAC;AAEvD,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;ACrDK,SAAU,OAAO,CAAC,QAAgB,EAAA;IACtC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;QACrC,UAAU,CAAC,MAAK;AACd,YAAA,MAAM,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;SACvC,EAAE,QAAQ,CAAC,CAAC;AACf,KAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,gBAAgB,GAAG,CAAO,QAAQ,GAAG,EAAE,EAAE,YAAoB,GAAA,EAAE,EAAE,QAAQ,GAAG,KAAK,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;IACzF,IAAI;AACF,QAAA,MAAM,QAAQ,IAAI,MAAM,OAAO,CAAC,IAAI,CAAC;YACnC,OAAO,CAAC,QAAQ,CAAC;AACjB,YAAAQ,yBAAK,CAAC,QAAQ,EAAE,YAAY,CAAC;AAC9B,SAAA,CAAC,CAAa,CAAC;AAChB,QAAA,OAAO,QAAQ,CAAC;AACjB,KAAA;AAAC,IAAA,OAAO,KAAK,EAAE;AACd,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAA;AACH,CAAC,CAAA;;ACfD;AACO,MAAM,oBAAoB,GAAG,CAClC,QAAgB,EAChB,MAGC,KACC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACF,IAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IAC1C,MAAM,IAAI,GAAG,CAAI,CAAA,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;IAC1C,MAAM,KAAK,GAAG,EAAE,CAAC;AAEjB,IAAA,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AAEzE,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,MAAM,EAAE,UAAU;AAClB,QAAA,GAAG,EAAE;AACH,YAAA,QAAQ,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ;YAC/B,KAAK;YACL,IAAI;AACL,SAAA;AACD,QAAA,WAAW,EAAE,0BAA0B;KACxC,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,UAAU;KACnB,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC,CAAA;;ACjCD;AACO,MAAM,oBAAoB,GAAG,CAClC,QAAgB,EAChB,MAUC,KACC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACF,IAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,MAAM,CAAC;IACrF,MAAM,IAAI,GAAG,CAAI,CAAA,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;IAC1C,IAAI,QAAQ,GAAG,EAAE,CAAC;AAElB,IAAA,IAAI,aAAa,EAAE;AACjB,QAAA,QAAQ,GAAG;AACT,YAAA,QAAQ,EAAE,EAAE;AACZ,YAAA,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;AAC/B,YAAA,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE;YAC/C,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,IAAI,KAAK,CAAC;SACnD,CAAC;AACH,KAAA;AAED,IAAA,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAExC,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,OAAO,EAAE,OAAO;AAChB,QAAA,MAAM,EAAE,UAAU;AAClB,QAAA,GAAG,EAAE;YACH,QAAQ,EAAE,GAAG,CAAC,QAAQ;AACtB,YAAA,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,IAAI;AACL,SAAA;QACD,WAAW;KACZ,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,UAAU;KACnB,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;AACP,QAAA,IAAI,EAAE,IAAI;KACX,CAAC;AACJ,CAAC,CAAA;;ACLM,IAAM,QAAQ,GAAd,MAAM,QAAQ,CAAA;IACN,OAAO,CAClB,GAAW,EACX,OAAoB,EACpB,OAAO,GAAG,KAAK,EACf,WAGC,EAAA;;YAED,IAAI;AACF,gBAAA,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;AACzC,gBAAA,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,UAAU,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC;AAC1D,gBAAA,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CACrC,GAAG,EAEE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,OAAO,CACV,EAAA,EAAA,MAAM,EAAE,UAAU,CAAC,MAAM,EAE3B,CAAA,EAAA,OAAO,CACR,CAAC;gBACF,YAAY,CAAC,GAAG,CAAC,CAAC;AAElB,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;gBAE5B,IAAI,MAAM,KAAK,2BAA2B,EAAE;oBAC1C,MAAM;AACJ,wBAAA,IAAI,EAAE,2BAA2B;AACjC,wBAAA,OAAO,EAAE,0BAA0B;AACnC,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,oBAAA,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACvC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBAErD,MAAM;wBACJ,IAAI,EAAE,IAAI,KAAI,WAAW,KAAA,IAAA,IAAX,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,IAAI,CAAA;wBAC/B,OAAO,EAAE,OAAO,KAAI,WAAW,KAAA,IAAA,IAAX,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,OAAO,CAAA;AACxC,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,OAAO,QAAQ,CAAC;AACjB,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;AACd,gBAAA,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEY,SAAS,CACpB,GAAW,EACX,OAAoB,EACpB,OAAO,GAAG,KAAK,EACf,WAGC,EAAA;;AAED,YAAA,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAEjC,IAAI;AACF,gBAAA,MAAM,CAAC,GAAG,IAAIC,8BAAU,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACtD,IAAI,OAAO,CAAC,OAAO,EAAE;oBAClB,OAAO,CAAC,OAAmB,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,CAAS,KAAI;AAC5D,wBAAA,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACd,qBAAC,CAAC,CAAC;AACJ,iBAAA;AACD,gBAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACnB,gBAAA,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;AAEhC,gBAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;AAChC,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;gBAE5B,IAAI,MAAM,KAAK,2BAA2B,EAAE;oBAC1C,MAAM;AACJ,wBAAA,IAAI,EAAE,2BAA2B;AACjC,wBAAA,OAAO,EAAE,0BAA0B;AACnC,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,oBAAA,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAC/B,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBAErD,MAAM;wBACJ,IAAI,EAAE,IAAI,KAAI,WAAW,KAAA,IAAA,IAAX,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,IAAI,CAAA;wBAC/B,OAAO,EAAE,OAAO,KAAI,WAAW,KAAA,IAAA,IAAX,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,OAAO,CAAA;AACxC,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,OAAO,QAAQ,CAAC;AACjB,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;AACd,gBAAA,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAED;;;AAGG;IACU,MAAM,CACjB,GAAW,EACX,OAAoB,EACpB,OAAe,EACf,UAAsB,EACtB,QAMC,EAAA;;;YAED,MAAM,CAAC,GAAGA,8BAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC9B,YAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACnB,YAAA,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;YAEhC,IAAI,OAAO,CAAC,OAAO,EAAE;gBAClB,OAAO,CAAC,OAAmB,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,CAAS,KAAI;AAC5D,oBAAA,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACd,iBAAC,CAAC,CAAC;AACJ,aAAA;AAED,YAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,UAAU,EAAE;gBACnC,CAAC,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC,KAAI;;AACrB,oBAAA,CAAA,EAAA,GAAA,QAAQ,CAAC,UAAU,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,QAAA,EAAA,CAAC,CAAC,CAAC;AAC3B,iBAAC,CAAC,CAAC;AACJ,aAAA;AAED,YAAA,MAAM,IAAI,GAAG,cAAc,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC;;YAG1E,MAAM,QAAQ,GACZC,oBAAM,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,kBAAkB,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC;AAClF,YAAA,IAAIA,oBAAM,EAAE;AACV,gBAAA,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChB,aAAA;YAED,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxC,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;gBAE5B,IAAI,MAAM,KAAK,2BAA2B,EAAE;oBAC1C,MAAM;AACJ,wBAAA,IAAI,EAAE,2BAA2B;AACjC,wBAAA,OAAO,EAAE,0BAA0B;AACnC,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,oBAAA,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAE/B,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBAErD,MAAM;AACJ,wBAAA,IAAI,EAAE,CAAA,CAAA,EAAA,GAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAR,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAE,WAAW,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,KAAI,IAAI;AACzC,wBAAA,OAAO,EAAE,CAAA,CAAA,EAAA,GAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAR,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAE,WAAW,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,KAAI,OAAO;AAClD,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,OAAO,QAAQ,CAAC;AACjB,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;AACd,gBAAA,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,aAAA;;AACF,KAAA;IAEY,WAAW,CAAC,OAAyB,EAAE,QAAkB,EAAA;;AACpE,YAAA,MAAM,WAAW,GAAY,uBAAuB,CAAC,OAAO,CAAC,CAAC;AAE9D,YAAA,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;gBAC7B,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;AAC3C,gBAAA,MAAM,MAAM,GAAG3E,aAAO,CAACyD,eAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE5D,gBAAA,WAAW,CAAC,GAAG,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;AAChD,gBAAA,WAAW,CAAC,GAAG,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;AAC7C,gBAAA,WAAW,CAAC,GAAG,CAAC,mBAAmB,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,aAAA;YAED,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YACnE,MAAM,IAAI,GAAG,gBAAgB,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AAC1D,YAAA,WAAW,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;AAE/C,YAAA,OAAO,WAAW,CAAC;SACpB,CAAA,CAAA;AAAA,KAAA;IAEM,WAAW,GAAA;QAChB,OAAO;AACL,YAAA,UAAU,EAAE,oBAAoB;AAChC,YAAA,UAAU,EAAE,oBAAoB;SACjC,CAAC;KACH;CACF,CAAA;AApMY,QAAQ,GAAA,UAAA,CAAA;AADpB,IAAAlC,mBAAU,EAAE;AACA,CAAA,EAAA,QAAQ,CAoMpB;;ACpPD;AACO,MAAM,oBAAoB,GAAG,CAClC,QAAgB,EAChB,MAA0B,KACC;AAC3B,IAAA,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IAC3D,MAAM,IAAI,GAAG,GAAG,CAAC;AACjB,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,aAAa,EAAE,MAAM;QACrB,IAAI;QACJ,MAAM;AACN,QAAA,aAAa,EAAE,UAAoB;AACnC,QAAA,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;AACpB,QAAA,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;KACvB,CAAC;IACF,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAClC,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAExC,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;KACd,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,uBAAuB,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC5D,IAAA,MAAM,SAAS,GAAG,IAAI0C,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAuB,CAAC;IAExD,IAAI,MAAM,GAAG,GAAG,CAAC,wBAAwB,CAAC,MAAM,IAAI,EAAE,CAAC;AACvD,IAAA,IAAI,MAAM,EAAE;AACV,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC1B,YAAA,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AACnB,SAAA;QAED,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AAC3B,YAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IAAI,CACP,EAAA,EAAA,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EACnC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;;AAEnC,gBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,KAAK,EAAE,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAClC,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,GAAG,CAAC,wBAAwB,GAAG;AAC7B,QAAA,MAAM,EAAE,MAAM;QACd,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,KAAK,CAAC;KAClD,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;AC1DD;AACO,MAAM,8BAA8B,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnE,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA8B,CAAC;IAE/D,IAAI,MAAM,GAAG,GAAG,CAAC,2BAA2B,CAAC,MAAM,IAAI,EAAE,CAAC;AAC1D,IAAA,IAAI,MAAM,EAAE;AACV,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC1B,YAAA,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AACnB,SAAA;QAED,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AAC3B,YAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IAAI,CACP,EAAA,EAAA,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EACnC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;;AAEnC,gBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,KAAK,EAAE,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAClC,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;AAED,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;AC5BD;AACO,MAAM,2BAA2B,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChE,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA2B,CAAC;IAE5D,IAAI,MAAM,GAAG,GAAG,CAAC,yBAAyB,CAAC,MAAM,IAAI,EAAE,CAAC;AACxD,IAAA,IAAI,MAAM,EAAE;AACV,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC1B,YAAA,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AACnB,SAAA;QAED,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AAC3B,YAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IAAI,CACP,EAAA,EAAA,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EACnC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;;AAEnC,gBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,KAAK,EAAE,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAClC,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,GAAG,CAAC,yBAAyB,GAAG;AAC9B,QAAA,MAAM,EAAE,MAAM;KACf,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;ACjCD;AACO,MAAM,gCAAgC,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACrE,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAgC,CAAC;IAEjE,IAAI,MAAM,GAAG,GAAG,CAAC,8BAA8B,CAAC,MAAM,IAAI,EAAE,CAAC;AAC7D,IAAA,IAAI,MAAM,EAAE;AACV,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC1B,YAAA,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AACnB,SAAA;QAED,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AAC3B,YAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IAAI,CACP,EAAA,EAAA,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EACnC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;;AAEnC,gBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,KAAK,EAAE,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAClC,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,GAAG,CAAC,8BAA8B,GAAG;AACnC,QAAA,MAAM,EAAE,MAAM;KACf,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;AClCD;AACO,MAAM,6BAA6B,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClE,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA6B,CAAC;AAE9D,IAAA,GAAG,CAAC,6BAA6B,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC5B,GAAG,CAAC,6BAA6B,KACpC,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,6BAA6B,CAAC,MAAM,CAAC,GACzD,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;AChBM,MAAM,sBAAsB,GAAG;AACpC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,gCAAgC;AACtC,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,0BAA0B;AAChC,YAAA,IAAI,EAAE,UAAU;AACjB,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,kBAAkB;AACxB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACkCM,IAAM,YAAY,GAAlB,MAAM,YAAY,CAAA;AACvB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAC7D,QAAA,IAAA,CAAA,WAAW,GAAG1B,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KADiB;IAG5D,MAAM,GAAA;;YACjB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;SAC3B,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,qBAAqB,CAAC,OAAuC,EAAA;;YACxE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;SAC9C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,+BAA+B,CAAC,OAAiD,EAAA;;YAC5F,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC;SACxD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,6BAA6B,CAAC,OAA+C,EAAA;;YACxF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;SACtD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,2BAA2B,CAAC,OAA6C,EAAA;;YACpF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;SACpD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,oCAAoC,CAC/C,OAAsD,EAAA;;YAEtD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,sCAAsC,CAAC,OAAO,CAAC,CAAC;SAClE,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,wCAAwC,CACnD,OAA0D,EAAA;;YAE1D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,0CAA0C,CAAC,OAAO,CAAC,CAAC;SACtE,CAAA,CAAA;AAAA,KAAA;IAEY,MAAM,CAAC,OAAe,EAAE,GAAc,EAAA;;AACjD,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,gBAAgB,EAChB,OAAO,EACP,sBAAsB,EACtBqC,cAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EACpBA,cAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC/B,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AApDY,YAAY,GAAA,UAAA,CAAA;AADxB,IAAArD,mBAAU,EAAE;IAEE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAD1D,CAAA,EAAA,YAAY,CAoDxB;;ACAM,IAAM,EAAE,GAAR,MAAM,EAAE,CAAA;AAAR,IAAA,WAAA,GAAA;AACG,QAAA,IAAA,CAAA,MAAM,GAAGd,kBAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACnC,QAAA,IAAA,CAAA,WAAW,GAAGA,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAChD,QAAA,IAAA,CAAA,YAAY,GAAGA,kBAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;AAC/C,QAAA,IAAA,CAAA,QAAQ,GAAGA,kBAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAmVhD;IAjVc,mBAAmB,GAAA;;YAC9B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;AACtD,YAAA,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;YACzC,OAAO,GAAG,CAAC,GAAG,CAAC;SAChB,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,sBAAsB,CAAC,IAAY,EAAA;;YAC9C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;AACtD,YAAA,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC;AACpC,gBAAA,EAAE,EAAE,IAAI;AACT,aAAA,CAAC,CAAC;YACH,OAAO,GAAG,CAAC,eAAe,CAAC;SAC5B,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,sBAAsB,CAAC,OAAmC,EAAA;;YACrE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;AACtD,YAAA,OAAO,MAAM,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;SAC/C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gCAAgC,CAAC,OAA6C,EAAA;;YACzF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;AACtD,YAAA,OAAO,MAAM,GAAG,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;SACzD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,mCAAmC,CAC9C,OAAqD,EAAA;;YAErD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;AACtD,YAAA,OAAO,MAAM,GAAG,CAAC,gCAAgC,CAAC,OAAO,CAAC,CAAC;SAC5D,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,qDAAqD,CAChE,OAAsD,EAAA;;YAEtD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;AACtD,YAAA,OAAO,MAAM,GAAG,CAAC,kDAAkD,CAAC,OAAO,CAAC,CAAC;SAC9E,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,SAAiB,EAAA;;AACzC,YAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAChD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;SAC/D,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,UAAkB,EAAA;;;AAC9C,YAAA,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAEhE,YAAA,IAAI,CAAC,UAAU;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;YAE1D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,2BAA2B,CAAC;gBACrE,QAAQ,EAAE,UAAU,CAAC,0BAA0B;AAChD,aAAA,CAAC,CAAC;AAEH,YAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAChD,MAAM,IAAI,GAAG,CAAA,EAAA,GAAA,UAAU,CAAC,wBAAwB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,CAAC;YAE9D,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;;AAC1D,KAAA;AAEY,IAAA,qBAAqB,CAAC,YAAoB,EAAA;;AACrD,YAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7C,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,eAAe,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;SAC5E,CAAA,CAAA;AAAA,KAAA;IAEY,MAAM,GAAA;;YACjB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;AACtD,YAAA,OAAO,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;SAC3B,CAAA,CAAA;AAAA,KAAA;IAEY,cAAc,GAAA;;AACzB,YAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAC7C,YAAA,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,KAAKsC,cAAM,CAAC,iBAAiB,CAAC,CAAC;AAC1E,YAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;AACtE,YAAA,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SAClB,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,UAAU,CAAC,MAA0B,EAAA;;YAChD,IAAI;AACF,gBAAA,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAEhC,gBAAA,IAAI,GAAG,GAAuB;AAC5B,oBAAA,wBAAwB,EAAE;AACxB,wBAAA,MAAM,EAAE,EAAE;AACV,wBAAA,KAAK,EAAE,CAAC;AACT,qBAAA;iBACF,CAAC;AAEF,gBAAA,IAAI,IAAI,KAAK,EAAE,IAAI,MAAM,KAAK,EAAE,EAAE;oBAChC,OAAO;AACL,wBAAA,IAAI,EAAE,CAAC;AACP,wBAAA,OAAO,EAAE,SAAS;AAClB,wBAAA,IAAI,EAAE,GAAG;qBACV,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;AACvC,gBAAA,MAAM,EAAE,GAAG,EAAE,GAAG,oBAAoB,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAE1D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;AACE,oBAAA,OAAO,EAAE,EAAE;AACX,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,IAAI,CACL,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,GAAG,GAAG,MAAM,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAE7C,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,SAAS;AAClB,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,MAA+B,EAAA;;YAC3D,IAAI;gBACF,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;AAE5D,gBAAA,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;AACvC,gBAAA,IAAI,GAAG,GAAG,CAAA,EAAG,EAAE,CAAC,QAAQ,CAAe,YAAA,EAAA,QAAQ,CAAI,CAAA,EAAA,UAAU,IAAIC,yBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC;AAE9F,gBAAA,IAAI,UAAU,EAAE;AACd,oBAAA,GAAG,IAAI,CAAW,QAAA,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;AAC5C,iBAAA;gBAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;AACE,oBAAA,OAAO,EAAE,EAAE;AACX,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,IAAI,CACL,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,6BAA6B,CAAC,OAAO,CAAC,CAAC;gBAEzD,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,SAAS;AAClB,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,iBAAiB,CAAC,MAAgC,EAAA;;YAC7D,IAAI;gBACF,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;AAC9C,gBAAA,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;gBACvC,IAAI,GAAG,GAAG,CAAG,EAAA,EAAE,CAAC,QAAQ,CAAA,wBAAA,EAA2B,OAAO,CAAA,CAAE,CAAC;AAE7D,gBAAA,IAAI,KAAK,EAAE;AACT,oBAAA,GAAG,IAAI,CAAA,OAAA,EAAU,KAAK,CAAA,CAAE,CAAC;AAC1B,iBAAA;AACD,gBAAA,IAAI,UAAU,EAAE;AACd,oBAAA,GAAG,IAAI,CAAA,aAAA,EAAgB,UAAU,CAAA,CAAE,CAAC;AACrC,iBAAA;gBAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;AACE,oBAAA,OAAO,EAAE,EAAE;AACX,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,IAAI,CACL,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,8BAA8B,CAAC,OAAO,CAAC,CAAC;gBAE1D,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,SAAS;AAClB,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,cAAc,CAAC,MAA8B,EAAA;;YACxD,IAAI;gBACF,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;AAC9C,gBAAA,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;AACvC,gBAAA,IAAI,GAAG,GAAG,CAAA,EAAG,EAAE,CAAC,QAAQ,cAAc,CAAC;AAEvC,gBAAA,IAAI,KAAK,EAAE;AACT,oBAAA,GAAG,IAAI,CAAA,OAAA,EAAU,KAAK,CAAA,CAAE,CAAC;AAC1B,iBAAA;AACD,gBAAA,IAAI,UAAU,EAAE;AACd,oBAAA,GAAG,IAAI,CAAA,aAAA,EAAgB,UAAU,CAAA,CAAE,CAAC;AACrC,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC;oBAC1B,CAAC,qBAAqB,GAAG,OAAO;AACjC,iBAAA,CAAC,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;oBACE,OAAO;AACP,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,IAAI,CACL,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,2BAA2B,CAAC,OAAO,CAAC,CAAC;gBAEvD,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,SAAS;AAClB,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,mBAAmB,CAAC,MAAkC,EAAA;;YACjE,IAAI;gBACF,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;AAC9C,gBAAA,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;AACvC,gBAAA,IAAI,GAAG,GAAG,CAAA,EAAG,EAAE,CAAC,QAAQ,eAAe,CAAC;AAExC,gBAAA,IAAI,KAAK,EAAE;AACT,oBAAA,GAAG,IAAI,CAAA,OAAA,EAAU,KAAK,CAAA,CAAE,CAAC;AAC1B,iBAAA;AACD,gBAAA,IAAI,UAAU,EAAE;AACd,oBAAA,GAAG,IAAI,CAAA,aAAA,EAAgB,UAAU,CAAA,CAAE,CAAC;AACrC,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC;oBAC1B,CAAC,qBAAqB,GAAG,OAAO;AACjC,iBAAA,CAAC,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;oBACE,OAAO;AACP,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,IAAI,CACL,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,gCAAgC,CAAC,OAAO,CAAC,CAAC;gBAE5D,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,SAAS;AAClB,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAvVY,EAAE,GAAA,UAAA,CAAA;AADd,IAAAvD,mBAAU,EAAE;AACA,CAAA,EAAA,EAAE,CAuVd;;AC9XM,IAAM,OAAO,GAAb,MAAM,OAAO,CAAA;AAClB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAC7D,QAAA,IAAA,CAAA,WAAW,GAAGgB,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KADiB;IAG5D,MAAM,GAAA;;YACjB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;SAC3B,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,SAAS,CAAC,GAAiB,EAAA;;YACtC,MAAM,KAAK,GAAGwC,iBAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,mBAAmB,EACnB,GAAG,CAAC,QAAQ,EACZ,4BAA4B,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAEpD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAK,CACR,EAAA,EAAA,eAAe,EAAE,GAAG,CAAC,cAAc,GAAGX,qBAAa,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,EAAE,EAC5E,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,KAAI;oBACrC,IAAI,CAAC,CAAC,eAAe,EAAE;;wBAErB,CAAC,CAAC,eAAe,GAAGA,qBAAa,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;AACtD,qBAAA;AAAM,yBAAA;;AAEL,wBAAA,CAAC,CAAC,eAAe,GAAG,EAAE,CAAC;AACxB,qBAAA;AAED,oBAAA,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE;;AAE3B,wBAAA,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;AACpB,qBAAA;AACD,oBAAA,OAAO,CAAC,CAAC;AACX,iBAAC,CAAC,EAAA,CAAA,EAEJW,iBAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAClC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,GAAoB,EAAA;;AAC5C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,sBAAsB,EACtB,GAAG,CAAC,QAAQ,EACZ,4BAA4B,EAC5BC,oBAAe,CAAC,KAAK,CAAC,GAAG,CAAC,EAC1BA,oBAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACrC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,MAAM,CAAC,GAAc,EAAA;;;AAChC,YAAA,MAAM,WAAW,GAAG,CAAA,MAAA,CAAA,EAAA,GAAA,GAAG,aAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,0CAAE,MAAM,MAAK,CAAC,CAAC;AAElD,YAAA,MAAM,sBAAsB,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;AAEtE,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,gBAAgB,EAChB,GAAG,CAAC,QAAQ,EACZ,sBAAsB,EACtBC,cAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EACpBA,cAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC/B,CAAC;;AACH,KAAA;AAEY,IAAA,iBAAiB,CAAC,OAAmC,EAAA;;YAChE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;SAC/C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,wBAAwB,CAAC,OAAqC,EAAA;;YACzE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;SACjD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,sBAAsB,CAAC,OAAmC,EAAA;;YACrE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;SAC/C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,kBAAkB,CAAC,OAA+B,EAAA;;YAC7D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;SAC3C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,OAA4B,EAAA;;YACpD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,sBAAsB,CAAC,OAAsC,EAAA;;YACxE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;SAClD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,eAAe,CAAC,OAAgC,EAAA;;YAC3D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;SAC5C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,oBAAoB,CAAC,OAAoC,EAAA;;YACpE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;SAChD,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AArGY,OAAO,GAAA,UAAA,CAAA;AADnB,IAAA1D,mBAAU,EAAE;IAEE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAD1D,CAAA,EAAA,OAAO,CAqGnB;;ACvKM,MAAM,mCAAmC,GAAG;AACjD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACO;;AC8LH,IAAM,MAAM,GAAZ,MAAM,MAAM,CAAA;AACjB,IAAA,WAAA,CACyC,QAAkB,EACxB,EAAM,EACD,OAAgB,EACX,YAA0B,EAAA;QAH9B,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QACxB,IAAE,CAAA,EAAA,GAAF,EAAE,CAAI;QACD,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QACX,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;AAG/D,QAAA,IAAA,CAAA,WAAW,GAAGd,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAChD,QAAA,IAAA,CAAA,QAAQ,GAAGA,kBAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAH3C;AAKS,IAAA,8BAA8B,CAAC,GAA8B,EAAA;;AACxE,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,gCAAgC,EAChC,GAAG,CAAC,QAAQ,EACZ,sCAAsC,EACtC2C,8BAAyB,CAAC,KAAK,CAAC,GAAG,CAAC,EACpCA,8BAAyB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC/C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,GAAoB,EAAA;;AAC5C,YAAA,mBAAmB,CAAC,GAAG,CAAC,gBAAgB,EAAE,+BAA+B,CAAC,CAAC;AAC3E,YAAA,mBAAmB,CAAC,GAAG,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;AAC1D,YAAA,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEjC,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,mCAAmC,CAAC;gBAC5E,eAAe,EAAE,GAAG,CAAC,gBAAgB;AACtC,aAAA,CAAC,CAAC;YAEH,IAAI,CAAC,eAAe,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,CAAA,iBAAA,EAAoB,GAAG,CAAC,gBAAgB,CAAY,UAAA,CAAA,CAAC,CAAC;AACvE,aAAA;YAED,MAAM,EAAE,0BAA0B,EAAE,GAClC,MAAM,IAAI,CAAC,YAAY,CAAC,oCAAoC,CAAC;gBAC3D,IAAI,EAAE,eAAe,CAAC,EAAE;gBACxB,eAAe,EAAEC,wBAAe,CAAC,2BAA2B;AAC7D,aAAA,CAAC,CAAC;AAEL,YAAA,MAAM,eAAe,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAChB,GAAG,CAAA,EAAA,EACN,iBAAiB,EAAE;AACjB,oBAAA,0BAA0B,EAAE,0BAA0B;AACtD,oBAAA,aAAa,EAAE5B,wBAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAC9B,oBAAA,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;AACzB,iBAAA,EAAA,CACF,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,sBAAsB,EACtB,GAAG,CAAC,OAAO,EACX,4BAA4B,EAEvB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA6B,oBAAe,CAAC,KAAK,CAAC,eAAe,CAAC,CACzC,EAAA,EAAA,mBAAmB,EAAE;AACnB,oBAAA,cAAc,EAAE,GAAG;AACnB,oBAAA,8BAA8B,EAAE,0BAA0B;AAC3D,iBAAA,EACD,kBAAkB,EAAE,eAAe,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAA,CAAA,EAEjEA,oBAAe,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,CACjD,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,GAAoB,EAAA;;AAC5C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,sBAAsB,EACtB,GAAG,CAAC,QAAQ,EACZ,4BAA4B,EAC5BC,oBAAe,CAAC,KAAK,CAAC,GAAG,CAAC,EAC1BA,oBAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACrC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,wBAAwB,CAAC,GAAgC,EAAA;;AACpE,YAAA,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAE7D,IAAI,CAAC,UAAU,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,CAAA,OAAA,EAAU,GAAG,CAAC,UAAU,CAAY,UAAA,CAAA,CAAC,CAAC;AACvD,aAAA;AAED,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,kCAAkC,EAClC,GAAG,CAAC,QAAQ,EACZ,wCAAwC,EACxCC,gCAA2B,CAAC,KAAK,CAAC,GAAG,CAAC,EACtCA,gCAA2B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACjD,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,UAAU,CAAC,UAAkB,EAAA;;YACxC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,UAAU,CAAC;gBAC1B,UAAU;AACX,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,cAAc,CAAC,QAAgB,EAAA;;YAC1C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,cAAc,CAAC;gBAC9B,QAAQ;AACT,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,eAAe,CAAC,UAAkB,EAAA;;YAC7C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,eAAe,CAAC;gBAC/B,UAAU;AACX,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,aAAa,CAAC,OAAwB,EAAA;;YACjD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACzC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,mBAAmB,CAAC,UAAkB,EAAE,QAAgB,EAAE,UAAsB,EAAA;;YAC3F,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;YAC3D,OAAO,GAAG,CAAC,gBAAgB,CAAC;gBAC1B,UAAU;gBACV,QAAQ;AACR,gBAAA,UAAU,EAAE,EAAE;gBACd,UAAU;AACX,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,WAAW,CAAC,WAAkC,EAAA;;YACzD,IAAI;gBACF,MAAM,EAAE,OAAO,EAAE,QAAQ,GAAG,KAAK,EAAE,QAAQ,EAAE,GAAG,WAAW,CAAC;gBAC5D,aAAa,CAAC,OAAO,CAAC,CAAC;gBACvB,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAEpB,MAAM,EAAE,GAAG,EAAE,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AAEhD,gBAAA,MAAM,OAAO,GAAG,IAAI5B,aAAO,CAAC;oBAC1B,CAAC,qBAAqB,GAAG,OAAO;AACjC,iBAAA,CAAC,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;oBACE,OAAO;AACP,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,QAAQ,CACT,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAE1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,mBAAmB;AACvC,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,2BAA2B,CAAC,OAAO,CAAC,CAAC;gBAEvD,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,qBAAqB;AAC9B,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG,CAAC,0BAA0B,CAAC,OAAO;iBAC7C,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEY,kBAAkB,CAC7B,MAAwB,EACxB,QAAkB,EAAA;;;YAElB,IAAI;gBACF,MAAM,EAAE,UAAU,EAAE,QAAQ,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC;gBAEhD,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAC7B,cAAc,CAAC,QAAQ,CAAC,CAAC;AAEzB,gBAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;gBAC/B,IAAI,CAAC,QAAQ,EAAE;oBACb,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACvD,iBAAA;AAED,gBAAA,MAAM,EAAE,GAAG,EAAE,qBAAqB,EAAE,OAAO,EAAE,GAAG,MAAM,+BAA+B,CACnF,QAAQ,EACR,MAAM,CACP,CAAC;AACF,gBAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAEvE,gBAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAEE,qBAAqB,CACxB,EAAA,EAAA,OAAO,EAAE,WAAW,EAAA,CAAA,EAEtB,QAAQ,EACR;oBACE,IAAI,EAAE,CAAC,CAAC;AACR,oBAAA,OAAO,EAAE,yBAAyB;AACnC,iBAAA,CACF,CAAC;AAEF,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,sBAAsB,CAAC,OAAO,CAAC,CAAC;gBAElD,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,IAAI,EAAE;wBACJ,SAAS,EAAE,MAAM,CAAC,CAAA,EAAA,GAAA,GAAG,CAAC,kBAAkB,CAAC,aAAa,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAAG,CAAC;wBAC9D,SAAS,EAAE,MAAM,CAAC,CAAA,EAAA,GAAA,GAAG,CAAC,kBAAkB,CAAC,mBAAmB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAAG,CAAC;wBACpE,aAAa,EAAE,MAAM,CAAC,CAAA,EAAA,GAAA,GAAG,CAAC,kBAAkB,CAAC,gBAAgB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAAG,CAAC;wBACrE,gBAAgB,EAAE,MAAM,CAAC,CAAA,EAAA,GAAA,GAAG,CAAC,kBAAkB,CAAC,gBAAgB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAAG,CAAC;wBACxE,gBAAgB,EAAE,MAAM,CAAC,CAAA,EAAA,GAAA,GAAG,CAAC,kBAAkB,CAAC,gBAAgB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAAG,CAAC;wBACxE,wBAAwB,EAAE,MAAM,CAAC,CAAA,EAAA,GAAA,GAAG,CAAC,kBAAkB,CAAC,wBAAwB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAAG,CAAC;AACzF,qBAAA;AACD,oBAAA,OAAO,EAAE,wBAAwB;oBACjC,UAAU,EAAE,MAAM,CAAC,MAAM;iBAC1B,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;;AACF,KAAA;AAEY,IAAA,gBAAgB,CAC3B,MAAoF,EAAA;;AAEpF,YAAA,MAAM,GAAG,GACJ,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAM,KACT,UAAU,EAAE6B,+BAAsB,CAAC,MAAM,CAAC,UAAU,CAAC,EACrD,gBAAgB,EAAEC,mBAAW,CAAC,WAAW,CAAC;oBACxC,KAAK,EAAEjC,wBAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC;AAChD,iBAAA,CAAC,GACH,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,0BAA0B,EAC1B,GAAG,CAAC,QAAQ,EACZ,gCAAgC,EAE3B,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAAkC,wBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,CACjC,EAAA,EAAA,kBAAkB,EAAE;oBAClB,KAAK,EAAE,MAAM,CAAC,gBAAgB;iBAC/B,EAEH,CAAA,EAAAA,wBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACzC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,eAAe,CAAC,UAAkB,EAAE,MAAsC,EAAA;;YACrF,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;AACvD,YAAA,MAAM,GAAG,GACJ,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAM,CACT,EAAA,EAAA,QAAQ,GACT,CAAC;YAEF,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SACpC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,kBAAkB,CAC7B,QAAgB,EAChB,UAAkB,EAClB,aAAqB,EACrB,aAAyC,EAAA;;YAEzC,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;AACvD,YAAA,MAAM,SAAS,GAAc;AAC3B,gBAAA,IAAI,EAAEC,4BAAqB,CAAC,aAAa,CAAC;AAC1C,gBAAA,KAAK,EAAE,aAAa;aACrB,CAAC;AAEF,YAAA,MAAM,GAAG,GAAoB;gBAC3B,QAAQ;gBACR,SAAS;AACT,gBAAA,QAAQ,EAAE,QAAQ;aACnB,CAAC;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,eAAe,CAAC,OAAqC,EAAA;;YAChE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,GAAG,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;SAC3C,CAAA,CAAA;AAAA,KAAA;IAEY,wBAAwB,CAAC,MAAoC,EAAE,QAAkB,EAAA;;YAC5F,cAAc,CAAC,QAAQ,CAAC,CAAC;YACzB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC;YAExD,IAAI;AACF,gBAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;gBAC/B,IAAI,CAAC,QAAQ,EAAE;AACb,oBAAA,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAC9D,iBAAA;AAED,gBAAA,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,GAAG,EAAE,GAC3C,mBAAmB,CAAgC,QAAQ,EAAE,eAAe,EAAE;AAC5E,oBAAA,QAAQ,EAAE,QAAQ;AAClB,oBAAA,WAAW,EAAE,UAAU;AACvB,oBAAA,iBAAiB,EAAE,cAAc;AACjC,oBAAA,uBAAuB,EAAE;AACvB,wBAAA,cAAc,EAAE,GAAG;AACnB,wBAAA,GAAG,EAAE,EAAE;AACP,wBAAA,8BAA8B,EAAE,CAAC;AAClC,qBAAA;AACF,iBAAA,CAAC,CAAC;AAEL,gBAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAEvE,gBAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EAEE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,qBAAqB,KACxB,OAAO,EAAE,WAAW,EAEtB,CAAA,EAAA,KAAK,CACN,CAAC;AAEF,gBAAA,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;AACtE,gBAAA,MAAM,SAAS,GAAG,yBAAyB,CAAC,eAAe,CAAkC,CAAC;gBAE9F,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,sCAAsC;AAC/C,oBAAA,IAAI,EAAE,eAAe;oBACrB,UAAU,EAAE,MAAM,CAAC,MAAM;AACzB,oBAAA,SAAS,EAAE,SAAS;iBACrB,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,MAAM;oBACJ,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEY,aAAa,CAAC,MAAoC,EAAE,QAAkB,EAAA;;YACjF,cAAc,CAAC,QAAQ,CAAC,CAAC;AAEzB,YAAA,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC5E,IAAI,CAAC,SAAS,EAAE;AACd,gBAAA,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;AACtD,aAAA;AAED,YAAA,MAAM,GAAG,GAAqB;gBAC5B,UAAU,EAAE,SAAS,CAAC,WAAW;gBACjC,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,cAAc,EAAE,SAAS,CAAC,iBAAiB;AAC3C,gBAAA,oBAAoB,EAAE;oBACpB,aAAa,EAAEnC,wBAAI,CAAC,UAAU,CAAC,SAAS,CAAC,uBAAuB,CAAC,cAAc,CAAC;AAChF,oBAAA,0BAA0B,EACxB,SAAS,CAAC,uBAAuB,CAAC,8BAA8B;oBAClE,GAAG,EAAEoC,uBAAe,CAAC,SAAS,CAAC,uBAAuB,CAAC,GAAG,CAAC;AAC5D,iBAAA;aACF,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;SACnD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,mBAAmB,CAAC,GAA2B,EAAA;;AAC1D,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,6BAA6B,EAC7B,GAAG,CAAC,QAAQ,EACZ,mCAAmC,EACnCC,2BAAsB,CAAC,KAAK,CAAC,GAAG,CAAC,EACjCA,2BAAsB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC5C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEa,eAAe,CAAC,GAAqB,EAAE,SAAwC,EAAA;;YAC3F,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,uBAAuB,EACvB,GAAG,CAAC,QAAQ,EACZ,6BAA6B,kCAExB,SAAS,CAAA,EAAA,EACZ,IAAI,EAAE,uBAAuB,EAC7B,mBAAmB,EAAE;AACnB,oBAAA,cAAc,EAAE,SAAS,CAAC,uBAAuB,CAAC,cAAc;AAChE,oBAAA,8BAA8B,EAC5B,SAAS,CAAC,uBAAuB,CAAC,8BAA8B;AAClE,oBAAA,GAAG,EAAE,SAAS,CAAC,uBAAuB,CAAC,GAAG;iBAC3C,EAEH,CAAA,EAAAC,qBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACtC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,aAAa,CAAC,MAA4B,EAAA;;AACrD,YAAA,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;YAC9B,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAE7B,YAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,QAAQ,EAAE;gBACb,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACvD,aAAA;YAED,MAAM,EAAE,GAAG,EAAE,GAAG,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;AAC9C,gBAAA,MAAM,EAAE,UAAU;AACnB,aAAA,CAAC,CAAC;AAEH,YAAA,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AAChC,YAAA,MAAM,GAAG,GAAG,MAAM,0BAA0B,CAAC,GAAG,CAAC,CAAC;YAElD,OAAO;AACL,gBAAA,IAAI,EAAE,CAAC;AACP,gBAAA,OAAO,EAAE,0BAA0B;gBACnC,UAAU,EAAE,MAAM,CAAC,MAAM;AACzB,gBAAA,IAAI,EAAE,GAAG;aACV,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,qBAAqB,CAAC,MAAmC,EAAE,QAAkB,EAAA;;YACxF,IAAI;gBACF,cAAc,CAAC,QAAQ,CAAC,CAAC;AAEzB,gBAAA,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;AAC9B,gBAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;gBAC/B,IAAI,CAAC,QAAQ,EAAE;oBACb,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACvD,iBAAA;gBACD,SAAS,CAAC,QAAQ,CAAC,CAAC;AAEpB,gBAAA,MAAM,EAAE,GAAG,EAAE,qBAAqB,EAAE,OAAO,EAAE,GAAG,+BAA+B,CAC7E,QAAQ,EACR,MAAM,CACP,CAAC;AACF,gBAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAEvE,gBAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAEE,qBAAqB,CACxB,EAAA,EAAA,OAAO,EAAE,WAAW,EAAA,CAAA,EAEtB,IAAI,EACJ;oBACE,IAAI,EAAE,CAAC,CAAC;AACR,oBAAA,OAAO,EAAE,yBAAyB;AACnC,iBAAA,CACF,CAAC;AAEF,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,iCAAiC,CAAC,OAAO,CAAC,CAAC;gBAE7D,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,IAAI,EAAE,GAAG;AACT,oBAAA,OAAO,EAAE,SAAS;oBAClB,UAAU,EAAE,MAAM,CAAC,MAAM;iBAC1B,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,MAA+B,EAAA;;YAC3D,IAAI;AACF,gBAAA,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC;gBACvB,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC;AAC1C,gBAAA,MAAM,EAAE,GAAG,EAAE,GAAG,2BAA2B,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;gBAElE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;AACE,oBAAA,OAAO,EAAE,EAAE;AACX,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,IAAI,CACL,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,6BAA6B,CAAC,OAAO,CAAC,CAAC;gBAEzD,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,SAAS;AAClB,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,2BAA2B,CAAC,MAA0C,EAAA;;YACjF,IAAI;gBACF,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC;AAC1C,gBAAA,MAAM,EAAE,GAAG,EAAE,GAAG,8BAA8B,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAEpE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;AAC9C,oBAAA,OAAO,EAAE,EAAE;AACX,oBAAA,MAAM,EAAE,UAAU;AACnB,iBAAA,CAAC,CAAC;AAEH,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,gCAAgC,CAAC,OAAO,CAAC,CAAC;gBACtD,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,qBAAqB;oBAC9B,UAAU,EAAE,MAAM,CAAC,MAAM;AACzB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AA9hBY,MAAM,GAAA,UAAA,CAAA;AADlB,IAAAtE,mBAAU,EAAE;IAGR,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;IAC7B,OAAA,CAAA,CAAA,EAAA7B,eAAM,CAAC6B,cAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;IACvB,OAAA,CAAA,CAAA,EAAA7B,eAAM,CAAC6B,cAAK,CAAC,MAAM,OAAO,CAAC,CAAC,CAAA;IAC5B,OAAA,CAAA,CAAA,EAAA7B,eAAM,CAAC6B,cAAK,CAAC,MAAM,YAAY,CAAC,CAAC,CAAA;qCAHe,QAAQ;QACpB,EAAE;QACQ,OAAO;QACG,YAAY,CAAA,CAAA;AAL5D,CAAA,EAAA,MAAM,CA8hBlB;;ACtsBM,IAAM,SAAS,GAAf,MAAM,SAAS,CAAA;AAEpB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAD7D,QAAA,IAAA,CAAA,WAAW,GAAGd,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KACiB;IAE5D,eAAe,CAAC,OAAe,EAAE,GAAc,EAAA;;AAC1D,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,gBAAgB,EAChB,OAAO,EACP,sBAAsB,EACtBuD,cAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EACpBA,cAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC/B,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,eAAe,CAAC,OAAe,EAAE,GAAc,EAAA;;AAC1D,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,gBAAgB,EAChB,OAAO,EACP,sBAAsB,EACtBC,cAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EACpBA,cAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC/B,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,wBAAwB,GAAA;;YACnC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,EAAE,CAAC;AAC7D,YAAA,OAAO,MAAM,GAAG,CAAC,wBAAwB,EAAE,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;IAEY,0BAA0B,GAAA;;YACrC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,EAAE,CAAC;AAC7D,YAAA,OAAO,MAAM,GAAG,CAAC,0BAA0B,EAAE,CAAC;SAC/C,CAAA,CAAA;AAAA,KAAA;IAEY,MAAM,GAAA;;YACjB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,EAAE,CAAC;AAC7D,YAAA,OAAO,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;SAC3B,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAtCY,SAAS,GAAA,UAAA,CAAA;AADrB,IAAAxE,mBAAU,EAAE;IAGE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAF1D,CAAA,EAAA,SAAS,CAsCrB;;AC3EM,MAAM,qBAAqB,GAAG;AACnC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,eAAe;AACrB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;AC6DM,IAAM,UAAU,GAAhB,MAAM,UAAU,CAAA;AACrB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAC7D,QAAA,IAAA,CAAA,WAAW,GAAmBd,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KADC;AAG5D,IAAA,WAAW,CAAC,GAAmB,EAAA;;AAC1C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,qBAAqB,EACrB,GAAG,CAAC,IAAI,EACR,2BAA2B,EAC3ByD,mBAAc,CAAC,KAAK,CAAC,GAAG,CAAC,EACzBA,mBAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACpC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,MAAM,CAAC,GAAa,EAAA;;AAC/B,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,eAAe,EACf,GAAG,CAAC,WAAW,EACf,qBAAqB,EACrBC,aAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EACnBA,aAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC9B,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,sBAAsB,CAAC,OAAiC,EAAA;;YACnE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC;AAC9D,YAAA,OAAO,MAAM,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,yBAAyB,CAAC,OAAoC,EAAA;;YACzE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC;AAC9D,YAAA,OAAO,MAAM,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;SAC3C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,OAAkC,EAAA;;YAC9D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE,CAAC;AAC1D,YAAA,OAAO,MAAM,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACzC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,oBAAoB,CAAC,OAAsC,EAAA;;YACtE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC;AAC9D,YAAA,OAAO,MAAM,GAAG,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,WAAW,CAAC,GAAmB,EAAA;;AAC1C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,qBAAqB,EACrB,GAAG,CAAC,QAAQ,EACZ,2BAA2B,EAC3BC,mBAAc,CAAC,KAAK,CAAC,GAAG,CAAC,EACzBA,mBAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACpC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,GAAoB,EAAA;;AAC5C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,sBAAsB,EACtB,GAAG,CAAC,QAAQ,EACZ,4BAA4B,EAC5BC,oBAAe,CAAC,KAAK,CAAC,GAAG,CAAC,EAC1BA,oBAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACrC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,GAAoB,EAAA;;AAC5C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,sBAAsB,EACtB,GAAG,CAAC,QAAQ,EACZ,4BAA4B,EAC5BC,oBAAe,CAAC,KAAK,CAAC,GAAG,CAAC,EAC1BA,oBAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACrC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEK,SAAS,GAAA;;YACb,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE,CAAC;AAC1D,YAAA,OAAO,GAAG,CAAC,MAAM,EAAE,CAAC;SACrB,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AA9EY,UAAU,GAAA,UAAA,CAAA;AADtB,IAAA7E,mBAAU,EAAE;IAEE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAD1D,CAAA,EAAA,UAAU,CA8EtB;;ACtKM,MAAM,wCAAwC,GAAG;AACtD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,kBAAkB;AACzB,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,cAAc,EAAE;AACd,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACzBM,MAAM,kCAAkC,GAAG;AAChD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,kBAAkB;AACxB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACfM,MAAM,uCAAuC,GAAG;AACrD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACfM,MAAM,2CAA2C,GAAG;AACzD,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACkCM,IAAM,YAAY,GAAlB,MAAM,YAAY,CAAA;AACvB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;KAAI;AAE5D,IAAA,kBAAkB,CAAC,GAA0B,EAAA;;AACxD,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,4BAA4B,EAC5B,GAAG,CAAC,gBAAgB,EACpB,kCAAkC,EAClCgD,wBAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,EAChCA,wBAAqB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC3C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,2BAA2B,CAAC,OAAe,EAAE,GAAmC,EAAA;;AAC3F,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,qCAAqC,EACrC,OAAO,EACP,2CAA2C,EAC3CC,iCAA8B,CAAC,KAAK,CAAC,GAAG,CAAC,EACzCA,iCAA8B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACpD,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,uBAAuB,CAAC,GAA+B,EAAA;;AAClE,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,iCAAiC,EACjC,GAAG,CAAC,gBAAgB,EACpB,uCAAuC,EACvCC,6BAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,EACrCA,6BAA0B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAChD,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,wBAAwB,CAAC,OAAe,EAAE,GAAyB,EAAA;;AAC9E,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,2BAA2B,EAC3B,OAAO,EACP,wCAAwC,EACxCC,uBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC/BA,uBAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC1C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AA1CY,YAAY,GAAA,UAAA,CAAA;AADxB,IAAAjF,mBAAU,EAAE;IAEE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAD1D,CAAA,EAAA,YAAY,CA0CxB;;ACvFM,MAAM,8BAA8B,GAAG;AAC5C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,SAAS;AAChB,SAAA;AACF,KAAA;AACD,IAAA,OAAO,EAAE;AACP,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,OAAO;AACd,SAAA;AACF,KAAA;CACF;;AC7BM,MAAM,+BAA+B,GAAG;AAC7C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACyBM,IAAM,QAAQ,GAAd,MAAM,QAAQ,CAAA;AACnB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAC7D,QAAA,IAAA,CAAA,WAAW,GAAmBd,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KADC;AAG5D,IAAA,cAAc,CAAC,MAAuB,EAAA;;;AACjD,YAAA,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC;YAEpF,MAAM,cAAc,GAAG,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;YACxE,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;YACpF,MAAM,cAAc,GAAG,oBAAoB,CAAC,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;AACnF,YAAA,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;YAE3E,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,wBAAwB,EACxB,OAAO,EACP,8BAA8B,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAEzBkE,sBAAiB,CAAC,KAAK,CAAC,cAAc,CAAC,CAC1C,EAAA,EAAA,SAAS,EAAE;;AAET,oBAAA,IAAI,EAAE,CAAA,EAAA,GAAA,cAAc,CAAC,SAAS,0CAAE,OAAO;AACvC,oBAAA,KAAK,EAAEC,uBAAe,CAACzG,cAAQ,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;iBAG9E,EAEH,CAAA,EAAAwG,sBAAiB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE,CAClD,CAAC;;AACH,KAAA;AAEY,IAAA,eAAe,CAAC,GAAuB,EAAA;;AAClD,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,yBAAyB,EACzB,GAAG,CAAC,OAAO,EACX,+BAA+B,EAC/BE,uBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC7BA,uBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACxC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,OAA8B,EAAA;;YACtD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;AAC5D,YAAA,OAAO,MAAM,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SACrC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,aAAa,CAAC,OAA+B,EAAA;;YACxD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;AAC5D,YAAA,OAAO,MAAM,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SACtC,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAjDY,QAAQ,GAAA,UAAA,CAAA;AADpB,IAAApF,mBAAU,EAAE;IAEE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAD1D,CAAA,EAAA,QAAQ,CAiDpB;;AC1EM,IAAM,MAAM,GAAZ,MAAM,MAAM,CAAA;AAAZ,IAAA,WAAA,GAAA;AACG,QAAA,IAAA,CAAA,WAAW,GAAmBd,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KAWzE;AATO,IAAA,eAAe,CAAC,OAAiC,EAAA;;YACrD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;AACrD,YAAA,OAAO,MAAM,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;IAEK,SAAS,GAAA;;YACb,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;AACrD,YAAA,OAAO,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;SAC3B,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAZY,MAAM,GAAA,UAAA,CAAA;AADlB,IAAAhB,mBAAU,EAAE;AACA,CAAA,EAAA,MAAM,CAYlB;;AC6EM,IAAM,KAAK,GAAX,MAAM,KAAK,CAAA;IAChB,WACyC,CAAA,QAAkB,EACnB,OAAgB,EAAA;QADf,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QACnB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;AAGhD,QAAA,IAAA,CAAA,WAAW,GAAmBgB,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KAFpE;AAIS,IAAA,WAAW,CAAC,GAAmB,EAAA;;AAC1C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,qBAAqB,EACrB,GAAG,CAAC,OAAO,EACX,2BAA2B,EAC3BqE,mBAAc,CAAC,KAAK,CAAC,GAAG,CAAC,EACzBA,mBAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACpC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,WAAW,CAAC,GAAmB,EAAA;;AAC1C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,qBAAqB,EACrB,GAAG,CAAC,QAAQ,EACZ,2BAA2B,EAC3BC,mBAAc,CAAC,KAAK,CAAC,GAAG,CAAC,EACzBA,mBAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACpC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,iBAAiB,CAAC,GAAyB,EAAA;;AACtD,YAAA,IAAI,GAAG,CAAC,SAAS,KAAK,EAAE,EAAE;AACxB,gBAAA,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;AACxC,aAAA;AAED,YAAA,IAAI,GAAG,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;AACrE,gBAAA,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACrC,aAAA;AAED,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,2BAA2B,EAC3B,GAAG,CAAC,QAAQ,EACZ,oCAAoC,CAAC;gBACnC,YAAY,EAAE,GAAG,CAAC,YAAY;gBAC9B,eAAe,EAAE,GAAG,CAAC,eAAe;AACrC,aAAA,CAAC,kCAEGC,yBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,CAClC,EAAA,EAAA,cAAc,EAAE,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,KAAI;oBACzC,OAAO;wBACL,MAAM,EAAE,CAAC,CAAC,MAAM;wBAChB,eAAe,EAAE,CAAC,CAAC,cAAc,IAAI1C,qBAAa,CAAC,CAAC,CAAC,cAAc,CAAC;qBACrE,CAAC;AACJ,iBAAC,CAAC,EAAA,CAAA,EAEJ0C,yBAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC1C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,GAAwB,EAAA;;AACpD,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,0BAA0B,EAC1B,GAAG,CAAC,QAAQ,EACZ,gCAAgC,EAChCC,wBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC9BA,wBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACzC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,UAAU,CAAC,OAAe,EAAE,GAAkB,EAAA;;AACzD,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,oBAAoB,EACpB,OAAO,EACP,0BAA0B,EAC1BC,kBAAa,CAAC,KAAK,CAAC,GAAG,CAAC,EACxBA,kBAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACnC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,SAAS,CAAC,SAAiB,EAAE,UAAkB,EAAA;;YAC1D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,SAAS,CAAC;gBACzB,SAAS;gBACT,UAAU;AACX,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,eAAe,CAAC,SAAiB,EAAE,UAAkB,EAAE,MAAc,EAAA;;YAChF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,eAAe,CAAC;gBAC/B,SAAS;gBACT,UAAU;gBACV,MAAM;AACP,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,OAAwB,EAAA;;YAChD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,SAAS,CAAC,OAA+B,EAAA;;YACpD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SACtC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,OAAmC,EAAA;;YAC/D,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;SACtD,CAAA,CAAA;AAAA,KAAA;IAEY,sBAAsB,CAAC,UAAkB,EAAE,OAAe,EAAA;;YACrE,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;AACvD,YAAA,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;gBAC1C,QAAQ;AACR,gBAAA,gBAAgB,EAAE,OAAO,CAAC,QAAQ,EAAE;AACrC,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,sBAAsB,CAAC,UAAkB,EAAE,UAAkB,EAAE,OAAe,EAAA;;YACzF,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AAEnE,YAAA,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;gBAC1C,QAAQ;AACR,gBAAA,gBAAgB,EAAE,OAAO,CAAC,QAAQ,EAAE;AACrC,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,cAAc,CACzB,KAAa,EACb,SAAiB,EACjB,MAAyD,EAAA;;YAEzD,MAAM,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;AAC5D,YAAA,MAAM,GAAG,GACJ,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAM,CACT,EAAA,EAAA,QAAQ,GACT,CAAC;YACF,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SACpC,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAzIY,KAAK,GAAA,UAAA,CAAA;AADjB,IAAAzF,mBAAU,EAAE;IAGR,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;IAC7B,OAAA,CAAA,CAAA,EAAA7B,eAAM,CAAC6B,cAAK,CAAC,MAAM,OAAO,CAAC,CAAC,CAAA;qCADoB,QAAQ;QACV,OAAO,CAAA,CAAA;AAH7C,CAAA,EAAA,KAAK,CAyIjB;;AC3OD;AACO,MAAM,6BAA6B,GAAG,CAC3C,QAAgB,EAChB,MAQC,KACC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACF,IAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,MAAM,CAAC;IAC9F,MAAM,IAAI,GAAG,CAAI,CAAA,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;AAC1C,IAAA,IAAI,QAAQ,GAA2B;AACrC,QAAA,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;AACtB,QAAA,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC;KAC3B,CAAC;AAEF,IAAA,IAAI,aAAa,EAAE;AACjB,QAAA,QAAQ,mCACH,QAAQ,CAAA,EAAA,EACX,QAAQ,EAAE,EAAE,EACZ,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAC/B,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,EAC/C,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,IAAI,KAAK,CAAC,GACnD,CAAC;AACH,KAAA;AAED,IAAA,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAExC,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;;AAElC,QAAA,MAAM,EAAE,WAAW;AACnB,QAAA,GAAG,EAAE;YACH,QAAQ,EAAE,GAAG,CAAC,QAAQ;AACtB,YAAA,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,IAAI;AACL,SAAA;QACD,WAAW;KACZ,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,WAAW;QACnB,IAAI;KACL,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC,CAAA;;ACrDM,MAAM,gCAAgC,GAAG,CAC9C,QAAgB,EAChB,MAMC,KACC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;IACF,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,MAAM,CAAC;IACzD,MAAM,IAAI,GAAG,CAAI,CAAA,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;IAC1C,IAAI,QAAQ,GAAG,EAAE,CAAC;AAElB,IAAA,IAAI,aAAa,EAAE;AACjB,QAAA,QAAQ,GAAG;AACT,YAAA,eAAe,EAAE,EAAE;AACnB,YAAA,YAAY,EAAE,GAAG;AACjB,YAAA,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE;SAChD,CAAC;AACH,KAAA;AAED,IAAA,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAExC,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,MAAM,EAAE,WAAW;AACnB,QAAA,GAAG,EAAE;YACH,QAAQ,EAAE,GAAG,CAAC,QAAQ;AACtB,YAAA,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,IAAI;AACL,SAAA;AACD,QAAA,WAAW,EAAE,EAAE;KAChB,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,WAAW;KACpB,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC,CAAA,CAAC;AAEK,MAAM,kCAAkC,GAAG,CAAC,IAAY,KAAI;AACjE,IAAA,MAAM,SAAS,GAAG,IAAIY,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAiC,CAAC;AAClE,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;;ACvDD;AACO,MAAM,iBAAiB,GAAG,CAC/B,QAAgB,EAChB,MAA4B,KACD;AAC3B,IAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IAE1C,MAAM,IAAI,GAAG,CAAG,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;AACzC,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,aAAa,EAAE,EAAE;KAClB,CAAC;AAEF,IAAA,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAExC,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;KACd,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,0BAA0B,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC/D,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA0B,CAAC;IAE3D,MAAM,SAAS,GAAG,GAAG,CAAC,yBAAyB,CAAC,MAAM,IAAI,EAAE,CAAC;AAC7D,IAAA,IAAI,SAAS,EAAE;;QAEb,SAAS,CAAC,OAAO,GAAG,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACxD,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAChD,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAEhD,SAAS,CAAC,UAAU,GAAG,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AAC/D,KAAA;IAED,GAAG,CAAC,yBAAyB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACxB,GAAG,CAAC,yBAAyB,CAAA,EAAA,EAChC,MAAM,EAAE,SAAS,EAAA,CAClB,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;AC3CD;AACO,MAAM,mBAAmB,GAAG,CACjC,QAAgB,EAChB,MAGC,KACC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACF,IAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IAC1C,MAAM,IAAI,GAAG,CAAI,CAAA,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;AAC1C,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,gBAAgB,EAAE,EAAE;KACrB,CAAC;AAEF,IAAA,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAExC,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,MAAM,EAAE,UAAU;AAClB,QAAA,GAAG,EAAE;AACH,YAAA,QAAQ,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ;AAC/B,YAAA,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,IAAI;AACL,SAAA;AACD,QAAA,WAAW,EAAE,0BAA0B;KACxC,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,UAAU;KACnB,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC,CAAA,CAAC;AAEK,MAAM,yBAAyB,GAAG,CAAC,IAAY,KAAI;AACxD,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAyB,CAAC;AAE1D,IAAA,GAAG,CAAC,iBAAiB,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;AAEpE,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;;AChDD;AACO,MAAM,mBAAmB,GAAG,CACjC,QAAgB,EAChB,MAGC,KACC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACF,IAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IAC1C,MAAM,IAAI,GAAG,CAAI,CAAA,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;AAC1C,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,iBAAiB,EAAE,EAAE;KACtB,CAAC;AAEF,IAAA,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAExC,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,MAAM,EAAE,UAAU;AAClB,QAAA,GAAG,EAAE;AACH,YAAA,QAAQ,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ;AAC/B,YAAA,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,IAAI;AACL,SAAA;;KAEF,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,UAAU;KACnB,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC,CAAA,CAAC;AAEK,MAAM,yBAAyB,GAAG,CAAC,IAAY,KAAI;AACxD,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA2B,CAAC;AAE5D,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;;AC5CM,MAAM,6BAA6B,GAAG,CAC3C,QAAgB,EAChB,MAAoC,KAClC;AACF,IAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,GAAG,IAAI,EAAE,UAAU,GAAG,EAAE,EAAE,GAAG,MAAM,CAAC;IACrF,MAAM,IAAI,GAAG,CAAI,CAAA,EAAA,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;AAC1C,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,iBAAiB,EAAE,MAAM;AACzB,QAAA,aAAa,EAAE,UAAU;AACzB,QAAA,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;AACpB,QAAA,aAAa,EAAE,MAAM,CAACa,yBAAkB,CAAC,UAAU,CAAC,CAAC;KACtD,CAAC;AAEF,IAAA,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAExC,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;KACd,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,kCAAkC,GAAG,CAAC,IAAY,KAAI;AACjE,IAAA,MAAM,SAAS,GAAG,IAAIb,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAkC,CAAC;IAEnE,IAAI,QAAQ,GAAG,GAAG,CAAC,8BAA8B,CAAC,QAAQ,IAAI,EAAE,CAAC;AAEjE,IAAA,IAAI,QAAQ,EAAE;AACZ,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AAC5B,YAAA,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC;AACvB,SAAA;QAED,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;YAC/B,OACK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,KACP,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EACxC,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EACvC,eAAe,EAAE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAC7C,eAAe,EAAE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAC7C,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAC3C,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,GAAG,CAAC,8BAA8B,GAAG;QACnC,QAAQ;KACT,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;;ACzDD;AACO,MAAM,oCAAoC,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACzE,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAoC,CAAC;IAErE,IAAI,OAAO,GAAG,GAAG,CAAC,mCAAmC,CAAC,OAAO,IAAI,EAAE,CAAC;AACpE,IAAA,IAAI,OAAO,EAAE;AACX,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;AAC3B,YAAA,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;AACrB,SAAA;QAED,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AAC7B,YAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IAAI,CAAA,EAAA;;AAEP,gBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EACvC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,UAAU,EAAE,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAC7C,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,IAAI,cAAc,GAAG,GAAG,CAAC,mCAAmC,CAAC,cAAc,IAAI,EAAE,CAAC;AAClF,IAAA,IAAI,cAAc,EAAE;AAClB,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;AAClC,YAAA,cAAc,GAAG,CAAC,cAAc,CAAC,CAAC;AACnC,SAAA;AACF,KAAA;AAED,IAAA,GAAG,CAAC,mCAAmC,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAClC,GAAG,CAAC,mCAAmC,KAC1C,OAAO;QACP,cAAc;;QAEd,WAAW,EAAE,gBAAgB,CAAC,GAAG,CAAC,mCAAmC,CAAC,WAAW,CAAC,EAAA,CACnF,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;ACxCD;AACO,MAAM,2BAA2B,GAAG,CAAC,QAAgB,EAAE,MAA+B,KAAI;IAC/F,MAAM,IAAI,GAAG,EAAE,CAAC;AAChB,IAAA,MAAM,QAAQ,GAAG;QACf,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;AACzB,QAAA,eAAe,EAAE,MAAM;KACxB,CAAC;IAEF,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAClC,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAExC,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;KACd,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,6BAA6B,GAAG,CAAO,IAAY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClE,IAAA,MAAM,SAAS,GAAG,IAAIA,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAA6B,CAAC;AAE9D,IAAA,IAAI,WAAW,GAAG,GAAG,CAAC,4BAA4B,CAAC,WAAW,CAAC;AAE/D,IAAA,IAAI,WAAW,EAAE;AACf,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AAC/B,YAAA,WAAW,GAAG,CAAC,WAAW,CAAC,CAAC;AAC7B,SAAA;QAED,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AACrC,YAAA,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,YAAA,IAAI,KAAK,EAAE;AACT,gBAAA,KAAK,GACA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,KAAK,KACb,UAAU,EAAE,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;;AAEnD,oBAAA,OAAO,EAAE,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAC7C,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EACrC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GACtC,CAAC;AACH,aAAA;AAED,YAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IAAI,CAAA,EAAA,EACP,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EACnB,KAAK,EACL,CAAA,CAAA;AACJ,SAAC,CAAC,CAAC;AACJ,KAAA;IAED,GAAG,CAAC,4BAA4B,GAC3B,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAG,CAAC,4BAA4B,CAAA,EAAA,EACnC,WAAW,EAAA,CACZ,CAAC;AAEF,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;;ACoJM,IAAM,OAAO,GAAb,MAAM,OAAO,CAAA;AAClB,IAAA,WAAA,CACyC,QAAkB,EACnB,OAAgB,EACrB,EAAM,EAAA;QAFA,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QACnB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QACrB,IAAE,CAAA,EAAA,GAAF,EAAE,CAAI;AAGjC,QAAA,IAAA,CAAA,WAAW,GAAmB1B,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAChE,QAAA,IAAA,CAAA,QAAQ,GAAGA,kBAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAH3C;AAKS,IAAA,YAAY,CAAC,GAAoB,EAAA;;AAC5C,YAAA,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACjC,YAAA,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACjC,YAAA,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAChC,YAAA,mBAAmB,CAAC,GAAG,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;AAE1D,YAAA,MAAM,YAAY,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,GAAG,CAAA,EAAA,EACN,iBAAiB,EAAE;AACjB,oBAAA,0BAA0B,EAAE,CAAC;AAC7B,oBAAA,aAAa,EAAEgB,wBAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAC9B,oBAAA,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;AACzB,iBAAA,EAAA,CACF,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,sBAAsB,EACtB,GAAG,CAAC,OAAO,EACX,4BAA4B,EAEvB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA0D,oBAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CACtC,EAAA,EAAA,mBAAmB,EAAE;AACnB,oBAAA,cAAc,EAAE,GAAG;AACnB,oBAAA,8BAA8B,EAAE,CAAC;AAClC,iBAAA,EACD,gBAAgB,EAAE,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,KAAKP,uBAAe,CAAC,CAAC,CAAC,CAAC,EAC7E,YAAY,EAAE,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,EAEnD,CAAA,EAAAO,oBAAe,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAC9C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,oBAAoB,CAAC,MAAiC,EAAE,QAAkB,EAAA;;;AACrF,YAAA,MAAM,EACJ,UAAU,EACV,UAAU,EACV,IAAI,EACJ,aAAa,EACb,OAAO,GAAG,KAAK,EACf,aAAa,EACb,UAAU,GACX,GAAG,MAAM,CAAC;YAEX,cAAc,CAAC,QAAQ,CAAC,CAAC;YACzB,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC7B,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAE7B,YAAA,MAAM,gBAAgB,GAAG,CAAA,EAAA,GAAA,aAAa,KAAb,IAAA,IAAA,aAAa,KAAb,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAE,gBAAgB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,IAAI,CAAC;AACjE,YAAA,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,aAAa,KAAb,IAAA,IAAA,aAAa,KAAb,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAE,QAAQ,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,iBAAiB,CAAC;AAE9D,YAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,QAAQ,EAAE;gBACb,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACvD,aAAA;AAED,YAAA,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YAC9D,MAAM,cAAc,GAAG,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;AAE/E,YAAA,IAAI,QAAQ,GAAG,cAAc,KAAK,CAAC,EAAE;AACnC,gBAAA,MAAM,IAAI,KAAK,CACb,8DAA8D,GAAG,cAAc,CAChF,CAAC;AACH,aAAA;AAED,YAAA,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,IAAI,gBAAgB,EAAE;gBAC7C,OAAO,IAAI,CAAC,SAAS,CAAC;oBACpB,QAAQ;oBACR,UAAU;oBACV,UAAU;oBACV,IAAI;oBACJ,QAAQ;oBACR,aAAa;AACb,oBAAA,QAAQ,EAAE,OAAO;AACjB,oBAAA,OAAO,EAAE,EAAE;oBACX,UAAU;AACX,iBAAA,CAAC,CAAC;AACJ,aAAA;YAED,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAClC,QAAQ,EACR,UAAU,EACV,UAAU,EACV,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,aAAa,CACd,CAAC;;AACH,KAAA;IAEY,YAAY,CACvB,MAAwB,EACxB,QAAkB,EAAA;;;AAElB,YAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,GAAG,KAAK,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;YAC7F,cAAc,CAAC,QAAQ,CAAC,CAAC;YACzB,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC7B,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAE7B,YAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,QAAQ,EAAE;gBACb,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACvD,aAAA;AAED,YAAA,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC7B,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC;oBACxC,UAAU;oBACV,UAAU;oBACV,QAAQ;AACT,iBAAA,CAAC,CAAC;gBACH,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,YAAY,CAAC;AAC9D,aAAA;AAED,YAAA,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YAE9D,MAAM,cAAc,GAAG,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;AAE/E,YAAA,MAAM,gBAAgB,GAAG,CAAA,EAAA,GAAA,aAAa,KAAb,IAAA,IAAA,aAAa,KAAb,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAE,gBAAgB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,IAAI,CAAC;AACjE,YAAA,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,aAAa,KAAb,IAAA,IAAA,aAAa,KAAb,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAE,QAAQ,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,iBAAiB,CAAC;AAE9D,YAAA,IAAI,QAAQ,GAAG,cAAc,KAAK,CAAC,EAAE;AACnC,gBAAA,MAAM,IAAI,KAAK,CACb,8DAA8D,GAAG,cAAc,CAChF,CAAC;AACH,aAAA;AAED,YAAA,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,IAAI,gBAAgB,EAAE;gBAC7C,OAAO,IAAI,CAAC,SAAS,CAAC;oBACpB,QAAQ;oBACR,UAAU;oBACV,UAAU;oBACV,IAAI;oBACJ,OAAO;oBACP,QAAQ;oBACR,QAAQ;oBACR,UAAU;AACX,iBAAA,CAAC,CAAC;AACJ,aAAA;AAED,YAAA,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAClC,QAAQ,EACR,UAAU,EACV,UAAU,EACV,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,QAAQ,CACT,CAAC;;AACH,KAAA;AAEa,IAAA,SAAS,CAAC,MAUvB,EAAA;;YACC,MAAM,EACJ,QAAQ,EACR,IAAI,EACJ,UAAU,EACV,aAAa,EACb,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,OAAO,EACP,UAAU,GACX,GAAG,MAAM,CAAC;AAEX,YAAA,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,oBAAoB,CAAC,QAAQ,EAAE;gBACzF,UAAU;gBACV,UAAU;gBACV,WAAW,EAAE,IAAI,CAAC,IAAI;gBACtB,OAAO;gBACP,IAAI;gBACJ,aAAa;AACd,aAAA,CAAC,CAAC;AACH,YAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAEvE,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CACvC,GAAG,kCAEE,qBAAqB,CAAA,EAAA,EACxB,OAAO,EAAE,WAAW,KAEtB,QAAQ,EACR,IAAI,EACJ;oBACE,UAAU;AACX,iBAAA,CACF,CAAC;AAEF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAE1B,gBAAA,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;AACxE,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;AACL,oBAAA,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC;oBACtB,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEO,aAAa,CAAC,UAAkB,EAAE,kBAA0B,EAAA;QAClE,MAAM,WAAW,GAAG,kBAAkB,CAAC;;QAEvC,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,CAAC;;QAE5D,MAAM,QAAQ,GAAG,WAAW,CAAC;;QAE7B,MAAM,YAAY,GAAG,UAAU,GAAG,CAAC,eAAe,GAAG,CAAC,IAAI,QAAQ,CAAC;QACnE,OAAO;YACL,eAAe;YACf,QAAQ;YACR,YAAY;SACb,CAAC;KACH;AAEa,IAAA,kBAAkB,CAC9B,QAAgB,EAChB,UAAkB,EAClB,UAAkB,EAClB,IAAgB,EAChB,QAAgB,EAChB,QAAkB,EAClB,OAAe,EACf,aAA6B,EAAA;;YAE7B,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,aAAa,EAAE;AAClB,gBAAA,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACpF,IAAI,CAAC,aAAa,EAAE;AAClB,oBAAA,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;AAC1C,iBAAA;AAED,gBAAA,MAAM,GAAG,MAAM,IAAI,CAAC,8BAA8B,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;AACtF,aAAA;AAED,YAAA,MAAM,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;;AAGpE,YAAA,MAAM,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACxD,MAAM,MAAM,GAAG,EAAE,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;AACxC,gBAAA,MAAM,KAAK,GAAG,CAAC,GAAG,QAAQ,CAAC;AAC3B,gBAAA,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACrC,gBAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpB,aAAA;AAED,YAAA,IAAI,eAAe,GAAG,MAAM,GAAG,QAAQ,CAAC;YACxC,OAAO,eAAe,GAAG,eAAe,EAAE;AACxC,gBAAA,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAE1D,gBAAA,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,GAAG,EAAE,GAAG,MAAM,6BAA6B,CACjF,QAAQ,EACR;oBACE,UAAU;oBACV,UAAU;oBACV,WAAW,EAAE,IAAI,CAAC,IAAI;AACtB,oBAAA,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,eAAe,GAAG,QAAQ;AAClC,oBAAA,QAAQ,EAAE,eAAe,KAAK,eAAe,GAAG,CAAC;oBACjD,aAAa;AACd,iBAAA,CACF,CAAC;AAEF,gBAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAEvE,IAAI;AACF,oBAAA,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACzB,GAAG,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAEE,qBAAqB,CAAA,EAAA,EACxB,OAAO,EAAE,WAAW,EAEtB,CAAA,EAAA,OAAO,CACR,CAAC;AACH,iBAAA;AAAC,gBAAA,OAAO,KAAU,EAAE;oBACnB,OAAO;wBACL,IAAI,EAAE,CAAC,CAAC;wBACR,OAAO,EAAE,KAAK,CAAC,OAAO;wBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;qBACnD,CAAC;AACH,iBAAA;AAAS,wBAAA;AACR,oBAAA,eAAe,EAAE,CAAC;AACnB,iBAAA;AACF,aAAA;AAED,YAAA,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;SAC/E,CAAA,CAAA;AAAA,KAAA;AAEa,IAAA,gBAAgB,CAAC,UAAkB,EAAE,UAAkB,EAAE,QAAkB,EAAA;;AACvF,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;YAEpF,IAAI,IAAI,KAAK,CAAC,EAAE;AACd,gBAAA,OAAO,IAAI,CAAC;AACb,aAAA;AAED,YAAA,OAAO,KAAK,CAAC;SACd,CAAA,CAAA;AAAA,KAAA;AAEa,IAAA,8BAA8B,CAC1C,UAAkB,EAClB,UAAkB,EAClB,QAAkB,EAAA;;AAElB,YAAA,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YACrE,IAAI,CAAC,UAAU,EAAE;AACf,gBAAA,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACrC,aAAA;AAED,YAAA,IAAI,UAAU,CAAC,YAAY,IAAIC,qBAAY,CAAC,qBAAqB,EAAE;AACjE,gBAAA,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;AAE1F,gBAAA,IAAI,IAAI,EAAE;AACR,oBAAA,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;AACtC,iBAAA;AACF,aAAA;AAED,YAAA,OAAO,CAAC,CAAC;SACV,CAAA,CAAA;AAAA,KAAA;AAEa,IAAA,qBAAqB,CACjC,UAAkB,EAClB,UAAkB,EAClB,QAAkB,EAAA;;YAElB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAE5D,YAAA,MAAM,EAAE,GAAG,EAAE,qBAAqB,EAAE,OAAO,EAAE,GAAG,MAAM,mBAAmB,CAAC,QAAQ,EAAE;gBAClF,UAAU;gBACV,UAAU;AACX,aAAA,CAAC,CAAC;AAEH,YAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAEvE,IAAI;AACF,gBAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EAEE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,qBAAqB,KACxB,OAAO,EAAE,WAAW,EAEtB,CAAA,EAAA,IAAI,CACL,CAAC;;AAEF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAE1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,OAAO;AACL,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;AAClB,wBAAA,IAAI,EAAE;AACJ,4BAAA,iBAAiB,EAAE;AACjB,gCAAA,MAAM,EAAE,CAAC;AACV,6BAAA;AACF,yBAAA;qBACF,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC;AAE/C,gBAAA,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AACzF,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;;AAEnB,gBAAA,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AAE9B,gBAAA,IAAI,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,EAAE;oBAC3C,OAAO;wBACL,IAAI,EAAE,CAAC,CAAC;AACR,wBAAA,OAAO,EAAE,OAAO;wBAChB,UAAU,EAAE,KAAK,CAAC,IAAI;AACtB,wBAAA,IAAI,EAAE;AACJ,4BAAA,iBAAiB,EAAE;AACjB,gCAAA,MAAM,EAAE,CAAC;AACV,6BAAA;AACF,yBAAA;qBACF,CAAC;AACH,iBAAA;gBACD,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEa,IAAA,qBAAqB,CACjC,UAAkB,EAClB,UAAkB,EAClB,QAAkB,EAAA;;YAElB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAE5D,YAAA,MAAM,EAAE,GAAG,EAAE,qBAAqB,EAAE,OAAO,EAAE,GAAG,MAAM,mBAAmB,CAAC,QAAQ,EAAE;gBAClF,UAAU;gBACV,UAAU;AACX,aAAA,CAAC,CAAC;AAEH,YAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAEvE,IAAI;AACF,gBAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EAEE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,qBAAqB,KACxB,OAAO,EAAE,WAAW,EAEtB,CAAA,EAAA,IAAI,CACL,CAAC;;AAEF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAE1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC;AAE/C,gBAAA,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AACvE,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,kBAAkB,CAAC,GAA0B,EAAA;;AACxD,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,4BAA4B,EAC5B,GAAG,CAAC,QAAQ,EACZ,kCAAkC,EAClCC,0BAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,EAChCA,0BAAqB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC3C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CAAC,GAAoB,EAAA;;AAC5C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,sBAAsB,EACtB,GAAG,CAAC,QAAQ,EACZ,4BAA4B,EAC5BC,oBAAe,CAAC,KAAK,CAAC,GAAG,CAAC,EAC1BA,oBAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACrC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,GAAwB,EAAA;;AACpD,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,0BAA0B,EAC1B,GAAG,CAAC,QAAQ,EACZ,gCAAgC,EAChCC,wBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC9BA,wBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACzC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,UAAU,CAAC,UAAkB,EAAE,UAAkB,EAAA;;YAC5D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;YAE3D,OAAO,GAAG,CAAC,UAAU,CAAC;gBACpB,UAAU;gBACV,UAAU;AACX,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,cAAc,CAAC,QAAgB,EAAA;;YAC1C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;YAE3D,OAAO,GAAG,CAAC,cAAc,CAAC;gBACxB,QAAQ;AACT,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,aAAa,CAAC,OAAwB,EAAA;;YACjD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACzC,CAAA,CAAA;AAAA,KAAA;IAEY,SAAS,CAAC,MAAwB,EAAE,QAAkB,EAAA;;YACjE,IAAI;gBACF,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACzB,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC;gBAC5D,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAC7B,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAE7B,gBAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;gBAC/B,IAAI,CAAC,QAAQ,EAAE;oBACb,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACvD,iBAAA;AAED,gBAAA,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,GAAG,EAAE,GAAG,MAAM,oBAAoB,CAAC,QAAQ,EAAE;oBACnF,UAAU;oBACV,UAAU;AACX,iBAAA,CAAC,CAAC;AAEH,gBAAA,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAEnE,gBAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,kCAEE,qBAAqB,CAAA,EAAA,EACxB,OAAO,EAET,CAAA,EAAA,QAAQ,CACT,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBAErD,OAAO;AACL,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,mBAAmB;AACvC,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBACrC,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,IAAI,EAAE,QAAQ;AACd,oBAAA,OAAO,EAAE,qBAAqB;AAC9B,oBAAA,UAAU,EAAE,MAAM;iBACnB,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEY,mBAAmB,CAAC,MAAuB,EAAE,QAAkB,EAAA;;YAC1E,cAAc,CAAC,QAAQ,CAAC,CAAC;AACzB,YAAA,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;AAC7B,gBAAA,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;AAC9D,aAAA;YACD,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;YACpD,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC7B,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAC7B,YAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,QAAQ,EAAE;gBACb,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACvD,aAAA;YAED,MAAM,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,GAAG,GAAG,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC;YAEjE,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,YAAA,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;AAC7B,gBAAA,MAAM,GAAGrH,aAAO,CAACyD,eAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,aAAA;AAED,YAAA,MAAM,QAAQ,GAAG,YAAY,CACxB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,QAAQ,KACX,CAAC,mBAAmB,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IACtC,CAAC;AAEH,YAAA,MAAM,gBAAgB,GAAG;gBACvB,UAAU;AACV,gBAAA,CAAA,CAAA,EAAI,UAAU,CAAC,UAAU,CAAC,CAAE,CAAA;gBAC5B,QAAQ;AACR,gBAAA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI;gBACjB,IAAI;AACL,aAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,MAAM,IAAI,GAAG,gBAAgB,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;YAE1D,OAAO,CAAA,EAAG,GAAG,CAAA,eAAA,EAAkB,kBAAkB,CAAC,IAAI,CAAC,CAAA,CAAA,EAAI,QAAQ,CAAA,CAAE,CAAC;SACvE,CAAA,CAAA;AAAA,KAAA;IAEY,YAAY,CAAC,WAA6B,EAAE,QAAkB,EAAA;;YACzE,IAAI;AACF,gBAAA,MAAM,EAAE,UAAU,EAAE,GAAG,WAAW,CAAC;gBACnC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AAEpE,gBAAA,IAAI,eAAe,CAAC,IAAI,KAAK,CAAC,EAAE;AAC9B,oBAAA,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAC1C,iBAAA;gBAED,MAAM,IAAI,GAAG,eAAe,KAAA,IAAA,IAAf,eAAe,KAAf,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,eAAe,CAAE,IAAI,CAAC;AACnC,gBAAA,IAAI,IAAI,EAAE;;oBAER,MAAM,OAAO,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;;oBAE1C,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAC7C,oBAAA,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC;;AAExB,oBAAA,QAAQ,CAAC,QAAQ,GAAG,UAAoB,CAAC;;oBAEzC,QAAQ,CAAC,KAAK,EAAE,CAAC;AAClB,iBAAA;gBACD,OAAO;AACR,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;AACnB,gBAAA,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AACxB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,WAAW,CAAC,WAA2C,EAAA;;YAClE,IAAI;AACF,gBAAA,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,GAAG,KAAK,EAAE,KAAK,GAAG,IAAI,eAAe,EAAE,EAAE,GAAG,WAAW,CAAC;gBAE9F,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAC7B,SAAS,CAAC,QAAQ,CAAC,CAAC;AAEpB,gBAAA,MAAM,GAAG,GAAG,CAAA,EAAG,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,KAAK,KAAA,IAAA,IAAL,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,QAAQ,EAAE,EAAE,CAAC;AACpF,gBAAA,MAAM,OAAO,GAAG,IAAIC,aAAO,EAAE,CAAC;gBAE9B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;oBACE,OAAO;AACP,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,QAAQ,CACT,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,OAAO;AACL,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,oBAAoB;AACxC,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,oCAAoC,CAAC,OAAO,CAAC,CAAC;gBAEhE,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,sBAAsB;AAC/B,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,YAAY,CACvB,GAA6E,EAAA;;YAE7E,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AACjC,gBAAA,MAAM,IAAI,KAAK,CACb,mFAAmF,CACpF,CAAC;AACH,aAAA;AAED;;;;;;;AAOG;AAEH,YAAA,MAAM,MAAM,GACP,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAG,KACN,WAAW,EAAEH,wBAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAC5B,WAAW,EAAE,YAAY,EACzB,eAAe,EAAE;oBACf,8CAA8C;oBAC9C,8CAA8C;oBAC9C,8CAA8C;oBAC9C,8CAA8C;oBAC9C,8CAA8C;oBAC9C,8CAA8C;oBAC9C,8CAA8C;AAC/C,iBAAA,CAAC,GAAG,CAAC,CAAC,CAAC,KAAKoC,uBAAe,CAAC,CAAC,CAAC,CAAC,GACjC,CAAC;AAEF,YAAA,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SAClC,CAAA,CAAA;AAAA,KAAA;IAEY,oBAAoB,CAAC,MAAoC,EAAE,QAAkB,EAAA;;AACxF,YAAA,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,OAAO,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC;AAE1E,YAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,QAAQ,EAAE;gBACb,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACvD,aAAA;AACD,YAAA,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,GAAG,EAAE,GAAG,MAAM,gCAAgC,CACpF,QAAQ,EACR;AACE,gBAAA,UAAU,EAAE,UAAU;AACtB,gBAAA,UAAU,EAAE,UAAU;;gBAEtB,aAAa;AACd,aAAA,CACF,CAAC;AACF,YAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAEvE,IAAI;AACF,gBAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAC1C,GAAG,EAEE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,qBAAqB,KACxB,OAAO,EAAE,WAAW,EAEtB,CAAA,EAAA,OAAO,CACR,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;;AAG1B,gBAAA,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;AAC5B,gBAAA,MAAM,GAAG,GAAG,kCAAkC,CAAC,OAAO,CAAC,CAAC;AAExD,gBAAA,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AACtF,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;AACL,oBAAA,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC;oBACtB,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEY,eAAe,CAC1B,UAAkB,EAClB,UAAkB;;IAElB,MAAsC,EAAA;;YAEtC,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AACnE,YAAA,MAAM,GAAG,GACJ,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAM,CACT,EAAA,EAAA,QAAQ,GAET,CAAC;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SAC1C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,yBAAyB,CACpC,UAAkB,EAClB,UAAkB,EAClB,UAAsB,EACtB,QAAgB,EAAA;;YAEhB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,gBAAgB,CAAC;gBAChC,UAAU;gBACV,UAAU;gBACV,UAAU;gBACV,QAAQ;AACT,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,eAAe,CAAC,UAAkB,EAAE,UAAkB,EAAE,aAAqB,EAAA;;YACxF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;YAE3D,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AAEnE,YAAA,OAAO,MAAM,GAAG,CAAC,qBAAqB,CAAC;gBACrC,QAAQ;AACR,gBAAA,gBAAgB,EAAE,aAAa;AAChC,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;IAEY,kBAAkB,CAC7B,QAAgB,EAChB,UAAkB,EAClB,UAAkB,EAClB,aAAqB,EACrB,aAAyC,EAAA;;YAEzC,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AACnE,YAAA,MAAM,SAAS,GAAc;AAC3B,gBAAA,IAAI,EAAED,4BAAqB,CAAC,aAAa,CAAC;AAC1C,gBAAA,KAAK,EAAE,aAAa;aACrB,CAAC;AAEF,YAAA,MAAM,GAAG,GAAoB;gBAC3B,QAAQ;gBACR,SAAS;AACT,gBAAA,QAAQ,EAAE,QAAQ;aACnB,CAAC;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,aAAa,CAAC,MAA4B,EAAA;;YACrD,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;YACpD,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC7B,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAE7B,MAAM,EAAE,GAAG,EAAE,GAAG,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;AAC9C,gBAAA,MAAM,EAAE,UAAU;AACnB,aAAA,CAAC,CAAC;AAEH,YAAA,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AAChC,YAAA,MAAM,GAAG,GAAG,MAAM,0BAA0B,CAAC,GAAG,CAAC,CAAC;YAElD,OAAO;AACL,gBAAA,IAAI,EAAE,CAAC;AACP,gBAAA,OAAO,EAAE,0BAA0B;gBACnC,UAAU,EAAE,MAAM,CAAC,MAAM;AACzB,gBAAA,IAAI,EAAE,GAAG;aACV,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,gBAAgB,CAAC,MAA+B,EAAA;;YAC3D,IAAI;gBACF,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC;AAC1C,gBAAA,MAAM,EAAE,GAAG,EAAE,GAAG,2BAA2B,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAEjE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CACxC,GAAG,EACH;AACE,oBAAA,OAAO,EAAE,EAAE;AACX,oBAAA,MAAM,EAAE,UAAU;iBACnB,EACD,IAAI,CACL,CAAC;AACF,gBAAA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,gBAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;oBACrC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;oBACrD,MAAM;AACJ,wBAAA,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBAChB,OAAO,EAAE,OAAO,IAAI,OAAO;AAC3B,wBAAA,UAAU,EAAE,MAAM;qBACnB,CAAC;AACH,iBAAA;AAED,gBAAA,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,GAAG,GAAG,MAAM,6BAA6B,CAAC,OAAO,CAAC,CAAC;gBAEzD,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,SAAS;AAClB,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,kBAAkB,CAAC,MAAoC,EAAA;;AAClE,YAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,QAAQ,EAAE;AACb,gBAAA,QAAQ,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC9D,aAAA;YACD,MAAM,EAAE,GAAG,EAAE,GAAG,6BAA6B,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAEhE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;AAC9C,gBAAA,OAAO,EAAE,EAAE;AACX,gBAAA,MAAM,EAAE,UAAU;AACnB,aAAA,CAAC,CAAC;AAEH,YAAA,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AAChC,YAAA,MAAM,GAAG,GAAG,kCAAkC,CAAC,GAAG,CAAC,CAAC;YAEpD,OAAO;AACL,gBAAA,IAAI,EAAE,CAAC;AACP,gBAAA,OAAO,EAAE,SAAS;gBAClB,UAAU,EAAE,MAAM,CAAC,MAAM;AACzB,gBAAA,IAAI,EAAE,GAAG;aACV,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,uBAAuB,CAAC,UAAkB,EAAE,UAAkB,EAAE,QAAkB,EAAA;;AAC7F,YAAA,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAErE,IAAI,CAAC,UAAU,EAAE;AACf,gBAAA,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACrC,aAAA;AAED,YAAA,IAAI,UAAU,CAAC,YAAY,IAAIwB,qBAAY,CAAC,qBAAqB,EAAE;AACjE,gBAAA,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;gBAE7F,IAAI,CAAC,IAAI,EAAE;AACT,oBAAA,MAAM,IAAI,KAAK,CAAC,kDAAkD,GAAG,OAAO,CAAC,CAAC;AAC/E,iBAAA;AAED,gBAAA,OAAO,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC;AACrD,aAAA;AAED,YAAA,OAAO,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;SAC3C,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AA75BY,OAAO,GAAA,UAAA,CAAA;AADnB,IAAA3F,mBAAU,EAAE;IAGR,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;IAC7B,OAAA,CAAA,CAAA,EAAA7B,eAAM,CAAC6B,cAAK,CAAC,MAAM,OAAO,CAAC,CAAC,CAAA;IAC5B,OAAA,CAAA,CAAA,EAAA7B,eAAM,CAAC6B,cAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;qCAFyB,QAAQ;QACV,OAAO;QACjB,EAAE,CAAA,CAAA;AAJ9B,CAAA,EAAA,OAAO,CA65BnB;;AC1mCM,MAAM,oBAAoB,GAAG,CAAO,EACzC,OAAO,EACP,MAAM,EACN,EAAE,EACF,MAAM,EACN,UAAU,EACV,aAAa,GACY,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC7B,IAAA,IAAI,MAAM,CAAC;AACX,IAAA,MAAM,GAAG,GAAG,CAAA,EAAG,EAAE,CAAC,QAAQ,qBAAqB,CAAC;AAChD,IAAA,MAAM,OAAO,GAAG,IAAIK,aAAO,CAAC;AAC1B,QAAA,qBAAqB,EAAE,OAAO;AAC9B,QAAA,mBAAmB,EAAE,MAAM;AAC3B,QAAA,2BAA2B,EAAE,MAAM;AACnC,QAAA,yBAAyB,EAAE,UAAU;AACrC,QAAA,aAAa,EAAE,aAAa;AAC7B,KAAA,CAAC,CAAC;IAEH,IAAI;AACF,QAAA,MAAM,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YACnC,OAAO;AACP,YAAA,MAAM,EAAE,MAAM;AACf,SAAA,CAAC,CAAC;AACH,QAAA,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;AACd,YAAA,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC;AAC5E,SAAA;AACF,KAAA;AAAC,IAAA,OAAO,KAAK,EAAE;AACd,QAAA,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC;AAC5E,KAAA;IAED,OAAO;AACL,QAAA,IAAI,EAAE,CAAC;QACP,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACC,EAAE,CACN;KACF,CAAC;AACJ,CAAC,CAAA;;AC9BD,MAAM,KAAK,GAAG,CAAI,EAAU,EAAE,KAAQ,KACpC,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK,UAAU,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAyC1D,MAAM,eAAe,GAAG,CAAO,EACpC,OAAO,EACP,GAAG,EACH,MAAM,EACN,MAAM,EACN,UAAU,EACV,aAAa,GACU,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC3B,IAAA,OAAO,OAAO,CAAC,GAAG,CAChB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAO,KACd,OAAO,CAAC,IAAI,CAAC;AACX,QAAA,oBAAoB,CAAC;YACnB,OAAO;YACP,MAAM;YACN,EAAE;YACF,MAAM;YACN,UAAU;YACV,aAAa;SACd,CAAC;AACF,QAAA,KAAK,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC;KAC7C,CAAC,CACH,CACF,CAAC;AACJ,CAAC,CAAA,CAAC;AAQK,MAAM,gBAAgB,GAAG,CAAC,EAC/B,MAAM,EACN,OAAO,EACP,MAAM,EACN,OAAO,EACP,UAAU,EACV,UAAU,GACc,KAAY;;IAEpC,OAAO,CAAA,EAAG,MAAM,CAAA,uDAAA,EAA0D,OAAO,CAAA;oCAC/C,MAAM,CAAA;OACnC,MAAM,CAAA;;YAED,OAAO,CAAA;aACN,UAAU,CAAA;mBACJ,UAAU,CAAA;CAC5B,CAAC;AACF,CAAC,CAAC;AAEK,MAAM,YAAY,GAAG,CAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAuB,KAAI,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACxF,IAAA,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC;AAClC,QAAA,MAAM,EAAE,eAAe;AACvB,QAAA,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;AAC3B,KAAA,CAAC,CAAC;AAEH,IAAA,OAAO,IAAI,CAAC;AACd,CAAC,CAAA;;ACvFM,IAAM,YAAY,GAAlB,MAAM,YAAY,CAAA;AACV,IAAA,+BAA+B,CAC1C,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAoC,EACjF,QAAa,EAAA;;YAEb,IAAI;gBACF,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AAEtD,gBAAA,MAAM,mBAAmB,GAAG,mBAAmB,EAAE,CAAC;AAClD,gBAAA,MAAM,cAAc,GAAG,mBAAmB,GAAG,YAAY,CAAC;AAC1D,gBAAA,MAAM,UAAU,GAAG,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;AAC/D,gBAAA,MAAM,UAAU,GAAG,sBAAsB,CAAC,cAAc,CAAC,CAAC;gBAC1D,MAAM,OAAO,GAAG,gBAAgB,CAAC;oBAC/B,MAAM;oBACN,OAAO;oBACP,MAAM,EAAE1D,aAAO,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACnC,OAAO;oBACP,UAAU;oBACV,UAAU;AACX,iBAAA,CAAC,CAAC;AACH,gBAAA,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC5E,gBAAA,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC/D,gBAAA,MAAM,aAAa,GAAG,CAAA,kCAAA,EAAqC,WAAW,CAAc,WAAA,EAAA,OAAO,EAAE,CAAC;AAE9F,gBAAA,MAAM,GAAG,GAAG,MAAM,eAAe,CAAC;oBAChC,OAAO;oBACP,GAAG;oBACH,MAAM;oBACN,MAAM,EAAEA,aAAO,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACnC,UAAU;oBACV,aAAa;AACd,iBAAA,CAAC,CAAC;gBAEH,MAAM,qBAAqB,GAAG,GAAG;qBAC9B,MAAM,CAAC,CAAC,IAAS,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC;AACtC,qBAAA,GAAG,CAAC,CAAC,IAAS,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACzC,gBAAA,IAAI,qBAAqB,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,EAAE;AAC/C,oBAAA,MAAM,IAAI,KAAK,CAAC,CAAA,mDAAA,CAAqD,CAAC,CAAC;AACxE,iBAAA;gBACD,MAAM,UAAU,GAAa,EAAE,CAAC;AAChC,gBAAA,GAAG,CAAC,OAAO,CAAC,CAAC,IAAS,KAAI;AACxB,oBAAA,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;wBACnB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACpC,qBAAA;AACH,iBAAC,CAAC,CAAC;gBAEH,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,IAAI,EAAE;AACJ,wBAAA,UAAU,EAAEA,aAAO,CAAC,UAAU,CAAC;AAC/B,wBAAA,QAAQ,EAAE;4BACR,UAAU,EAAEA,aAAO,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACxC,SAAS,EAAEA,aAAO,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACvC,yBAAA;wBACD,cAAc;AACd,wBAAA,WAAW,EAAE,UAAU;AACvB,wBAAA,iBAAiB,EAAE,qBAAqB;AACzC,qBAAA;AACD,oBAAA,OAAO,EAAE,oCAAoC;iBAC9C,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,CAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,MAAM,KAAI,iBAAiB,EAAE,CAAC;AAC7F,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEO,YAAY,GAAA;QAClB,MAAM,UAAU,GAAGyD,eAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;QACpD,MAAM,SAAS,GAAGA,eAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAEnD,OAAO;YACL,UAAU;YACV,SAAS;SACV,CAAC;KACH;CACF,CAAA;AA1EY,YAAY,GAAA,UAAA,CAAA;AADxB,IAAAlC,mBAAU,EAAE;AACA,CAAA,EAAA,YAAY,CA0ExB;;ACtFD;AACO,MAAM,iCAAiC,GAAG,CAC/C,QAAgB,EAChB,MAAuC,KACrC;IACF,MAAM,IAAI,GAAG,GAAG,CAAC;AACjB,IAAA,MAAM,QAAQ,GAAG;AACf,QAAA,eAAe,EAAE,MAAM;KACxB,CAAC;AACF,IAAA,MAAM,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;IACrC,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAClC,IAAA,GAAG,GAAG,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAExC,IAAA,MAAM,OAAO,GAAqB;AAChC,QAAA,aAAa,EAAE,mBAAmB;AAClC,QAAA,MAAM,EAAE,UAAU;AAClB,QAAA,GAAG,EAAE;AACH,YAAA,QAAQ,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ;YAC/B,KAAK;YACL,IAAI;AACL,SAAA;QACD,WAAW,EAAE,MAAM,CAAC,OAAO;KAC5B,CAAC;AAEF,IAAA,MAAM,qBAAqB,GAAiC;AAC1D,QAAA,MAAM,EAAE,UAAU;KACnB,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,IAAI;QACb,qBAAqB;QACrB,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,mCAAmC,GAAG,CAAC,IAAY,KAAI;AAClE,IAAA,MAAM,SAAS,GAAG,IAAI0C,uBAAS,CAAC;AAC9B,QAAA,aAAa,EAAE,KAAK;AACrB,KAAA,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAoC,CAAC;IAErE,IAAI,eAAe,GAAG,GAAG,CAAC,mCAAmC,CAAC,eAAe,IAAI,EAAE,CAAC;AAEpF,IAAA,IAAI,eAAe,EAAE;AACnB,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;AACnC,YAAA,eAAe,GAAG,CAAC,eAAe,CAAC,CAAC;AACrC,SAAA;QAED,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AAC7C,YAAA,IAAI,CAAC,cAAc,GACd,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,cAAc,CAAA,EAAA;;AAEtB,gBAAA,UAAU,EAAE,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAC5D,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAC9C,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GACnD,CAAC;AAEF,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC,CAAC;AACJ,KAAA;AAED,IAAA,GAAG,CAAC,mCAAmC,CAAC,eAAe,GAAG,eAAe,CAAC;AAE1E,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;;ACiDM,IAAM,OAAO,GAAb,MAAM,OAAO,CAAA;IAClB,WACyC,CAAA,QAAkB,EACxB,EAAM,EAAA;QADA,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QACxB,IAAE,CAAA,EAAA,GAAF,EAAE,CAAI;AAEjC,QAAA,IAAA,CAAA,QAAQ,GAAG1B,kBAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACvC,QAAA,IAAA,CAAA,WAAW,GAAmBA,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KAFpE;AAIS,IAAA,eAAe,CAAC,OAAe,EAAA;;YAC1C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,YAAY,CAAC;gBAC5B,OAAO;AACR,aAAA,CAAC,CAAC;SACJ,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,kBAAkB,CAAC,OAAkC,EAAA;;YAChE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACzC,CAAA,CAAA;AAAA,KAAA;IAEY,MAAM,GAAA;;YACjB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;SAC3B,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,iBAAiB,CAAC,OAAsC,EAAA;;YACnE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,sBAAsB,CAAC,OAAwC,EAAA;;YAC1E,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;SAC/C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,uBAAuB,CAAC,OAAyC,EAAA;;YAC5E,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;SAChD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,cAAc,CAAC,OAAmC,EAAA;;YAC7D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;SAC1C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,iBAAiB,CAAC,OAAoC,EAAA;;YACjE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;SAC3C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,cAAc,CAAC,OAAmC,EAAA;;YAC7D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;SAC1C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,yBAAyB,CAAC,OAA2C,EAAA;;YAChF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;SAClD,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,oBAAoB,CAAC,OAAsC,EAAA;;YACtE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,WAAW,CAAC,OAA6B,EAAA;;YACpD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;AAC3D,YAAA,OAAO,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SACpC,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,OAAO,CAAC,GAAe,EAAA;;AAClC,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,iBAAiB,EACjB,GAAG,CAAC,OAAO,EACX,uBAAuB,EACvB+E,eAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EACrBA,eAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAChC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,QAAQ,CAAC,GAAgB,EAAA;;AACpC,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,kBAAkB,EAClB,GAAG,CAAC,OAAO,EACX,wBAAwB,EACxBC,gBAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EACtBA,gBAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACjC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,aAAa,CAAC,GAAqB,EAAA;;AAC9C,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,uBAAuB,EACvB,GAAG,CAAC,KAAK,EACT,6BAA6B,EAC7BC,qBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC3BA,qBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACtC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;AAEY,IAAA,uBAAuB,CAClC,MAAuC,EACvC,QAAkB,EAClB,MAAiB,EAAA;;YAEjB,IAAI;gBACF,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACzB,IAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,gBAAA,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;AAC7B,oBAAA,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC5B,iBAAA;AAAM,qBAAA;oBACL,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC;AAC1C,oBAAA,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;AACxB,iBAAA;AAED,gBAAA,MAAM,EAAE,GAAG,EAAE,qBAAqB,EAAE,OAAO,EAAE,GAAG,iCAAiC,CAC/E,QAAQ,EACR,MAAM,CACP,CAAC;AAEF,gBAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAEvE,gBAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,kCACzC,qBAAqB,CAAA,EAAA,EACxB,OAAO,EAAE,WAAW,IACpB,CAAC;AAEH,gBAAA,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;AAChC,gBAAA,MAAM,GAAG,GAAG,mCAAmC,CAAC,GAAG,CAAC,CAAC;gBAErD,OAAO;AACL,oBAAA,IAAI,EAAE,CAAC;AACP,oBAAA,OAAO,EAAE,qBAAqB;oBAC9B,UAAU,EAAE,MAAM,CAAC,MAAM;AACzB,oBAAA,IAAI,EAAE,GAAG;iBACV,CAAC;AACH,aAAA;AAAC,YAAA,OAAO,KAAU,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,CAAC,CAAC;oBACR,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,UAAU,EAAE,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,UAAU,KAAI,iBAAiB;iBACnD,CAAC;AACH,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAhJY,OAAO,GAAA,UAAA,CAAA;AADnB,IAAAjG,mBAAU,EAAE;IAGR,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;IAC7B,OAAA,CAAA,CAAA,EAAA7B,eAAM,CAAC6B,cAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;qCADyB,QAAQ;QACpB,EAAE,CAAA,CAAA;AAH9B,CAAA,EAAA,OAAO,CAgJnB;;AC3QM,MAAM,8BAA8B,GAAG;AAC5C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,0BAA0B;AACjC,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,WAAW;AAClB,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,sBAAsB,EAAE;AACtB,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,OAAO,EAAE;AACP,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,OAAO;AACd,SAAA;AACF,KAAA;CACF;;ACnDM,MAAM,oBAAoB,GAAG;AAClC,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACDM,IAAM,QAAQ,GAAd,MAAM,QAAQ,CAAA;AACnB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;KAAI;AAE5D,IAAA,YAAY,CAAC,GAAY,EAAA;;YACpC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,cAAc,EACd,GAAG,CAAC,KAAK,EACT,oBAAoB,EAEf,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAAoE,YAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CACrB,EAAA,EAAA,MAAM,EAAEC,oBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,EACpC,WAAW,EAAE,GAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,EAExC,CAAA,EAAAD,YAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAC7B,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,cAAc,CAAC,SAA6B,EAAE,SAA4B,EAAA;;YACrF,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,wBAAwB,EACxB,SAAS,CAAC,QAAQ,EAClB,8BAA8B,EAEzB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAAE,sBAAiB,CAAC,KAAK,CAAC,SAAS,CAAC,CACrC,EAAA,EAAA,QAAQ,EAAE;AACR,oBAAA;AACE,wBAAA,IAAI,EAAE,4CAA4C;wBAClD,KAAK,EAAE,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;;AAE9C,qBAAA;iBACF,EAEH,CAAA,EAAAA,sBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAC7C,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AAnCY,QAAQ,GAAA,UAAA,CAAA;AADpB,IAAApG,mBAAU,EAAE;IAEE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAD1D,CAAA,EAAA,QAAQ,CAmCpB;;ACzDM,MAAM,+BAA+B,GAAG;AAC7C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,oBAAoB;AAC1B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,IAAI,EAAE,oBAAoB;AAC3B,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,qBAAqB;AAC5B,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,qBAAqB;AAC3B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,SAAS;AAChB,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,eAAe;AACtB,SAAA;AACF,KAAA;AACD,IAAA,kBAAkB,EAAE;AAClB,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,mBAAmB,EAAE;AACnB,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,kBAAkB;AACxB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,aAAa,EAAE;AACb,QAAA;AACE,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,OAAO,EAAE;AACP,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,OAAO;AACd,SAAA;AACF,KAAA;CACF;;AC/GM,MAAM,6BAA6B,GAAG;AAC3C,IAAA,IAAI,EAAE;AACJ,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,oBAAoB;AAC1B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,IAAI,EAAE,qBAAqB;AAC5B,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,qBAAqB;AAC3B,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,mBAAmB,EAAE;AACnB,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,UAAU;AAChB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,kBAAkB;AACxB,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACD,QAAA;AACE,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF;;ACvBM,IAAM,SAAS,GAAf,MAAM,SAAS,CAAA;AACpB,IAAA,WAAA,CAAmD,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAC7D,QAAA,IAAA,CAAA,WAAW,GAAmBd,kBAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAEhE,QAAA,IAAA,CAAA,QAAQ,GAAaA,kBAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAHgB;AAK5D,IAAA,cAAc,CAAC,OAA+B,EAAA;;YACzD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;AACzD,YAAA,OAAO,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SACnC,CAAA,CAAA;AAAA,KAAA;IAEY,eAAe,CAAC,OAAe,EAAE,GAAuB,EAAA;;AACnE,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,yBAAyB,EACzB,OAAO,EACP,+BAA+B,EAC/BqF,uBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC7BA,uBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACxC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;IAEY,aAAa,CAAC,OAAe,EAAE,GAAqB,EAAA;;AAC/D,YAAA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAC3B,uBAAuB,EACvB,OAAO,EACP,6BAA6B,EAC7BC,qBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC3BA,qBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CACtC,CAAC;SACH,CAAA,CAAA;AAAA,KAAA;CACF,CAAA;AA9BY,SAAS,GAAA,UAAA,CAAA;AADrB,IAAAtG,mBAAU,EAAE;IAEE,OAAA,CAAA,CAAA,EAAAC,eAAM,CAAC6B,cAAK,CAAC,MAAM,QAAQ,CAAC,CAAC,CAAA;qCAAmB,QAAQ,CAAA,CAAA;AAD1D,CAAA,EAAA,SAAS,CA8BrB;;MC7CY,MAAM,CAAA;AACjB;;;;AAIG;AACH,IAAA,OAAO,MAAM,CAAC,MAAc,EAAE,OAAe,EAAA;QAC3Cd,kBAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;QACpDA,kBAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;QAEtD,MAAM,OAAO,GAAGA,kBAAS,CAAC,OAAO,CAAU,OAAO,CAAC,CAAC;QACpD,MAAM,KAAK,GAAGA,kBAAS,CAAC,OAAO,CAAQ,KAAK,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAGA,kBAAS,CAAC,OAAO,CAAS,MAAM,CAAC,CAAC;QACjD,MAAM,SAAS,GAAGA,kBAAS,CAAC,OAAO,CAAY,SAAS,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAGA,kBAAS,CAAC,OAAO,CAAa,UAAU,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAGA,kBAAS,CAAC,OAAO,CAAe,YAAY,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAGA,kBAAS,CAAC,OAAO,CAAW,QAAQ,CAAC,CAAC;QACvD,MAAM,MAAM,GAAGA,kBAAS,CAAC,OAAO,CAAS,MAAM,CAAC,CAAC;QACjD,MAAM,KAAK,GAAGA,kBAAS,CAAC,OAAO,CAAQ,KAAK,CAAC,CAAC;QAC9C,MAAM,OAAO,GAAGA,kBAAS,CAAC,OAAO,CAAU,OAAO,CAAC,CAAC;QACpD,MAAM,OAAO,GAAGA,kBAAS,CAAC,OAAO,CAAU,OAAO,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAGA,kBAAS,CAAC,OAAO,CAAW,QAAQ,CAAC,CAAC;QACvD,MAAM,WAAW,GAAGA,kBAAS,CAAC,OAAO,CAAiB,cAAc,CAAC,CAAC;QACtE,MAAM,EAAE,GAAGA,kBAAS,CAAC,OAAO,CAAK,EAAE,CAAC,CAAC;QACrC,MAAM,QAAQ,GAAGA,kBAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAGA,kBAAS,CAAC,OAAO,CAAU,OAAO,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAGA,kBAAS,CAAC,OAAO,CAAW,QAAQ,CAAC,CAAC;QACvD,MAAM,YAAY,GAAGA,kBAAS,CAAC,OAAO,CAAe,YAAY,CAAC,CAAC;QACnE,MAAM,SAAS,GAAGA,kBAAS,CAAC,OAAO,CAAY,SAAS,CAAC,CAAC;QAC1D,MAAM,YAAY,GAAGA,kBAAS,CAAC,OAAO,CAAe,YAAY,CAAC,CAAC;AAEnE,QAAA,OAAO,IAAI,MAAM,CACf,OAAO,EACP,KAAK,EACL,MAAM,EACN,SAAS,EACT,UAAU,EACV,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,KAAK,EACL,OAAO,EACP,OAAO,EACP,QAAQ,EACR,WAAW,EACX,EAAE,EACF,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,YAAY,EACZ,SAAS,EACT,YAAY,CACb,CAAC;KACH;AAED,IAAA,WAAA,CACS,OAAiB,EACjB,KAAa,EACb,MAAe,EACf,SAAqB,EACrB,UAAuB,EACvB,YAA2B,EAC3B,QAAmB,EACnB,MAAe,EACf,KAAa,EACb,MAAe,EACf,OAAiB,EACjB,QAAmB,EACnB,WAA2B,EAC3B,EAAO,EACP,QAAmB,EACnB,OAAiB,EACjB,QAAmB,EACnB,YAA2B,EAC3B,SAAoB,EACpB,YAA2B,EAAA;QAnB3B,IAAO,CAAA,OAAA,GAAP,OAAO,CAAU;QACjB,IAAK,CAAA,KAAA,GAAL,KAAK,CAAQ;QACb,IAAM,CAAA,MAAA,GAAN,MAAM,CAAS;QACf,IAAS,CAAA,SAAA,GAAT,SAAS,CAAY;QACrB,IAAU,CAAA,UAAA,GAAV,UAAU,CAAa;QACvB,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAe;QAC3B,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAS;QACf,IAAK,CAAA,KAAA,GAAL,KAAK,CAAQ;QACb,IAAM,CAAA,MAAA,GAAN,MAAM,CAAS;QACf,IAAO,CAAA,OAAA,GAAP,OAAO,CAAU;QACjB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAW,CAAA,WAAA,GAAX,WAAW,CAAgB;QAC3B,IAAE,CAAA,EAAA,GAAF,EAAE,CAAK;QACP,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAU;QACjB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAe;QAC3B,IAAS,CAAA,SAAA,GAAT,SAAS,CAAW;QACpB,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAe;KAChC;AACL;;ACzFY,MAAA,UAAU,GAAG;IACxB,oBAAoB;IACpB,oBAAoB;IACpB,+BAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}