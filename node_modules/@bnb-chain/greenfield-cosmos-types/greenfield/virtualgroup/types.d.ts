/// <reference types="long" />
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.virtualgroup";
/**
 * A global virtual group consists of one primary SP (SP) and multiple secondary SP.
 * Every global virtual group must belong to a GVG family, and the objects of each
 * bucket must be stored in a GVG within a group family.
 */
export interface GlobalVirtualGroup {
    /** ID represents the unique identifier of the global virtual group. */
    id: number;
    /** Family ID represents the identifier of the GVG family that the group belongs to. */
    familyId: number;
    /** Primary SP ID represents the unique identifier of the primary storage provider in the group. */
    primarySpId: number;
    /** Secondary SP IDs represents the list of unique identifiers of the secondary storage providers in the group. */
    secondarySpIds: number[];
    /** Stored size represents the size of the stored objects within the group. */
    storedSize: Long;
    /** Virtual payment address represents the payment address associated with the group. */
    virtualPaymentAddress: string;
    /** Total deposit represents the number of tokens deposited by this storage provider for staking. */
    totalDeposit: string;
}
export interface GlobalVirtualGroupProtoMsg {
    typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroup";
    value: Uint8Array;
}
/**
 * A global virtual group consists of one primary SP (SP) and multiple secondary SP.
 * Every global virtual group must belong to a GVG family, and the objects of each
 * bucket must be stored in a GVG within a group family.
 */
export interface GlobalVirtualGroupAmino {
    /** ID represents the unique identifier of the global virtual group. */
    id?: number;
    /** Family ID represents the identifier of the GVG family that the group belongs to. */
    family_id?: number;
    /** Primary SP ID represents the unique identifier of the primary storage provider in the group. */
    primary_sp_id?: number;
    /** Secondary SP IDs represents the list of unique identifiers of the secondary storage providers in the group. */
    secondary_sp_ids?: number[];
    /** Stored size represents the size of the stored objects within the group. */
    stored_size?: string;
    /** Virtual payment address represents the payment address associated with the group. */
    virtual_payment_address?: string;
    /** Total deposit represents the number of tokens deposited by this storage provider for staking. */
    total_deposit?: string;
}
export interface GlobalVirtualGroupAminoMsg {
    type: "/greenfield.virtualgroup.GlobalVirtualGroup";
    value: GlobalVirtualGroupAmino;
}
/**
 * A global virtual group consists of one primary SP (SP) and multiple secondary SP.
 * Every global virtual group must belong to a GVG family, and the objects of each
 * bucket must be stored in a GVG within a group family.
 */
export interface GlobalVirtualGroupSDKType {
    id: number;
    family_id: number;
    primary_sp_id: number;
    secondary_sp_ids: number[];
    stored_size: Long;
    virtual_payment_address: string;
    total_deposit: string;
}
/**
 * Global virtual group family serve as a means of grouping global virtual groups.
 * Each bucket must be associated with a unique global virtual group family and cannot cross families.
 */
export interface GlobalVirtualGroupFamily {
    /** id is the identifier of the global virtual group family. */
    id: number;
    /** primary_sp_id */
    primarySpId: number;
    /** global_virtual_group_ids is a list of identifiers of the global virtual groups associated with the family. */
    globalVirtualGroupIds: number[];
    /** virtual_payment_address is the payment address associated with the global virtual group family. */
    virtualPaymentAddress: string;
}
export interface GlobalVirtualGroupFamilyProtoMsg {
    typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroupFamily";
    value: Uint8Array;
}
/**
 * Global virtual group family serve as a means of grouping global virtual groups.
 * Each bucket must be associated with a unique global virtual group family and cannot cross families.
 */
export interface GlobalVirtualGroupFamilyAmino {
    /** id is the identifier of the global virtual group family. */
    id?: number;
    /** primary_sp_id */
    primary_sp_id?: number;
    /** global_virtual_group_ids is a list of identifiers of the global virtual groups associated with the family. */
    global_virtual_group_ids?: number[];
    /** virtual_payment_address is the payment address associated with the global virtual group family. */
    virtual_payment_address?: string;
}
export interface GlobalVirtualGroupFamilyAminoMsg {
    type: "/greenfield.virtualgroup.GlobalVirtualGroupFamily";
    value: GlobalVirtualGroupFamilyAmino;
}
/**
 * Global virtual group family serve as a means of grouping global virtual groups.
 * Each bucket must be associated with a unique global virtual group family and cannot cross families.
 */
export interface GlobalVirtualGroupFamilySDKType {
    id: number;
    primary_sp_id: number;
    global_virtual_group_ids: number[];
    virtual_payment_address: string;
}
export interface GlobalVirtualGroupsBindingOnBucket {
    /** bucket_id is the unique identification for the bucket. */
    bucketId: string;
    /** global_virtual_group_ids is a list of identifiers of the global virtual groups associated with the bucket. */
    globalVirtualGroupIds: number[];
    /** local_virtual_group_ids is a list of identifiers of the local virtual groups associated with the bucket. */
    localVirtualGroupIds: number[];
}
export interface GlobalVirtualGroupsBindingOnBucketProtoMsg {
    typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroupsBindingOnBucket";
    value: Uint8Array;
}
export interface GlobalVirtualGroupsBindingOnBucketAmino {
    /** bucket_id is the unique identification for the bucket. */
    bucket_id?: string;
    /** global_virtual_group_ids is a list of identifiers of the global virtual groups associated with the bucket. */
    global_virtual_group_ids?: number[];
    /** local_virtual_group_ids is a list of identifiers of the local virtual groups associated with the bucket. */
    local_virtual_group_ids?: number[];
}
export interface GlobalVirtualGroupsBindingOnBucketAminoMsg {
    type: "/greenfield.virtualgroup.GlobalVirtualGroupsBindingOnBucket";
    value: GlobalVirtualGroupsBindingOnBucketAmino;
}
export interface GlobalVirtualGroupsBindingOnBucketSDKType {
    bucket_id: string;
    global_virtual_group_ids: number[];
    local_virtual_group_ids: number[];
}
export interface GVGStatisticsWithinSP {
    /** storage_provider_id defines the id of the sp which the statistics associated to */
    storageProviderId: number;
    /** primary_count defines the number of global virtual groups (GVGs) which this sp serves as primary sp */
    primaryCount: number;
    /**
     * secondary_count defines the number of global virtual groups (GVGs) in
     * which this storage provider serves as a secondary storage provider.
     */
    secondaryCount: number;
    /**
     * Redundancy defines the number of gvg that sp serves as sp and secondary sp, which breaks the data redundancy requirement.
     * In most case, this should not happen,
     * during sp exit, a successor sp might need to swapIn GVG(s) that it is already a secondary and become the primary SP
     * of whole family.
     * a successor sp which need to swapIn a GVG as secondary must be unique to all other SP. So this will not be used for
     * swapIn individual GVG as secondary
     */
    breakRedundancyReqmtGvgCount: number;
}
export interface GVGStatisticsWithinSPProtoMsg {
    typeUrl: "/greenfield.virtualgroup.GVGStatisticsWithinSP";
    value: Uint8Array;
}
export interface GVGStatisticsWithinSPAmino {
    /** storage_provider_id defines the id of the sp which the statistics associated to */
    storage_provider_id?: number;
    /** primary_count defines the number of global virtual groups (GVGs) which this sp serves as primary sp */
    primary_count?: number;
    /**
     * secondary_count defines the number of global virtual groups (GVGs) in
     * which this storage provider serves as a secondary storage provider.
     */
    secondary_count?: number;
    /**
     * Redundancy defines the number of gvg that sp serves as sp and secondary sp, which breaks the data redundancy requirement.
     * In most case, this should not happen,
     * during sp exit, a successor sp might need to swapIn GVG(s) that it is already a secondary and become the primary SP
     * of whole family.
     * a successor sp which need to swapIn a GVG as secondary must be unique to all other SP. So this will not be used for
     * swapIn individual GVG as secondary
     */
    break_redundancy_reqmt_gvg_count?: number;
}
export interface GVGStatisticsWithinSPAminoMsg {
    type: "/greenfield.virtualgroup.GVGStatisticsWithinSP";
    value: GVGStatisticsWithinSPAmino;
}
export interface GVGStatisticsWithinSPSDKType {
    storage_provider_id: number;
    primary_count: number;
    secondary_count: number;
    break_redundancy_reqmt_gvg_count: number;
}
export interface GVGFamilyStatisticsWithinSP {
    /** sp_id defines the id of the sp which the statistics associated to */
    spId: number;
    /** global_virtual_group_family_ids is a list of identifiers of the global virtual group family associated with the SP. */
    globalVirtualGroupFamilyIds: number[];
}
export interface GVGFamilyStatisticsWithinSPProtoMsg {
    typeUrl: "/greenfield.virtualgroup.GVGFamilyStatisticsWithinSP";
    value: Uint8Array;
}
export interface GVGFamilyStatisticsWithinSPAmino {
    /** sp_id defines the id of the sp which the statistics associated to */
    sp_id?: number;
    /** global_virtual_group_family_ids is a list of identifiers of the global virtual group family associated with the SP. */
    global_virtual_group_family_ids?: number[];
}
export interface GVGFamilyStatisticsWithinSPAminoMsg {
    type: "/greenfield.virtualgroup.GVGFamilyStatisticsWithinSP";
    value: GVGFamilyStatisticsWithinSPAmino;
}
export interface GVGFamilyStatisticsWithinSPSDKType {
    sp_id: number;
    global_virtual_group_family_ids: number[];
}
export interface SwapOutInfo {
    /** sp_id is the unique id of the storage provider who want to swap out. */
    spId: number;
    /** successor_sp_id is the id of the successor storage provider. */
    successorSpId: number;
}
export interface SwapOutInfoProtoMsg {
    typeUrl: "/greenfield.virtualgroup.SwapOutInfo";
    value: Uint8Array;
}
export interface SwapOutInfoAmino {
    /** sp_id is the unique id of the storage provider who want to swap out. */
    sp_id?: number;
    /** successor_sp_id is the id of the successor storage provider. */
    successor_sp_id?: number;
}
export interface SwapOutInfoAminoMsg {
    type: "/greenfield.virtualgroup.SwapOutInfo";
    value: SwapOutInfoAmino;
}
export interface SwapOutInfoSDKType {
    sp_id: number;
    successor_sp_id: number;
}
export interface SwapInInfo {
    /** successor_sp_id defines the id of SP who wants to join the family or GVG */
    successorSpId: number;
    /** target_sp_id is the id of SP in the family or GVG to be swapped. */
    targetSpId: number;
    /** expiration_time is the expiration of epoch time for the swapInInfo */
    expirationTime: Long;
}
export interface SwapInInfoProtoMsg {
    typeUrl: "/greenfield.virtualgroup.SwapInInfo";
    value: Uint8Array;
}
export interface SwapInInfoAmino {
    /** successor_sp_id defines the id of SP who wants to join the family or GVG */
    successor_sp_id?: number;
    /** target_sp_id is the id of SP in the family or GVG to be swapped. */
    target_sp_id?: number;
    /** expiration_time is the expiration of epoch time for the swapInInfo */
    expiration_time?: string;
}
export interface SwapInInfoAminoMsg {
    type: "/greenfield.virtualgroup.SwapInInfo";
    value: SwapInInfoAmino;
}
export interface SwapInInfoSDKType {
    successor_sp_id: number;
    target_sp_id: number;
    expiration_time: Long;
}
export declare const GlobalVirtualGroup: {
    typeUrl: string;
    encode(message: GlobalVirtualGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GlobalVirtualGroup;
    fromJSON(object: any): GlobalVirtualGroup;
    toJSON(message: GlobalVirtualGroup): unknown;
    fromPartial<I extends {
        id?: number;
        familyId?: number;
        primarySpId?: number;
        secondarySpIds?: number[];
        storedSize?: string | number | Long.Long;
        virtualPaymentAddress?: string;
        totalDeposit?: string;
    } & {
        id?: number;
        familyId?: number;
        primarySpId?: number;
        secondarySpIds?: number[] & number[] & Record<Exclude<keyof I["secondarySpIds"], keyof number[]>, never>;
        storedSize?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["storedSize"], keyof Long.Long>, never>);
        virtualPaymentAddress?: string;
        totalDeposit?: string;
    } & Record<Exclude<keyof I, keyof GlobalVirtualGroup>, never>>(object: I): GlobalVirtualGroup;
    fromSDK(object: GlobalVirtualGroupSDKType): GlobalVirtualGroup;
    toSDK(message: GlobalVirtualGroup): GlobalVirtualGroupSDKType;
    fromAmino(object: GlobalVirtualGroupAmino): GlobalVirtualGroup;
    toAmino(message: GlobalVirtualGroup): GlobalVirtualGroupAmino;
    fromAminoMsg(object: GlobalVirtualGroupAminoMsg): GlobalVirtualGroup;
    fromProtoMsg(message: GlobalVirtualGroupProtoMsg): GlobalVirtualGroup;
    toProto(message: GlobalVirtualGroup): Uint8Array;
    toProtoMsg(message: GlobalVirtualGroup): GlobalVirtualGroupProtoMsg;
};
export declare const GlobalVirtualGroupFamily: {
    typeUrl: string;
    encode(message: GlobalVirtualGroupFamily, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GlobalVirtualGroupFamily;
    fromJSON(object: any): GlobalVirtualGroupFamily;
    toJSON(message: GlobalVirtualGroupFamily): unknown;
    fromPartial<I extends {
        id?: number;
        primarySpId?: number;
        globalVirtualGroupIds?: number[];
        virtualPaymentAddress?: string;
    } & {
        id?: number;
        primarySpId?: number;
        globalVirtualGroupIds?: number[] & number[] & Record<Exclude<keyof I["globalVirtualGroupIds"], keyof number[]>, never>;
        virtualPaymentAddress?: string;
    } & Record<Exclude<keyof I, keyof GlobalVirtualGroupFamily>, never>>(object: I): GlobalVirtualGroupFamily;
    fromSDK(object: GlobalVirtualGroupFamilySDKType): GlobalVirtualGroupFamily;
    toSDK(message: GlobalVirtualGroupFamily): GlobalVirtualGroupFamilySDKType;
    fromAmino(object: GlobalVirtualGroupFamilyAmino): GlobalVirtualGroupFamily;
    toAmino(message: GlobalVirtualGroupFamily): GlobalVirtualGroupFamilyAmino;
    fromAminoMsg(object: GlobalVirtualGroupFamilyAminoMsg): GlobalVirtualGroupFamily;
    fromProtoMsg(message: GlobalVirtualGroupFamilyProtoMsg): GlobalVirtualGroupFamily;
    toProto(message: GlobalVirtualGroupFamily): Uint8Array;
    toProtoMsg(message: GlobalVirtualGroupFamily): GlobalVirtualGroupFamilyProtoMsg;
};
export declare const GlobalVirtualGroupsBindingOnBucket: {
    typeUrl: string;
    encode(message: GlobalVirtualGroupsBindingOnBucket, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GlobalVirtualGroupsBindingOnBucket;
    fromJSON(object: any): GlobalVirtualGroupsBindingOnBucket;
    toJSON(message: GlobalVirtualGroupsBindingOnBucket): unknown;
    fromPartial<I extends {
        bucketId?: string;
        globalVirtualGroupIds?: number[];
        localVirtualGroupIds?: number[];
    } & {
        bucketId?: string;
        globalVirtualGroupIds?: number[] & number[] & Record<Exclude<keyof I["globalVirtualGroupIds"], keyof number[]>, never>;
        localVirtualGroupIds?: number[] & number[] & Record<Exclude<keyof I["localVirtualGroupIds"], keyof number[]>, never>;
    } & Record<Exclude<keyof I, keyof GlobalVirtualGroupsBindingOnBucket>, never>>(object: I): GlobalVirtualGroupsBindingOnBucket;
    fromSDK(object: GlobalVirtualGroupsBindingOnBucketSDKType): GlobalVirtualGroupsBindingOnBucket;
    toSDK(message: GlobalVirtualGroupsBindingOnBucket): GlobalVirtualGroupsBindingOnBucketSDKType;
    fromAmino(object: GlobalVirtualGroupsBindingOnBucketAmino): GlobalVirtualGroupsBindingOnBucket;
    toAmino(message: GlobalVirtualGroupsBindingOnBucket): GlobalVirtualGroupsBindingOnBucketAmino;
    fromAminoMsg(object: GlobalVirtualGroupsBindingOnBucketAminoMsg): GlobalVirtualGroupsBindingOnBucket;
    fromProtoMsg(message: GlobalVirtualGroupsBindingOnBucketProtoMsg): GlobalVirtualGroupsBindingOnBucket;
    toProto(message: GlobalVirtualGroupsBindingOnBucket): Uint8Array;
    toProtoMsg(message: GlobalVirtualGroupsBindingOnBucket): GlobalVirtualGroupsBindingOnBucketProtoMsg;
};
export declare const GVGStatisticsWithinSP: {
    typeUrl: string;
    encode(message: GVGStatisticsWithinSP, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GVGStatisticsWithinSP;
    fromJSON(object: any): GVGStatisticsWithinSP;
    toJSON(message: GVGStatisticsWithinSP): unknown;
    fromPartial<I extends {
        storageProviderId?: number;
        primaryCount?: number;
        secondaryCount?: number;
        breakRedundancyReqmtGvgCount?: number;
    } & {
        storageProviderId?: number;
        primaryCount?: number;
        secondaryCount?: number;
        breakRedundancyReqmtGvgCount?: number;
    } & Record<Exclude<keyof I, keyof GVGStatisticsWithinSP>, never>>(object: I): GVGStatisticsWithinSP;
    fromSDK(object: GVGStatisticsWithinSPSDKType): GVGStatisticsWithinSP;
    toSDK(message: GVGStatisticsWithinSP): GVGStatisticsWithinSPSDKType;
    fromAmino(object: GVGStatisticsWithinSPAmino): GVGStatisticsWithinSP;
    toAmino(message: GVGStatisticsWithinSP): GVGStatisticsWithinSPAmino;
    fromAminoMsg(object: GVGStatisticsWithinSPAminoMsg): GVGStatisticsWithinSP;
    fromProtoMsg(message: GVGStatisticsWithinSPProtoMsg): GVGStatisticsWithinSP;
    toProto(message: GVGStatisticsWithinSP): Uint8Array;
    toProtoMsg(message: GVGStatisticsWithinSP): GVGStatisticsWithinSPProtoMsg;
};
export declare const GVGFamilyStatisticsWithinSP: {
    typeUrl: string;
    encode(message: GVGFamilyStatisticsWithinSP, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GVGFamilyStatisticsWithinSP;
    fromJSON(object: any): GVGFamilyStatisticsWithinSP;
    toJSON(message: GVGFamilyStatisticsWithinSP): unknown;
    fromPartial<I extends {
        spId?: number;
        globalVirtualGroupFamilyIds?: number[];
    } & {
        spId?: number;
        globalVirtualGroupFamilyIds?: number[] & number[] & Record<Exclude<keyof I["globalVirtualGroupFamilyIds"], keyof number[]>, never>;
    } & Record<Exclude<keyof I, keyof GVGFamilyStatisticsWithinSP>, never>>(object: I): GVGFamilyStatisticsWithinSP;
    fromSDK(object: GVGFamilyStatisticsWithinSPSDKType): GVGFamilyStatisticsWithinSP;
    toSDK(message: GVGFamilyStatisticsWithinSP): GVGFamilyStatisticsWithinSPSDKType;
    fromAmino(object: GVGFamilyStatisticsWithinSPAmino): GVGFamilyStatisticsWithinSP;
    toAmino(message: GVGFamilyStatisticsWithinSP): GVGFamilyStatisticsWithinSPAmino;
    fromAminoMsg(object: GVGFamilyStatisticsWithinSPAminoMsg): GVGFamilyStatisticsWithinSP;
    fromProtoMsg(message: GVGFamilyStatisticsWithinSPProtoMsg): GVGFamilyStatisticsWithinSP;
    toProto(message: GVGFamilyStatisticsWithinSP): Uint8Array;
    toProtoMsg(message: GVGFamilyStatisticsWithinSP): GVGFamilyStatisticsWithinSPProtoMsg;
};
export declare const SwapOutInfo: {
    typeUrl: string;
    encode(message: SwapOutInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SwapOutInfo;
    fromJSON(object: any): SwapOutInfo;
    toJSON(message: SwapOutInfo): unknown;
    fromPartial<I extends {
        spId?: number;
        successorSpId?: number;
    } & {
        spId?: number;
        successorSpId?: number;
    } & Record<Exclude<keyof I, keyof SwapOutInfo>, never>>(object: I): SwapOutInfo;
    fromSDK(object: SwapOutInfoSDKType): SwapOutInfo;
    toSDK(message: SwapOutInfo): SwapOutInfoSDKType;
    fromAmino(object: SwapOutInfoAmino): SwapOutInfo;
    toAmino(message: SwapOutInfo): SwapOutInfoAmino;
    fromAminoMsg(object: SwapOutInfoAminoMsg): SwapOutInfo;
    fromProtoMsg(message: SwapOutInfoProtoMsg): SwapOutInfo;
    toProto(message: SwapOutInfo): Uint8Array;
    toProtoMsg(message: SwapOutInfo): SwapOutInfoProtoMsg;
};
export declare const SwapInInfo: {
    typeUrl: string;
    encode(message: SwapInInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SwapInInfo;
    fromJSON(object: any): SwapInInfo;
    toJSON(message: SwapInInfo): unknown;
    fromPartial<I extends {
        successorSpId?: number;
        targetSpId?: number;
        expirationTime?: string | number | Long.Long;
    } & {
        successorSpId?: number;
        targetSpId?: number;
        expirationTime?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["expirationTime"], keyof Long.Long>, never>);
    } & Record<Exclude<keyof I, keyof SwapInInfo>, never>>(object: I): SwapInInfo;
    fromSDK(object: SwapInInfoSDKType): SwapInInfo;
    toSDK(message: SwapInInfo): SwapInInfoSDKType;
    fromAmino(object: SwapInInfoAmino): SwapInInfo;
    toAmino(message: SwapInInfo): SwapInInfoAmino;
    fromAminoMsg(object: SwapInInfoAminoMsg): SwapInInfo;
    fromProtoMsg(message: SwapInInfoProtoMsg): SwapInInfo;
    toProto(message: SwapInInfo): Uint8Array;
    toProtoMsg(message: SwapInInfo): SwapInInfoProtoMsg;
};
