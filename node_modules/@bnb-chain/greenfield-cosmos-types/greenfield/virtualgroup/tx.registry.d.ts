import { GeneratedType } from "@cosmjs/proto-signing";
import { MsgCreateGlobalVirtualGroup, MsgDeleteGlobalVirtualGroup, MsgDeposit, MsgWithdraw, MsgSwapOut, MsgSettle, MsgUpdateParams, MsgStorageProviderExit, MsgCompleteStorageProviderExit, MsgCompleteSwapOut, MsgCancelSwapOut, MsgReserveSwapIn, MsgCancelSwapIn, MsgCompleteSwapIn, MsgStorageProviderForcedExit } from "./tx";
export declare const registry: ReadonlyArray<[string, GeneratedType]>;
export declare const load: (protoRegistry: Registry) => void;
export declare const MessageComposer: {
    encoded: {
        createGlobalVirtualGroup(value: MsgCreateGlobalVirtualGroup): {
            typeUrl: string;
            value: Uint8Array;
        };
        deleteGlobalVirtualGroup(value: MsgDeleteGlobalVirtualGroup): {
            typeUrl: string;
            value: Uint8Array;
        };
        deposit(value: MsgDeposit): {
            typeUrl: string;
            value: Uint8Array;
        };
        withdraw(value: MsgWithdraw): {
            typeUrl: string;
            value: Uint8Array;
        };
        swapOut(value: MsgSwapOut): {
            typeUrl: string;
            value: Uint8Array;
        };
        settle(value: MsgSettle): {
            typeUrl: string;
            value: Uint8Array;
        };
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: Uint8Array;
        };
        storageProviderExit(value: MsgStorageProviderExit): {
            typeUrl: string;
            value: Uint8Array;
        };
        completeStorageProviderExit(value: MsgCompleteStorageProviderExit): {
            typeUrl: string;
            value: Uint8Array;
        };
        completeSwapOut(value: MsgCompleteSwapOut): {
            typeUrl: string;
            value: Uint8Array;
        };
        cancelSwapOut(value: MsgCancelSwapOut): {
            typeUrl: string;
            value: Uint8Array;
        };
        reserveSwapIn(value: MsgReserveSwapIn): {
            typeUrl: string;
            value: Uint8Array;
        };
        cancelSwapIn(value: MsgCancelSwapIn): {
            typeUrl: string;
            value: Uint8Array;
        };
        completeSwapIn(value: MsgCompleteSwapIn): {
            typeUrl: string;
            value: Uint8Array;
        };
        storageProviderForcedExit(value: MsgStorageProviderForcedExit): {
            typeUrl: string;
            value: Uint8Array;
        };
    };
    withTypeUrl: {
        createGlobalVirtualGroup(value: MsgCreateGlobalVirtualGroup): {
            typeUrl: string;
            value: MsgCreateGlobalVirtualGroup;
        };
        deleteGlobalVirtualGroup(value: MsgDeleteGlobalVirtualGroup): {
            typeUrl: string;
            value: MsgDeleteGlobalVirtualGroup;
        };
        deposit(value: MsgDeposit): {
            typeUrl: string;
            value: MsgDeposit;
        };
        withdraw(value: MsgWithdraw): {
            typeUrl: string;
            value: MsgWithdraw;
        };
        swapOut(value: MsgSwapOut): {
            typeUrl: string;
            value: MsgSwapOut;
        };
        settle(value: MsgSettle): {
            typeUrl: string;
            value: MsgSettle;
        };
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: MsgUpdateParams;
        };
        storageProviderExit(value: MsgStorageProviderExit): {
            typeUrl: string;
            value: MsgStorageProviderExit;
        };
        completeStorageProviderExit(value: MsgCompleteStorageProviderExit): {
            typeUrl: string;
            value: MsgCompleteStorageProviderExit;
        };
        completeSwapOut(value: MsgCompleteSwapOut): {
            typeUrl: string;
            value: MsgCompleteSwapOut;
        };
        cancelSwapOut(value: MsgCancelSwapOut): {
            typeUrl: string;
            value: MsgCancelSwapOut;
        };
        reserveSwapIn(value: MsgReserveSwapIn): {
            typeUrl: string;
            value: MsgReserveSwapIn;
        };
        cancelSwapIn(value: MsgCancelSwapIn): {
            typeUrl: string;
            value: MsgCancelSwapIn;
        };
        completeSwapIn(value: MsgCompleteSwapIn): {
            typeUrl: string;
            value: MsgCompleteSwapIn;
        };
        storageProviderForcedExit(value: MsgStorageProviderForcedExit): {
            typeUrl: string;
            value: MsgStorageProviderForcedExit;
        };
    };
    toJSON: {
        createGlobalVirtualGroup(value: MsgCreateGlobalVirtualGroup): {
            typeUrl: string;
            value: unknown;
        };
        deleteGlobalVirtualGroup(value: MsgDeleteGlobalVirtualGroup): {
            typeUrl: string;
            value: unknown;
        };
        deposit(value: MsgDeposit): {
            typeUrl: string;
            value: unknown;
        };
        withdraw(value: MsgWithdraw): {
            typeUrl: string;
            value: unknown;
        };
        swapOut(value: MsgSwapOut): {
            typeUrl: string;
            value: unknown;
        };
        settle(value: MsgSettle): {
            typeUrl: string;
            value: unknown;
        };
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: unknown;
        };
        storageProviderExit(value: MsgStorageProviderExit): {
            typeUrl: string;
            value: unknown;
        };
        completeStorageProviderExit(value: MsgCompleteStorageProviderExit): {
            typeUrl: string;
            value: unknown;
        };
        completeSwapOut(value: MsgCompleteSwapOut): {
            typeUrl: string;
            value: unknown;
        };
        cancelSwapOut(value: MsgCancelSwapOut): {
            typeUrl: string;
            value: unknown;
        };
        reserveSwapIn(value: MsgReserveSwapIn): {
            typeUrl: string;
            value: unknown;
        };
        cancelSwapIn(value: MsgCancelSwapIn): {
            typeUrl: string;
            value: unknown;
        };
        completeSwapIn(value: MsgCompleteSwapIn): {
            typeUrl: string;
            value: unknown;
        };
        storageProviderForcedExit(value: MsgStorageProviderForcedExit): {
            typeUrl: string;
            value: unknown;
        };
    };
    fromJSON: {
        createGlobalVirtualGroup(value: any): {
            typeUrl: string;
            value: MsgCreateGlobalVirtualGroup;
        };
        deleteGlobalVirtualGroup(value: any): {
            typeUrl: string;
            value: MsgDeleteGlobalVirtualGroup;
        };
        deposit(value: any): {
            typeUrl: string;
            value: MsgDeposit;
        };
        withdraw(value: any): {
            typeUrl: string;
            value: MsgWithdraw;
        };
        swapOut(value: any): {
            typeUrl: string;
            value: MsgSwapOut;
        };
        settle(value: any): {
            typeUrl: string;
            value: MsgSettle;
        };
        updateParams(value: any): {
            typeUrl: string;
            value: MsgUpdateParams;
        };
        storageProviderExit(value: any): {
            typeUrl: string;
            value: MsgStorageProviderExit;
        };
        completeStorageProviderExit(value: any): {
            typeUrl: string;
            value: MsgCompleteStorageProviderExit;
        };
        completeSwapOut(value: any): {
            typeUrl: string;
            value: MsgCompleteSwapOut;
        };
        cancelSwapOut(value: any): {
            typeUrl: string;
            value: MsgCancelSwapOut;
        };
        reserveSwapIn(value: any): {
            typeUrl: string;
            value: MsgReserveSwapIn;
        };
        cancelSwapIn(value: any): {
            typeUrl: string;
            value: MsgCancelSwapIn;
        };
        completeSwapIn(value: any): {
            typeUrl: string;
            value: MsgCompleteSwapIn;
        };
        storageProviderForcedExit(value: any): {
            typeUrl: string;
            value: MsgStorageProviderForcedExit;
        };
    };
    fromPartial: {
        createGlobalVirtualGroup(value: MsgCreateGlobalVirtualGroup): {
            typeUrl: string;
            value: MsgCreateGlobalVirtualGroup;
        };
        deleteGlobalVirtualGroup(value: MsgDeleteGlobalVirtualGroup): {
            typeUrl: string;
            value: MsgDeleteGlobalVirtualGroup;
        };
        deposit(value: MsgDeposit): {
            typeUrl: string;
            value: MsgDeposit;
        };
        withdraw(value: MsgWithdraw): {
            typeUrl: string;
            value: MsgWithdraw;
        };
        swapOut(value: MsgSwapOut): {
            typeUrl: string;
            value: MsgSwapOut;
        };
        settle(value: MsgSettle): {
            typeUrl: string;
            value: MsgSettle;
        };
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: MsgUpdateParams;
        };
        storageProviderExit(value: MsgStorageProviderExit): {
            typeUrl: string;
            value: MsgStorageProviderExit;
        };
        completeStorageProviderExit(value: MsgCompleteStorageProviderExit): {
            typeUrl: string;
            value: MsgCompleteStorageProviderExit;
        };
        completeSwapOut(value: MsgCompleteSwapOut): {
            typeUrl: string;
            value: MsgCompleteSwapOut;
        };
        cancelSwapOut(value: MsgCancelSwapOut): {
            typeUrl: string;
            value: MsgCancelSwapOut;
        };
        reserveSwapIn(value: MsgReserveSwapIn): {
            typeUrl: string;
            value: MsgReserveSwapIn;
        };
        cancelSwapIn(value: MsgCancelSwapIn): {
            typeUrl: string;
            value: MsgCancelSwapIn;
        };
        completeSwapIn(value: MsgCompleteSwapIn): {
            typeUrl: string;
            value: MsgCompleteSwapIn;
        };
        storageProviderForcedExit(value: MsgStorageProviderForcedExit): {
            typeUrl: string;
            value: MsgStorageProviderForcedExit;
        };
    };
};
