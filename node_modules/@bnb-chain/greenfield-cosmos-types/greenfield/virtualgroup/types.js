"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapInInfo = exports.SwapOutInfo = exports.GVGFamilyStatisticsWithinSP = exports.GVGStatisticsWithinSP = exports.GlobalVirtualGroupsBindingOnBucket = exports.GlobalVirtualGroupFamily = exports.GlobalVirtualGroup = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.virtualgroup";
function createBaseGlobalVirtualGroup() {
    return {
        id: 0,
        familyId: 0,
        primarySpId: 0,
        secondarySpIds: [],
        storedSize: helpers_1.Long.UZERO,
        virtualPaymentAddress: "",
        totalDeposit: ""
    };
}
exports.GlobalVirtualGroup = {
    typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.familyId !== 0) {
            writer.uint32(16).uint32(message.familyId);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(24).uint32(message.primarySpId);
        }
        writer.uint32(34).fork();
        for (const v of message.secondarySpIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        if (!message.storedSize.isZero()) {
            writer.uint32(40).uint64(message.storedSize);
        }
        if (message.virtualPaymentAddress !== "") {
            writer.uint32(50).string(message.virtualPaymentAddress);
        }
        if (message.totalDeposit !== "") {
            writer.uint32(58).string(message.totalDeposit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGlobalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.familyId = reader.uint32();
                    break;
                case 3:
                    message.primarySpId = reader.uint32();
                    break;
                case 4:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.secondarySpIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.secondarySpIds.push(reader.uint32());
                    }
                    break;
                case 5:
                    message.storedSize = reader.uint64();
                    break;
                case 6:
                    message.virtualPaymentAddress = reader.string();
                    break;
                case 7:
                    message.totalDeposit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            familyId: (0, helpers_1.isSet)(object.familyId) ? Number(object.familyId) : 0,
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            secondarySpIds: Array.isArray(object?.secondarySpIds) ? object.secondarySpIds.map((e) => Number(e)) : [],
            storedSize: (0, helpers_1.isSet)(object.storedSize) ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO,
            virtualPaymentAddress: (0, helpers_1.isSet)(object.virtualPaymentAddress) ? String(object.virtualPaymentAddress) : "",
            totalDeposit: (0, helpers_1.isSet)(object.totalDeposit) ? String(object.totalDeposit) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.familyId !== undefined && (obj.familyId = Math.round(message.familyId));
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        if (message.secondarySpIds) {
            obj.secondarySpIds = message.secondarySpIds.map(e => Math.round(e));
        }
        else {
            obj.secondarySpIds = [];
        }
        message.storedSize !== undefined && (obj.storedSize = (message.storedSize || helpers_1.Long.UZERO).toString());
        message.virtualPaymentAddress !== undefined && (obj.virtualPaymentAddress = message.virtualPaymentAddress);
        message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGlobalVirtualGroup();
        message.id = object.id ?? 0;
        message.familyId = object.familyId ?? 0;
        message.primarySpId = object.primarySpId ?? 0;
        message.secondarySpIds = object.secondarySpIds?.map(e => e) || [];
        message.storedSize = object.storedSize !== undefined && object.storedSize !== null ? helpers_1.Long.fromValue(object.storedSize) : helpers_1.Long.UZERO;
        message.virtualPaymentAddress = object.virtualPaymentAddress ?? "";
        message.totalDeposit = object.totalDeposit ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            familyId: object?.family_id,
            primarySpId: object?.primary_sp_id,
            secondarySpIds: Array.isArray(object?.secondary_sp_ids) ? object.secondary_sp_ids.map((e) => e) : [],
            storedSize: object?.stored_size,
            virtualPaymentAddress: object?.virtual_payment_address,
            totalDeposit: object?.total_deposit
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.family_id = message.familyId;
        obj.primary_sp_id = message.primarySpId;
        if (message.secondarySpIds) {
            obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
        }
        else {
            obj.secondary_sp_ids = [];
        }
        obj.stored_size = message.storedSize;
        obj.virtual_payment_address = message.virtualPaymentAddress;
        obj.total_deposit = message.totalDeposit;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseGlobalVirtualGroup();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.family_id !== undefined && object.family_id !== null) {
            message.familyId = object.family_id;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        message.secondarySpIds = object.secondary_sp_ids?.map(e => e) || [];
        if (object.stored_size !== undefined && object.stored_size !== null) {
            message.storedSize = helpers_1.Long.fromString(object.stored_size);
        }
        if (object.virtual_payment_address !== undefined && object.virtual_payment_address !== null) {
            message.virtualPaymentAddress = object.virtual_payment_address;
        }
        if (object.total_deposit !== undefined && object.total_deposit !== null) {
            message.totalDeposit = object.total_deposit;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.family_id = message.familyId;
        obj.primary_sp_id = message.primarySpId;
        if (message.secondarySpIds) {
            obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
        }
        else {
            obj.secondary_sp_ids = [];
        }
        obj.stored_size = message.storedSize ? message.storedSize.toString() : undefined;
        obj.virtual_payment_address = message.virtualPaymentAddress;
        obj.total_deposit = message.totalDeposit;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GlobalVirtualGroup.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GlobalVirtualGroup.decode(message.value);
    },
    toProto(message) {
        return exports.GlobalVirtualGroup.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroup",
            value: exports.GlobalVirtualGroup.encode(message).finish()
        };
    }
};
function createBaseGlobalVirtualGroupFamily() {
    return {
        id: 0,
        primarySpId: 0,
        globalVirtualGroupIds: [],
        virtualPaymentAddress: ""
    };
}
exports.GlobalVirtualGroupFamily = {
    typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroupFamily",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.primarySpId !== 0) {
            writer.uint32(16).uint32(message.primarySpId);
        }
        writer.uint32(26).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        if (message.virtualPaymentAddress !== "") {
            writer.uint32(34).string(message.virtualPaymentAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGlobalVirtualGroupFamily();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.primarySpId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                case 4:
                    message.virtualPaymentAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            primarySpId: (0, helpers_1.isSet)(object.primarySpId) ? Number(object.primarySpId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : [],
            virtualPaymentAddress: (0, helpers_1.isSet)(object.virtualPaymentAddress) ? String(object.virtualPaymentAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        message.virtualPaymentAddress !== undefined && (obj.virtualPaymentAddress = message.virtualPaymentAddress);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGlobalVirtualGroupFamily();
        message.id = object.id ?? 0;
        message.primarySpId = object.primarySpId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        message.virtualPaymentAddress = object.virtualPaymentAddress ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            primarySpId: object?.primary_sp_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : [],
            virtualPaymentAddress: object?.virtual_payment_address
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        obj.virtual_payment_address = message.virtualPaymentAddress;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseGlobalVirtualGroupFamily();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
            message.primarySpId = object.primary_sp_id;
        }
        message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
        if (object.virtual_payment_address !== undefined && object.virtual_payment_address !== null) {
            message.virtualPaymentAddress = object.virtual_payment_address;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id;
        obj.primary_sp_id = message.primarySpId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        obj.virtual_payment_address = message.virtualPaymentAddress;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GlobalVirtualGroupFamily.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GlobalVirtualGroupFamily.decode(message.value);
    },
    toProto(message) {
        return exports.GlobalVirtualGroupFamily.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroupFamily",
            value: exports.GlobalVirtualGroupFamily.encode(message).finish()
        };
    }
};
function createBaseGlobalVirtualGroupsBindingOnBucket() {
    return {
        bucketId: "",
        globalVirtualGroupIds: [],
        localVirtualGroupIds: []
    };
}
exports.GlobalVirtualGroupsBindingOnBucket = {
    typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroupsBindingOnBucket",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketId !== "") {
            writer.uint32(10).string(message.bucketId);
        }
        writer.uint32(18).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        writer.uint32(26).fork();
        for (const v of message.localVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGlobalVirtualGroupsBindingOnBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketId = reader.string();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.localVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.localVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : [],
            localVirtualGroupIds: Array.isArray(object?.localVirtualGroupIds) ? object.localVirtualGroupIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        if (message.localVirtualGroupIds) {
            obj.localVirtualGroupIds = message.localVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.localVirtualGroupIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGlobalVirtualGroupsBindingOnBucket();
        message.bucketId = object.bucketId ?? "";
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        message.localVirtualGroupIds = object.localVirtualGroupIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            bucketId: object?.bucket_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : [],
            localVirtualGroupIds: Array.isArray(object?.local_virtual_group_ids) ? object.local_virtual_group_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_id = message.bucketId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        if (message.localVirtualGroupIds) {
            obj.local_virtual_group_ids = message.localVirtualGroupIds.map(e => e);
        }
        else {
            obj.local_virtual_group_ids = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseGlobalVirtualGroupsBindingOnBucket();
        if (object.bucket_id !== undefined && object.bucket_id !== null) {
            message.bucketId = object.bucket_id;
        }
        message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
        message.localVirtualGroupIds = object.local_virtual_group_ids?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.bucket_id = message.bucketId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        if (message.localVirtualGroupIds) {
            obj.local_virtual_group_ids = message.localVirtualGroupIds.map(e => e);
        }
        else {
            obj.local_virtual_group_ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GlobalVirtualGroupsBindingOnBucket.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GlobalVirtualGroupsBindingOnBucket.decode(message.value);
    },
    toProto(message) {
        return exports.GlobalVirtualGroupsBindingOnBucket.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.GlobalVirtualGroupsBindingOnBucket",
            value: exports.GlobalVirtualGroupsBindingOnBucket.encode(message).finish()
        };
    }
};
function createBaseGVGStatisticsWithinSP() {
    return {
        storageProviderId: 0,
        primaryCount: 0,
        secondaryCount: 0,
        breakRedundancyReqmtGvgCount: 0
    };
}
exports.GVGStatisticsWithinSP = {
    typeUrl: "/greenfield.virtualgroup.GVGStatisticsWithinSP",
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProviderId !== 0) {
            writer.uint32(8).uint32(message.storageProviderId);
        }
        if (message.primaryCount !== 0) {
            writer.uint32(16).uint32(message.primaryCount);
        }
        if (message.secondaryCount !== 0) {
            writer.uint32(24).uint32(message.secondaryCount);
        }
        if (message.breakRedundancyReqmtGvgCount !== 0) {
            writer.uint32(32).uint32(message.breakRedundancyReqmtGvgCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGVGStatisticsWithinSP();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProviderId = reader.uint32();
                    break;
                case 2:
                    message.primaryCount = reader.uint32();
                    break;
                case 3:
                    message.secondaryCount = reader.uint32();
                    break;
                case 4:
                    message.breakRedundancyReqmtGvgCount = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProviderId: (0, helpers_1.isSet)(object.storageProviderId) ? Number(object.storageProviderId) : 0,
            primaryCount: (0, helpers_1.isSet)(object.primaryCount) ? Number(object.primaryCount) : 0,
            secondaryCount: (0, helpers_1.isSet)(object.secondaryCount) ? Number(object.secondaryCount) : 0,
            breakRedundancyReqmtGvgCount: (0, helpers_1.isSet)(object.breakRedundancyReqmtGvgCount) ? Number(object.breakRedundancyReqmtGvgCount) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
        message.primaryCount !== undefined && (obj.primaryCount = Math.round(message.primaryCount));
        message.secondaryCount !== undefined && (obj.secondaryCount = Math.round(message.secondaryCount));
        message.breakRedundancyReqmtGvgCount !== undefined && (obj.breakRedundancyReqmtGvgCount = Math.round(message.breakRedundancyReqmtGvgCount));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGVGStatisticsWithinSP();
        message.storageProviderId = object.storageProviderId ?? 0;
        message.primaryCount = object.primaryCount ?? 0;
        message.secondaryCount = object.secondaryCount ?? 0;
        message.breakRedundancyReqmtGvgCount = object.breakRedundancyReqmtGvgCount ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            storageProviderId: object?.storage_provider_id,
            primaryCount: object?.primary_count,
            secondaryCount: object?.secondary_count,
            breakRedundancyReqmtGvgCount: object?.break_redundancy_reqmt_gvg_count
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.primary_count = message.primaryCount;
        obj.secondary_count = message.secondaryCount;
        obj.break_redundancy_reqmt_gvg_count = message.breakRedundancyReqmtGvgCount;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseGVGStatisticsWithinSP();
        if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
            message.storageProviderId = object.storage_provider_id;
        }
        if (object.primary_count !== undefined && object.primary_count !== null) {
            message.primaryCount = object.primary_count;
        }
        if (object.secondary_count !== undefined && object.secondary_count !== null) {
            message.secondaryCount = object.secondary_count;
        }
        if (object.break_redundancy_reqmt_gvg_count !== undefined && object.break_redundancy_reqmt_gvg_count !== null) {
            message.breakRedundancyReqmtGvgCount = object.break_redundancy_reqmt_gvg_count;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.storage_provider_id = message.storageProviderId;
        obj.primary_count = message.primaryCount;
        obj.secondary_count = message.secondaryCount;
        obj.break_redundancy_reqmt_gvg_count = message.breakRedundancyReqmtGvgCount;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GVGStatisticsWithinSP.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GVGStatisticsWithinSP.decode(message.value);
    },
    toProto(message) {
        return exports.GVGStatisticsWithinSP.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.GVGStatisticsWithinSP",
            value: exports.GVGStatisticsWithinSP.encode(message).finish()
        };
    }
};
function createBaseGVGFamilyStatisticsWithinSP() {
    return {
        spId: 0,
        globalVirtualGroupFamilyIds: []
    };
}
exports.GVGFamilyStatisticsWithinSP = {
    typeUrl: "/greenfield.virtualgroup.GVGFamilyStatisticsWithinSP",
    encode(message, writer = _m0.Writer.create()) {
        if (message.spId !== 0) {
            writer.uint32(8).uint32(message.spId);
        }
        writer.uint32(18).fork();
        for (const v of message.globalVirtualGroupFamilyIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGVGFamilyStatisticsWithinSP();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spId = reader.uint32();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupFamilyIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupFamilyIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            globalVirtualGroupFamilyIds: Array.isArray(object?.globalVirtualGroupFamilyIds) ? object.globalVirtualGroupFamilyIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        if (message.globalVirtualGroupFamilyIds) {
            obj.globalVirtualGroupFamilyIds = message.globalVirtualGroupFamilyIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupFamilyIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGVGFamilyStatisticsWithinSP();
        message.spId = object.spId ?? 0;
        message.globalVirtualGroupFamilyIds = object.globalVirtualGroupFamilyIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            spId: object?.sp_id,
            globalVirtualGroupFamilyIds: Array.isArray(object?.global_virtual_group_family_ids) ? object.global_virtual_group_family_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_id = message.spId;
        if (message.globalVirtualGroupFamilyIds) {
            obj.global_virtual_group_family_ids = message.globalVirtualGroupFamilyIds.map(e => e);
        }
        else {
            obj.global_virtual_group_family_ids = [];
        }
        return obj;
    },
    fromAmino(object) {
        const message = createBaseGVGFamilyStatisticsWithinSP();
        if (object.sp_id !== undefined && object.sp_id !== null) {
            message.spId = object.sp_id;
        }
        message.globalVirtualGroupFamilyIds = object.global_virtual_group_family_ids?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sp_id = message.spId;
        if (message.globalVirtualGroupFamilyIds) {
            obj.global_virtual_group_family_ids = message.globalVirtualGroupFamilyIds.map(e => e);
        }
        else {
            obj.global_virtual_group_family_ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GVGFamilyStatisticsWithinSP.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GVGFamilyStatisticsWithinSP.decode(message.value);
    },
    toProto(message) {
        return exports.GVGFamilyStatisticsWithinSP.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.GVGFamilyStatisticsWithinSP",
            value: exports.GVGFamilyStatisticsWithinSP.encode(message).finish()
        };
    }
};
function createBaseSwapOutInfo() {
    return {
        spId: 0,
        successorSpId: 0
    };
}
exports.SwapOutInfo = {
    typeUrl: "/greenfield.virtualgroup.SwapOutInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.spId !== 0) {
            writer.uint32(8).uint32(message.spId);
        }
        if (message.successorSpId !== 0) {
            writer.uint32(16).uint32(message.successorSpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapOutInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spId = reader.uint32();
                    break;
                case 2:
                    message.successorSpId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            successorSpId: (0, helpers_1.isSet)(object.successorSpId) ? Number(object.successorSpId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        message.successorSpId !== undefined && (obj.successorSpId = Math.round(message.successorSpId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSwapOutInfo();
        message.spId = object.spId ?? 0;
        message.successorSpId = object.successorSpId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            spId: object?.sp_id,
            successorSpId: object?.successor_sp_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.successor_sp_id = message.successorSpId;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseSwapOutInfo();
        if (object.sp_id !== undefined && object.sp_id !== null) {
            message.spId = object.sp_id;
        }
        if (object.successor_sp_id !== undefined && object.successor_sp_id !== null) {
            message.successorSpId = object.successor_sp_id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.successor_sp_id = message.successorSpId;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.SwapOutInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.SwapOutInfo.decode(message.value);
    },
    toProto(message) {
        return exports.SwapOutInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.SwapOutInfo",
            value: exports.SwapOutInfo.encode(message).finish()
        };
    }
};
function createBaseSwapInInfo() {
    return {
        successorSpId: 0,
        targetSpId: 0,
        expirationTime: helpers_1.Long.UZERO
    };
}
exports.SwapInInfo = {
    typeUrl: "/greenfield.virtualgroup.SwapInInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.successorSpId !== 0) {
            writer.uint32(8).uint32(message.successorSpId);
        }
        if (message.targetSpId !== 0) {
            writer.uint32(16).uint32(message.targetSpId);
        }
        if (!message.expirationTime.isZero()) {
            writer.uint32(24).uint64(message.expirationTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapInInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.successorSpId = reader.uint32();
                    break;
                case 2:
                    message.targetSpId = reader.uint32();
                    break;
                case 3:
                    message.expirationTime = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            successorSpId: (0, helpers_1.isSet)(object.successorSpId) ? Number(object.successorSpId) : 0,
            targetSpId: (0, helpers_1.isSet)(object.targetSpId) ? Number(object.targetSpId) : 0,
            expirationTime: (0, helpers_1.isSet)(object.expirationTime) ? helpers_1.Long.fromValue(object.expirationTime) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.successorSpId !== undefined && (obj.successorSpId = Math.round(message.successorSpId));
        message.targetSpId !== undefined && (obj.targetSpId = Math.round(message.targetSpId));
        message.expirationTime !== undefined && (obj.expirationTime = (message.expirationTime || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSwapInInfo();
        message.successorSpId = object.successorSpId ?? 0;
        message.targetSpId = object.targetSpId ?? 0;
        message.expirationTime = object.expirationTime !== undefined && object.expirationTime !== null ? helpers_1.Long.fromValue(object.expirationTime) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            successorSpId: object?.successor_sp_id,
            targetSpId: object?.target_sp_id,
            expirationTime: object?.expiration_time
        };
    },
    toSDK(message) {
        const obj = {};
        obj.successor_sp_id = message.successorSpId;
        obj.target_sp_id = message.targetSpId;
        obj.expiration_time = message.expirationTime;
        return obj;
    },
    fromAmino(object) {
        const message = createBaseSwapInInfo();
        if (object.successor_sp_id !== undefined && object.successor_sp_id !== null) {
            message.successorSpId = object.successor_sp_id;
        }
        if (object.target_sp_id !== undefined && object.target_sp_id !== null) {
            message.targetSpId = object.target_sp_id;
        }
        if (object.expiration_time !== undefined && object.expiration_time !== null) {
            message.expirationTime = helpers_1.Long.fromString(object.expiration_time);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.successor_sp_id = message.successorSpId;
        obj.target_sp_id = message.targetSpId;
        obj.expiration_time = message.expirationTime ? message.expirationTime.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.SwapInInfo.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.SwapInInfo.decode(message.value);
    },
    toProto(message) {
        return exports.SwapInInfo.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/greenfield.virtualgroup.SwapInInfo",
            value: exports.SwapInInfo.encode(message).finish()
        };
    }
};
//# sourceMappingURL=types.js.map